diff --git a/.cursorrules b/.cursorrules
deleted file mode 100644
index a586d02f..00000000
--- a/.cursorrules
+++ /dev/null
@@ -1,77 +0,0 @@
-<cursor-tools Integration>
-# Instructions
-Use the following commands to get AI assistance:
-
-**Web Search:**
-`cursor-tools web "<your question>"` - Get answers from the web using Perplexity AI (e.g., `cursor-tools web "latest weather in London"`)
-when using web for complex queries suggest writing the output to a file somewhere like local-research/<query summary>.md.
-
-**Repository Context:**
-`cursor-tools repo "<your question>"` - Get context-aware answers about this repository using Google Gemini (e.g., `cursor-tools repo "explain authentication flow"`)
-
-**Documentation Generation:**
-`cursor-tools doc [options]` - Generate comprehensive documentation for this repository (e.g., `cursor-tools doc --output docs.md`)
-when using doc for remote repos suggest writing the output to a file somewhere like local-docs/<repo-name>.md.
-
-**GitHub Information:**
-`cursor-tools github pr [number]` - Get the last 10 PRs, or a specific PR by number (e.g., `cursor-tools github pr 123`)
-`cursor-tools github issue [number]` - Get the last 10 issues, or a specific issue by number (e.g., `cursor-tools github issue 456`)
-
-**Browser Automation (Stateless):**
-`cursor-tools browser open <url> [options]` - Open a URL and capture page content, console logs, and network activity (e.g., `cursor-tools browser open "https://example.com" --html`)
-`cursor-tools browser act "<instruction>" --url=<url> [options]` - Execute actions on a webpage using natural language instructions (e.g., `cursor-tools browser act "Click Login" --url=https://example.com`)
-`cursor-tools browser observe "<instruction>" --url=<url> [options]` - Observe interactive elements on a webpage and suggest possible actions (e.g., `cursor-tools browser observe "interactive elements" --url=https://example.com`)
-`cursor-tools browser extract "<instruction>" --url=<url> [options]` - Extract data from a webpage based on natural language instructions (e.g., `cursor-tools browser extract "product names" --url=https://example.com/products`)
-
-**Notes on Browser Commands:**
-- All browser commands are stateless: each command starts with a fresh browser instance and closes it when done.
-- When using `--connect-to`, special URL values are supported:
-  - `current`: Use the existing page without reloading
-  - `reload-current`: Use the existing page and refresh it (useful in development)
-- Multi step workflows involving state or combining multiple actions are supported in the `act` command using the pipe (|) separator (e.g., `cursor-tools browser act "Click Login | Type 'user@example.com' into email | Click Submit" --url=https://example.com`)
-- Video recording is available for all browser commands using the `--video=<directory>` option. This will save a video of the entire browser interaction at 1280x720 resolution. The video file will be saved in the specified directory with a timestamp.
-- DO NOT ask browser act to "wait" for anything, the wait command is currently disabled in Stagehand.
-
-**Tool Recommendations:**
-- `cursor-tools web` is best for general web information not specific to the repository.
-- `cursor-tools repo` is ideal for repository-specific questions, planning, code review and debugging.
-- `cursor-tools doc` generates documentation for local or remote repositories.
-- `cursor-tools browser` is useful for testing and debugging web apps.
-
-**Running Commands:**
-1. **Installed version:** Use `cursor-tools <command>` (if in PATH) or `npm exec cursor-tools "<command>"`, `yarn cursor-tools "<command>"`, `pnpm cursor-tools "<command>"`.
-2. **Without installation:** Use `npx -y cursor-tools@latest "<command>"` or `bunx -y cursor-tools@latest "<command>"`.
-
-**General Command Options (Supported by all commands):**
---model=<model name>: Specify an alternative AI model to use
---max-tokens=<number>: Control response length
---save-to=<file path>: Save command output to a file (in *addition* to displaying it)
---help: View all available options (help is not fully implemented yet)
-
-**Documentation Command Options:**
---from-github=<GitHub username>/<repository name>[@<branch>]: Generate documentation for a remote GitHub repository
-
-**GitHub Command Options:**
---from-github=<GitHub username>/<repository name>[@<branch>]: Access PRs/issues from a specific GitHub repository
-
-**Browser Command Options (for 'open', 'act', 'observe', 'extract'):**
---console: Capture browser console logs (enabled by default, use --no-console to disable)
---html: Capture page HTML content
---network: Capture network activity (enabled by default, use --no-network to disable)
---screenshot=<file path>: Save a screenshot of the page
---timeout=<milliseconds>: Set navigation timeout (default: 30000ms)
---viewport=<width>x<height>: Set viewport size (e.g., 1280x720). When using --connect-to, viewport is only changed if this option is explicitly provided
---headless: Run browser in headless mode (default: true)
---no-headless: Show browser UI (non-headless mode) for debugging
---connect-to=<port>: Connect to existing Chrome instance
---wait=<duration or selector>: Wait after page load (e.g., '5s', '#element-id', 'selector:.my-class')
---video=<directory>: Save a video recording of the browser interaction to the specified directory (1280x720 resolution). Not available when using --connect-to
-
-**Additional Notes:**
-- For detailed information, see `node_modules/cursor-tools/README.md` (if installed locally).
-- Configuration is in `cursor-tools.config.json` (or `~/.cursor-tools/config.json`).
-- API keys are loaded from `.cursor-tools.env` (or `~/.cursor-tools/.env`).
-- Browser commands require separate installation of Playwright: `npm install --save-dev playwright` or `npm install -g playwright`.
-- **Remember:** You're part of a team of superhuman expert AIs. Work together to solve complex problems.
-<!-- cursor-tools-version: 0.5.0 -->
-</cursor-tools Integration>
\ No newline at end of file
diff --git a/.env.test.example b/.env.test.example
deleted file mode 100644
index 60c6a497..00000000
--- a/.env.test.example
+++ /dev/null
@@ -1,16 +0,0 @@
-# Supabase Configuration
-NEXT_PUBLIC_SUPABASE_URL=your_supabase_url
-NEXT_PUBLIC_SUPABASE_ANON_KEY=your_supabase_anon_key
-
-# OpenAI API
-OPENAI_API_KEY=your_openai_api_key
-# Gemini API
-GEMINI_API_KEY=your_gemini_api_key
-
-# Test Configuration
-TEST_USER_ID=test-user-id
-NODE_ENV=test
-
-# Vercel KV Storage (for caching)
-KV_REST_API_URL=your_kv_rest_api_url
-KV_REST_API_TOKEN=your_kv_rest_api_token 
\ No newline at end of file
diff --git a/.gitignore b/.gitignore
index 64cc85d7..c8ea87f6 100644
--- a/.gitignore
+++ b/.gitignore
@@ -16,7 +16,6 @@ node_modules/
 .env
 .env.local
 .env.local.bak
-.env.test
 *.env
 *.env.local
 *.env.development
diff --git a/check-tables.js b/check-tables.js
new file mode 100644
index 00000000..f4830971
--- /dev/null
+++ b/check-tables.js
@@ -0,0 +1,84 @@
+require('dotenv').config({ path: '.env.local' });
+const { createClient } = require('@supabase/supabase-js');
+
+// Create a Supabase client with the URL and anon key
+const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
+const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;
+
+async function checkTables() {
+  console.log('Checking Supabase tables...');
+
+  if (!supabaseUrl || !supabaseAnonKey) {
+    console.error('Error: Supabase URL or Anon Key is missing in environment variables');
+    return;
+  }
+
+  try {
+    // Create client
+    const supabase = createClient(supabaseUrl, supabaseAnonKey);
+
+    // Get list of tables
+    const { data, error } = await supabase
+      .from('pg_tables')
+      .select('tablename')
+      .eq('schemaname', 'public');
+
+    if (error) {
+      console.error('Error querying tables:', error);
+
+      // Try a different approach
+      console.log('Trying to check specific tables...');
+
+      // Check users table
+      const { error: usersError } = await supabase
+        .from('users')
+        .select('count(*)', { count: 'exact', head: true });
+      console.log('users table:', usersError ? 'Error: ' + usersError.message : 'Exists');
+
+      // Check stories table
+      const { error: storiesError } = await supabase
+        .from('stories')
+        .select('count(*)', { count: 'exact', head: true });
+      console.log('stories table:', storiesError ? 'Error: ' + storiesError.message : 'Exists');
+
+      // Check preferences table
+      const { error: preferencesError } = await supabase
+        .from('preferences')
+        .select('count(*)', { count: 'exact', head: true });
+      console.log(
+        'preferences table:',
+        preferencesError ? 'Error: ' + preferencesError.message : 'Exists'
+      );
+
+      // Check subscriptions table
+      const { error: subscriptionsError } = await supabase
+        .from('subscriptions')
+        .select('count(*)', { count: 'exact', head: true });
+      console.log(
+        'subscriptions table:',
+        subscriptionsError ? 'Error: ' + subscriptionsError.message : 'Exists'
+      );
+    } else {
+      console.log('Tables in the public schema:');
+      data.forEach((table) => {
+        console.log(`- ${table.tablename}`);
+      });
+
+      // Check for our specific tables
+      const tableNames = data.map((t) => t.tablename);
+      console.log('\nChecking for required tables:');
+      console.log('users table:', tableNames.includes('users') ? 'Exists' : 'Missing');
+      console.log('stories table:', tableNames.includes('stories') ? 'Exists' : 'Missing');
+      console.log('preferences table:', tableNames.includes('preferences') ? 'Exists' : 'Missing');
+      console.log(
+        'subscriptions table:',
+        tableNames.includes('subscriptions') ? 'Exists' : 'Missing'
+      );
+    }
+  } catch (error) {
+    console.error('Error connecting to Supabase:', error);
+  }
+}
+
+// Run the check
+checkTables();
diff --git a/instrumentation.ts b/instrumentation.ts
index 9291dbea..ad7958a8 100644
--- a/instrumentation.ts
+++ b/instrumentation.ts
@@ -1,9 +1,4 @@
-export async function register() {
-  if (process.env.NEXT_RUNTIME === 'nodejs') {
-    const { tracer } = await import('./src/config/telemetry');
-    return tracer;
-  }
-}
+export async function register() {}
 
 export const onRequestError = (error: any) => {
   console.error('Request Error:', error);
diff --git a/jest.config.js b/jest.config.js
new file mode 100644
index 00000000..08527eed
--- /dev/null
+++ b/jest.config.js
@@ -0,0 +1,35 @@
+const nextJest = require('next/jest');
+
+const createJestConfig = nextJest({
+  // Provide the path to your Next.js app to load next.config.js and .env files in your test environment
+  dir: './',
+});
+
+// Add any custom config to be passed to Jest
+const customJestConfig = {
+  setupFilesAfterEnv: ['<rootDir>/jest.setup.js'],
+  testEnvironment: 'jest-environment-jsdom',
+  moduleNameMapper: {
+    // Handle module aliases (this will be automatically configured for you soon)
+    '^@/(.*)$': '<rootDir>/src/$1',
+  },
+  // Add more setup options before each test is run
+  // setupFilesAfterEnv: ['<rootDir>/jest.setup.js'],
+  testPathIgnorePatterns: ['<rootDir>/node_modules/', '<rootDir>/.next/'],
+  transform: {
+    // Use babel-jest to transpile tests with the next/babel preset
+    // https://jestjs.io/docs/configuration#transform-objectstring-pathtotransformer--pathtotransformer-object
+    '^.+\\.(js|jsx|ts|tsx)$': ['babel-jest', { presets: ['next/babel'] }],
+  },
+  transformIgnorePatterns: ['/node_modules/', '^.+\\.module\\.(css|sass|scss)$'],
+  collectCoverageFrom: [
+    'src/**/*.{js,jsx,ts,tsx}',
+    '!src/**/*.d.ts',
+    '!src/**/*.stories.{js,jsx,ts,tsx}',
+    '!src/pages/_app.tsx',
+    '!src/pages/_document.tsx',
+  ],
+};
+
+// createJestConfig is exported this way to ensure that next/jest can load the Next.js config which is async
+module.exports = createJestConfig(customJestConfig);
diff --git a/jest.setup.js b/jest.setup.js
new file mode 100644
index 00000000..387becf6
--- /dev/null
+++ b/jest.setup.js
@@ -0,0 +1,33 @@
+// Learn more: https://github.com/testing-library/jest-dom
+import '@testing-library/jest-dom';
+
+// Mock Next.js router
+jest.mock('next/navigation', () => ({
+  useRouter: jest.fn(() => ({
+    push: jest.fn(),
+    replace: jest.fn(),
+    prefetch: jest.fn(),
+    back: jest.fn(),
+    forward: jest.fn(),
+    refresh: jest.fn(),
+  })),
+  usePathname: jest.fn(() => '/'),
+  useSearchParams: jest.fn(() => new URLSearchParams()),
+  redirect: jest.fn(),
+}));
+
+// Mock Next.js image component
+jest.mock('next/image', () => ({
+  __esModule: true,
+  default: (props) => {
+    // eslint-disable-next-line jsx-a11y/alt-text
+    return <img {...props} />;
+  },
+}));
+
+// Mock environment variables
+process.env = {
+  ...process.env,
+  NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: 'test-publishable-key',
+  CLERK_SECRET_KEY: 'test-secret-key',
+};
diff --git a/next.config.js b/next.config.js
index 056302f7..25e7f714 100644
--- a/next.config.js
+++ b/next.config.js
@@ -1,15 +1,12 @@
 // This is a temporary configuration file without Sentry integration
 // The original file is backed up at next.config.js.backup
 
-const crypto = require('crypto');
-
 /** @type {import('next').NextConfig} */
 const nextConfig = {
   productionBrowserSourceMaps: true,
   reactStrictMode: true,
-  swcMinify: true,
   // Add assetPrefix to ensure static assets are loaded from the correct port
-  assetPrefix: process.env.NODE_ENV === 'development' ? 'http://localhost:3000' : undefined,
+  assetPrefix: process.env.NODE_ENV === 'development' ? '' : undefined,
   experimental: {
     serverActions: {
       allowedOrigins: [
@@ -52,63 +49,45 @@ const nextConfig = {
   staticPageGenerationTimeout: 180,
 
   webpack: (config, { dev, isServer }) => {
-    // Fixes npm packages that depend on `fs` module
-    if (!isServer) {
-      config.resolve.fallback = {
-        ...config.resolve.fallback,
-        fs: false,
-        net: false,
-        dns: false,
-        tls: false,
-        perf_hooks: false,
-        '@opentelemetry/api': false,
-      };
+    // Resolve module not found issues
+    config.resolve.fallback = {
+      fs: false,
+      net: false,
+      tls: false,
+      dns: false,
+    };
 
-      // Configure chunk loading for development
-      if (dev) {
-        config.output = {
-          ...config.output,
-          chunkFilename: '[name].js',
-          publicPath: 'http://localhost:3000/_next/',
-        };
-      }
+    // Optimize source maps for production
+    if (!dev) {
+      config.devtool = 'source-map';
 
-      // Basic optimization settings
-      config.optimization = {
-        ...config.optimization,
-        runtimeChunk: 'single',
-        splitChunks: {
-          chunks: 'all',
-          minSize: 20000,
-          maxSize: 244000,
-          cacheGroups: {
-            default: false,
-            vendors: false,
-            commons: {
-              name: 'commons',
-              chunks: 'all',
-              minChunks: 2,
-              reuseExistingChunk: true,
-            },
-            shared: {
-              name: false,
-              chunks: 'all',
-              minChunks: 2,
-              reuseExistingChunk: true,
-            },
-          },
-        },
-      };
+      // Optimize source maps
+      if (config.optimization) {
+        // Ensure we have the optimization object
+        if (!config.optimization.minimizer) {
+          config.optimization.minimizer = [];
+        }
+
+        // Configure source map generation for production
+        config.optimization.minimize = true;
+      }
     }
 
-    if (isServer) {
-      console.log('Server-side environment variables:', {
-        NEXT_PUBLIC_CLERK_FRONTEND_API: process.env.NEXT_PUBLIC_CLERK_FRONTEND_API,
-      });
-    } else {
-      console.log('Client-side environment variables:', {
-        NEXT_PUBLIC_CLERK_FRONTEND_API: process.env.NEXT_PUBLIC_CLERK_FRONTEND_API,
-      });
+    // Optimize bundle size
+    if (!dev && !isServer) {
+      // const { BundleAnalyzerPlugin } = require('webpack-bundle-analyzer');
+      if (process.env.ANALYZE === 'true') {
+        import('webpack-bundle-analyzer').then(({ BundleAnalyzerPlugin }) => {
+          console.log('Bundle analyzer is running...');
+          config.plugins.push(
+            new BundleAnalyzerPlugin({
+              analyzerMode: 'server',
+              analyzerPort: 8888,
+              openAnalyzer: true,
+            })
+          );
+        });
+      }
     }
 
     return config;
@@ -172,23 +151,6 @@ const nextConfig = {
             key: 'Cache-Control',
             value: 'public, max-age=31536000, immutable',
           },
-          {
-            key: 'Access-Control-Allow-Origin',
-            value: '*',
-          },
-        ],
-      },
-      {
-        source: '/_next/static/media/(.*)',
-        headers: [
-          {
-            key: 'Cache-Control',
-            value: 'public, max-age=31536000, immutable',
-          },
-          {
-            key: 'Access-Control-Allow-Origin',
-            value: '*',
-          },
         ],
       },
       {
@@ -205,9 +167,8 @@ const nextConfig = {
 };
 
 nextConfig.env = {
-  UPSTASH_REDIS_REST_URL: process.env.UPSTASH_REDIS_REST_URL,
-  UPSTASH_REDIS_REST_TOKEN: process.env.UPSTASH_REDIS_REST_TOKEN,
-  NEXT_PUBLIC_CLERK_FRONTEND_API: process.env.NEXT_PUBLIC_CLERK_FRONTEND_API,
+  KV_REST_API_URL: process.env.KV_REST_API_URL,
+  KV_REST_API_TOKEN: process.env.KV_REST_API_TOKEN,
 };
 
 // Export the config without Sentry
diff --git a/next.config.js.backup b/next.config.js.backup
new file mode 100644
index 00000000..e0d2cbc3
--- /dev/null
+++ b/next.config.js.backup
@@ -0,0 +1,210 @@
+// This file sets up the Next.js configuration with Sentry integration
+const { withSentryConfig } = require('@sentry/nextjs');
+
+/** @type {import('next').NextConfig} */
+const nextConfig = {
+  productionBrowserSourceMaps: true,
+  reactStrictMode: true,
+  // Add assetPrefix to ensure static assets are loaded from the correct port
+  assetPrefix: process.env.NODE_ENV === 'development' ? '' : undefined,
+  experimental: {
+    serverActions: {
+      allowedOrigins: [
+        'localhost:3000',
+        'localhost:3001',
+        'localhost:3002',
+        'localhost:3003',
+        'localhost:3004',
+        'localhost:3005',
+        'localhost:3006',
+        'localhost:3007',
+        'localhost:3008',
+        'localhost:3009',
+        'localhost:3010',
+      ],
+    },
+    // Enable optimizeCss for production builds
+    optimizeCss: true,
+    // Enable scroll restoration
+    scrollRestoration: true,
+    // Enable memory optimization
+    optimizePackageImports: [
+      'framer-motion',
+      'lucide-react',
+      'react-dom',
+      '@clerk/nextjs',
+      'swr',
+      'zod',
+      'class-variance-authority',
+      'tailwind-merge',
+    ],
+  },
+  typescript: {
+    // Ignore type errors during build (we'll handle them separately)
+    ignoreBuildErrors: false,
+  },
+  webpack: (config, { dev, isServer }) => {
+    // Resolve module not found issues
+    config.resolve.fallback = {
+      fs: false,
+      net: false,
+      tls: false,
+      dns: false,
+    };
+
+    // Optimize source maps for production
+    if (!dev) {
+      config.devtool = 'source-map';
+      
+      // Optimize source maps
+      if (config.optimization) {
+        // Ensure we have the optimization object
+        if (!config.optimization.minimizer) {
+          config.optimization.minimizer = [];
+        }
+        
+        // Configure source map generation for production
+        config.optimization.minimize = true;
+      }
+    }
+
+    // Optimize bundle size
+    if (!dev && !isServer) {
+      // Analyze bundle size in production builds
+      if (process.env.ANALYZE === 'true') {
+        const { BundleAnalyzerPlugin } = require('webpack-bundle-analyzer');
+        config.plugins.push(
+          new BundleAnalyzerPlugin({
+            analyzerMode: 'server',
+            analyzerPort: 8888,
+            openAnalyzer: true,
+          })
+        );
+      }
+    }
+
+    return config;
+  },
+  images: {
+    remotePatterns: [
+      {
+        protocol: 'https',
+        hostname: '**',
+      },
+    ],
+  },
+  // Configure headers for better security and caching
+  headers() {
+    return [
+      {
+        source: '/(.*)',
+        headers: [
+          {
+            key: 'X-Content-Type-Options',
+            value: 'nosniff',
+          },
+          {
+            key: 'X-Frame-Options',
+            value: 'DENY',
+          },
+          {
+            key: 'X-XSS-Protection',
+            value: '1; mode=block',
+          },
+          {
+            key: 'Referrer-Policy',
+            value: 'strict-origin-when-cross-origin',
+          },
+          {
+            key: 'Permissions-Policy',
+            value:
+              'camera=(), microphone=(), geolocation=(), interest-cohort=()',
+          },
+        ],
+      },
+      {
+        source: '/api/(.*)',
+        headers: [
+          { key: 'Access-Control-Allow-Credentials', value: 'true' },
+          { key: 'Access-Control-Allow-Origin', value: '*' },
+          {
+            key: 'Access-Control-Allow-Methods',
+            value: 'GET,OPTIONS,PATCH,DELETE,POST,PUT',
+          },
+          {
+            key: 'Access-Control-Allow-Headers',
+            value:
+              'X-CSRF-Token, X-Requested-With, Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, X-Api-Version',
+          },
+        ],
+      },
+      {
+        source: '/fonts/(.*)',
+        headers: [
+          {
+            key: 'Cache-Control',
+            value: 'public, max-age=31536000, immutable',
+          },
+        ],
+      },
+      {
+        source: '/images/(.*)',
+        headers: [
+          {
+            key: 'Cache-Control',
+            value: 'public, max-age=86400, stale-while-revalidate=31536000',
+          },
+        ],
+      },
+    ];
+  },
+};
+
+// For all available options, see:
+// https://github.com/getsentry/sentry-webpack-plugin#options
+const sentryWebpackPluginOptions = {
+  // Additional config options for the Sentry webpack plugin. Keep in mind that
+  // the following options are set automatically, and overriding them is not
+  // recommended:
+  //   release, url, authToken, configFile, stripPrefix,
+  //   urlPrefix, include, ignore
+
+  // Sentry organization and project
+  org: 'davini',
+  project: 'javascript-nextjs',
+
+  // Only print logs for uploading source maps in CI
+  silent: !process.env.CI,
+
+  // Upload a larger set of source maps for prettier stack traces (increases build time)
+  widenClientFileUpload: true,
+
+  // Automatically annotate React components to show their full name in breadcrumbs and session replay
+  reactComponentAnnotation: {
+    enabled: true,
+  },
+
+  // Route browser requests to Sentry through a Next.js rewrite to circumvent ad-blockers.
+  tunnelRoute: '/monitoring',
+
+  // Automatically tree-shake Sentry logger statements to reduce bundle size
+  disableLogger: true,
+
+  // Enables automatic instrumentation of Vercel Cron Monitors
+  automaticVercelMonitors: true,
+  
+  // Enhanced source map handling
+  sourcemaps: {
+    assets: './**/*.map',
+    filesToDeleteAfterUpload: './**/*.map',
+  },
+  
+  // Set to true to validate the upload of source maps
+  validate: true,
+  
+  // Set to true to enable debug mode
+  debug: false,
+};
+
+// Make sure adding Sentry options is the last code to run before exporting
+module.exports = withSentryConfig(nextConfig, sentryWebpackPluginOptions);
diff --git a/package-lock.json b/package-lock.json
index 68fe520c..e1745ea7 100644
--- a/package-lock.json
+++ b/package-lock.json
@@ -13,13 +13,6 @@
         "@clerk/nextjs": "^6.12.2",
         "@emotion/is-prop-valid": "^1.3.1",
         "@google/generative-ai": "^0.23.0",
-        "@opentelemetry/api": "^1.9.0",
-        "@opentelemetry/exporter-jaeger": "^1.30.1",
-        "@opentelemetry/instrumentation": "^0.57.2",
-        "@opentelemetry/resources": "^1.30.1",
-        "@opentelemetry/sdk-node": "^0.57.2",
-        "@opentelemetry/sdk-trace-node": "^1.30.1",
-        "@opentelemetry/semantic-conventions": "^1.30.0",
         "@radix-ui/react-slot": "^1.1.2",
         "@supabase/ssr": "^0.5.2",
         "@supabase/supabase-js": "^2.49.1",
@@ -33,6 +26,7 @@
         "clsx": "^2.1.1",
         "cookie": "^1.0.2",
         "critters": "^0.0.23",
+        "dotenv": "^16.0.3",
         "framer-motion": "^11.18.2",
         "is-arguments": "^1.2.0",
         "is-generator-function": "^1.1.0",
@@ -41,8 +35,6 @@
         "next": "^15.1.7",
         "openai": "^4.29.2",
         "opossum": "^8.4.0",
-        "pino": "^9.6.0",
-        "pino-pretty": "^13.0.0",
         "playwright": "^1.50.1",
         "react": "^18.2.0",
         "react-dom": "^18.2.0",
@@ -59,12 +51,11 @@
       "devDependencies": {
         "@eslint/eslintrc": "^3.2.0",
         "@eslint/js": "^9.0.0",
-        "@rollup/rollup-win32-x64-msvc": "^4.34.9",
         "@svgr/webpack": "^8.1.0",
         "@testing-library/jest-dom": "^6.6.3",
         "@testing-library/react": "^16.2.0",
         "@types/jest": "^29.5.14",
-        "@types/node": "^22.13.8",
+        "@types/node": "22.13.8",
         "@types/opossum": "^8.1.8",
         "@types/react": "19.0.10",
         "@typescript-eslint/eslint-plugin": "^7.1.1",
@@ -75,7 +66,6 @@
         "compression-webpack-plugin": "^11.1.0",
         "cross-env": "^7.0.3",
         "cursor-tools": "latest",
-        "dotenv": "^16.4.7",
         "eslint": "^8.57.0",
         "eslint-config-next": "^15.1.7",
         "eslint-config-prettier": "^9.1.0",
@@ -93,8 +83,6 @@
         "prettier": "^3.2.5",
         "rimraf": "^6.0.1",
         "tailwindcss": "^3.4.17",
-        "ts-node": "^10.9.2",
-        "tsconfig-paths": "^4.2.0",
         "typescript": "5.8.2",
         "url-loader": "^4.1.1",
         "vitest": "^3.0.7",
@@ -287,6 +275,16 @@
         "url": "https://opencollective.com/babel"
       }
     },
+    "node_modules/@babel/core/node_modules/semver": {
+      "version": "6.3.1",
+      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
+      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
+      "dev": true,
+      "license": "ISC",
+      "bin": {
+        "semver": "bin/semver.js"
+      }
+    },
     "node_modules/@babel/generator": {
       "version": "7.26.9",
       "resolved": "https://registry.npmjs.org/@babel/generator/-/generator-7.26.9.tgz",
@@ -334,6 +332,16 @@
         "node": ">=6.9.0"
       }
     },
+    "node_modules/@babel/helper-compilation-targets/node_modules/semver": {
+      "version": "6.3.1",
+      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
+      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
+      "dev": true,
+      "license": "ISC",
+      "bin": {
+        "semver": "bin/semver.js"
+      }
+    },
     "node_modules/@babel/helper-create-class-features-plugin": {
       "version": "7.26.9",
       "resolved": "https://registry.npmjs.org/@babel/helper-create-class-features-plugin/-/helper-create-class-features-plugin-7.26.9.tgz",
@@ -356,6 +364,16 @@
         "@babel/core": "^7.0.0"
       }
     },
+    "node_modules/@babel/helper-create-class-features-plugin/node_modules/semver": {
+      "version": "6.3.1",
+      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
+      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
+      "dev": true,
+      "license": "ISC",
+      "bin": {
+        "semver": "bin/semver.js"
+      }
+    },
     "node_modules/@babel/helper-create-regexp-features-plugin": {
       "version": "7.26.3",
       "resolved": "https://registry.npmjs.org/@babel/helper-create-regexp-features-plugin/-/helper-create-regexp-features-plugin-7.26.3.tgz",
@@ -374,6 +392,16 @@
         "@babel/core": "^7.0.0"
       }
     },
+    "node_modules/@babel/helper-create-regexp-features-plugin/node_modules/semver": {
+      "version": "6.3.1",
+      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
+      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
+      "dev": true,
+      "license": "ISC",
+      "bin": {
+        "semver": "bin/semver.js"
+      }
+    },
     "node_modules/@babel/helper-define-polyfill-provider": {
       "version": "0.6.3",
       "resolved": "https://registry.npmjs.org/@babel/helper-define-polyfill-provider/-/helper-define-polyfill-provider-0.6.3.tgz",
@@ -2022,6 +2050,16 @@
         "@babel/core": "^7.0.0-0"
       }
     },
+    "node_modules/@babel/preset-env/node_modules/semver": {
+      "version": "6.3.1",
+      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
+      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
+      "dev": true,
+      "license": "ISC",
+      "bin": {
+        "semver": "bin/semver.js"
+      }
+    },
     "node_modules/@babel/preset-modules": {
       "version": "0.1.6-no-external-plugins",
       "resolved": "https://registry.npmjs.org/@babel/preset-modules/-/preset-modules-0.1.6-no-external-plugins.tgz",
@@ -2254,9 +2292,9 @@
       }
     },
     "node_modules/@clerk/backend": {
-      "version": "1.25.1",
-      "resolved": "https://registry.npmjs.org/@clerk/backend/-/backend-1.25.1.tgz",
-      "integrity": "sha512-VTOg+LGqxY+ydPHxi+hrC+Uc9EIbieiku/+ZxJMhFSzYNhtkwC/UBws4JnFNoz2aLa28Pazf0WIBxwrqZgg69Q==",
+      "version": "1.25.0",
+      "resolved": "https://registry.npmjs.org/@clerk/backend/-/backend-1.25.0.tgz",
+      "integrity": "sha512-ga+SZsuqvHN+9zu+m838QSOd9NVMf/jhSzCgyC1zt4PUnbL/I5Q3dUxz+nR5ELo4Icc+Z9Ad0DdAE9r3OtbIbw==",
       "license": "MIT",
       "dependencies": {
         "@clerk/shared": "^3.0.0",
@@ -2288,12 +2326,12 @@
       }
     },
     "node_modules/@clerk/nextjs": {
-      "version": "6.12.4",
-      "resolved": "https://registry.npmjs.org/@clerk/nextjs/-/nextjs-6.12.4.tgz",
-      "integrity": "sha512-jBfG0JKXgqHlPUuC5KN8s+bHCaX9y3r4UpMHy707y5PBWidrQHIxu9lkEGBnayxXDE/BsKDoKWs/knqTxR3AjA==",
+      "version": "6.12.3",
+      "resolved": "https://registry.npmjs.org/@clerk/nextjs/-/nextjs-6.12.3.tgz",
+      "integrity": "sha512-ZNMruzrDZP9KQLHM9VPNEKv/V+nqo0808iQz+PM4ML3I8x6AMNq5tMKHD7i8UtDK5KKTMAGUQz4ziRMmbjXz4w==",
       "license": "MIT",
       "dependencies": {
-        "@clerk/backend": "^1.25.1",
+        "@clerk/backend": "^1.25.0",
         "@clerk/clerk-react": "^5.24.1",
         "@clerk/shared": "^3.0.0",
         "@clerk/types": "^4.47.0",
@@ -2352,30 +2390,6 @@
         "node": ">=18.17.0"
       }
     },
-    "node_modules/@cspotcode/source-map-support": {
-      "version": "0.8.1",
-      "resolved": "https://registry.npmjs.org/@cspotcode/source-map-support/-/source-map-support-0.8.1.tgz",
-      "integrity": "sha512-IchNf6dN4tHoMFIn/7OE8LWZ19Y6q/67Bmf6vnGREv8RSbBVb9LPJxEcnwrcwX6ixSvaiGoomAUvu4YSxXrVgw==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "@jridgewell/trace-mapping": "0.3.9"
-      },
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "node_modules/@cspotcode/source-map-support/node_modules/@jridgewell/trace-mapping": {
-      "version": "0.3.9",
-      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.9.tgz",
-      "integrity": "sha512-3Belt6tdc8bPgAtbcmdtNJlirVoTmEb5e2gC94PnkwEW9jI6CAHUeoG85tjWP5WquqfavoMtMwiG4P926ZKKuQ==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "@jridgewell/resolve-uri": "^3.0.3",
-        "@jridgewell/sourcemap-codec": "^1.4.10"
-      }
-    },
     "node_modules/@csstools/color-helpers": {
       "version": "5.0.2",
       "resolved": "https://registry.npmjs.org/@csstools/color-helpers/-/color-helpers-5.0.2.tgz",
@@ -3036,37 +3050,6 @@
         "node": ">=18.0.0"
       }
     },
-    "node_modules/@grpc/grpc-js": {
-      "version": "1.12.6",
-      "resolved": "https://registry.npmjs.org/@grpc/grpc-js/-/grpc-js-1.12.6.tgz",
-      "integrity": "sha512-JXUj6PI0oqqzTGvKtzOkxtpsyPRNsrmhh41TtIz/zEB6J+AUiZZ0dxWzcMwO9Ns5rmSPuMdghlTbUuqIM48d3Q==",
-      "license": "Apache-2.0",
-      "dependencies": {
-        "@grpc/proto-loader": "^0.7.13",
-        "@js-sdsl/ordered-map": "^4.4.2"
-      },
-      "engines": {
-        "node": ">=12.10.0"
-      }
-    },
-    "node_modules/@grpc/proto-loader": {
-      "version": "0.7.13",
-      "resolved": "https://registry.npmjs.org/@grpc/proto-loader/-/proto-loader-0.7.13.tgz",
-      "integrity": "sha512-AiXO/bfe9bmxBjxxtYxFAXGZvMaN5s8kO+jBHAJCON8rJoB5YS/D6X7ZNc6XQkuHNmyl4CYaMI1fJ/Gn27RGGw==",
-      "license": "Apache-2.0",
-      "dependencies": {
-        "lodash.camelcase": "^4.3.0",
-        "long": "^5.0.0",
-        "protobufjs": "^7.2.5",
-        "yargs": "^17.7.2"
-      },
-      "bin": {
-        "proto-loader-gen-types": "build/bin/proto-loader-gen-types.js"
-      },
-      "engines": {
-        "node": ">=6"
-      }
-    },
     "node_modules/@humanwhocodes/config-array": {
       "version": "0.13.0",
       "resolved": "https://registry.npmjs.org/@humanwhocodes/config-array/-/config-array-0.13.0.tgz",
@@ -3997,6 +3980,28 @@
         "url": "https://github.com/chalk/chalk?sponsor=1"
       }
     },
+    "node_modules/@jest/reporters/node_modules/glob": {
+      "version": "7.2.3",
+      "resolved": "https://registry.npmjs.org/glob/-/glob-7.2.3.tgz",
+      "integrity": "sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==",
+      "deprecated": "Glob versions prior to v9 are no longer supported",
+      "dev": true,
+      "license": "ISC",
+      "dependencies": {
+        "fs.realpath": "^1.0.0",
+        "inflight": "^1.0.4",
+        "inherits": "2",
+        "minimatch": "^3.1.1",
+        "once": "^1.3.0",
+        "path-is-absolute": "^1.0.0"
+      },
+      "engines": {
+        "node": "*"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
+      }
+    },
     "node_modules/@jest/schemas": {
       "version": "29.6.3",
       "resolved": "https://registry.npmjs.org/@jest/schemas/-/schemas-29.6.3.tgz",
@@ -4233,16 +4238,6 @@
         "@jridgewell/sourcemap-codec": "^1.4.14"
       }
     },
-    "node_modules/@js-sdsl/ordered-map": {
-      "version": "4.4.2",
-      "resolved": "https://registry.npmjs.org/@js-sdsl/ordered-map/-/ordered-map-4.4.2.tgz",
-      "integrity": "sha512-iUKgm52T8HOE/makSxjqoWhe95ZJA1/G1sYsGev2JDKUSS14KAgg1LHb+Ba+IPow0xflbnSkOsZcO08C7w1gYw==",
-      "license": "MIT",
-      "funding": {
-        "type": "opencollective",
-        "url": "https://opencollective.com/js-sdsl"
-      }
-    },
     "node_modules/@modelcontextprotocol/sdk": {
       "version": "1.6.1",
       "resolved": "https://registry.npmjs.org/@modelcontextprotocol/sdk/-/sdk-1.6.1.tgz",
@@ -4408,22 +4403,47 @@
       "license": "MIT"
     },
     "node_modules/@modelcontextprotocol/sdk/node_modules/finalhandler": {
-      "version": "2.1.0",
-      "resolved": "https://registry.npmjs.org/finalhandler/-/finalhandler-2.1.0.tgz",
-      "integrity": "sha512-/t88Ty3d5JWQbWYgaOGCCYfXRwV1+be02WqYYlL6h0lEiUAMPM8o8qKGO01YIkOHzka2up08wvgYD0mDiI+q3Q==",
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/finalhandler/-/finalhandler-2.0.0.tgz",
+      "integrity": "sha512-MX6Zo2adDViYh+GcxxB1dpO43eypOGUOL12rLCOTMQv/DfIbpSJUy4oQIIZhVZkH9e+bZWKMon0XHFEju16tkQ==",
       "license": "MIT",
       "dependencies": {
-        "debug": "^4.4.0",
-        "encodeurl": "^2.0.0",
-        "escape-html": "^1.0.3",
-        "on-finished": "^2.4.1",
-        "parseurl": "^1.3.3",
-        "statuses": "^2.0.1"
+        "debug": "2.6.9",
+        "encodeurl": "~1.0.2",
+        "escape-html": "~1.0.3",
+        "on-finished": "2.4.1",
+        "parseurl": "~1.3.3",
+        "statuses": "2.0.1",
+        "unpipe": "~1.0.0"
       },
       "engines": {
         "node": ">= 0.8"
       }
     },
+    "node_modules/@modelcontextprotocol/sdk/node_modules/finalhandler/node_modules/debug": {
+      "version": "2.6.9",
+      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
+      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
+      "license": "MIT",
+      "dependencies": {
+        "ms": "2.0.0"
+      }
+    },
+    "node_modules/@modelcontextprotocol/sdk/node_modules/finalhandler/node_modules/encodeurl": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-1.0.2.tgz",
+      "integrity": "sha512-TPJXq8JqFaVYm2CWmPvnP2Iyo4ZSM7/QKcSmuMLDObfpH5fi7RUGmd/rTDf+rut/saiDiQEeVTNgAmJEdAOx0w==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.8"
+      }
+    },
+    "node_modules/@modelcontextprotocol/sdk/node_modules/finalhandler/node_modules/ms": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
+      "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==",
+      "license": "MIT"
+    },
     "node_modules/@modelcontextprotocol/sdk/node_modules/fresh": {
       "version": "2.0.0",
       "resolved": "https://registry.npmjs.org/fresh/-/fresh-2.0.0.tgz",
@@ -5080,787 +5100,91 @@
       "resolved": "https://registry.npmjs.org/@opentelemetry/api/-/api-1.9.0.tgz",
       "integrity": "sha512-3giAOQvZiH5F9bMlMiv8+GSPMeqg0dbaeo58/0SlA9sxSqZhnUtxzX9/2FzyhS9sWQf5S0GJE0AKBrFqjpeYcg==",
       "license": "Apache-2.0",
+      "optional": true,
+      "peer": true,
       "engines": {
         "node": ">=8.0.0"
       }
     },
-    "node_modules/@opentelemetry/api-logs": {
-      "version": "0.57.2",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/api-logs/-/api-logs-0.57.2.tgz",
-      "integrity": "sha512-uIX52NnTM0iBh84MShlpouI7UKqkZ7MrUszTmaypHBu4r7NofznSnQRfJ+uUeDtQDj6w8eFGg5KBLDAwAPz1+A==",
-      "license": "Apache-2.0",
-      "dependencies": {
-        "@opentelemetry/api": "^1.3.0"
-      },
-      "engines": {
-        "node": ">=14"
-      }
-    },
-    "node_modules/@opentelemetry/context-async-hooks": {
-      "version": "1.30.1",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/context-async-hooks/-/context-async-hooks-1.30.1.tgz",
-      "integrity": "sha512-s5vvxXPVdjqS3kTLKMeBMvop9hbWkwzBpu+mUO2M7sZtlkyDJGwFe33wRKnbaYDo8ExRVBIIdwIGrqpxHuKttA==",
-      "license": "Apache-2.0",
+    "node_modules/@pkgjs/parseargs": {
+      "version": "0.11.0",
+      "resolved": "https://registry.npmjs.org/@pkgjs/parseargs/-/parseargs-0.11.0.tgz",
+      "integrity": "sha512-+1VkjdD0QBLPodGrJUeqarH8VAIvQODIbwh9XpP5Syisf7YoQgsJKPNFoqqLQlu+VQ/tVSshMR6loPMn8U+dPg==",
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
       "engines": {
         "node": ">=14"
-      },
-      "peerDependencies": {
-        "@opentelemetry/api": ">=1.0.0 <1.10.0"
       }
     },
-    "node_modules/@opentelemetry/core": {
-      "version": "1.30.1",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/core/-/core-1.30.1.tgz",
-      "integrity": "sha512-OOCM2C/QIURhJMuKaekP3TRBxBKxG/TWWA0TL2J6nXUtDnuCtccy49LUJF8xPFXMX+0LMcxFpCo8M9cGY1W6rQ==",
-      "license": "Apache-2.0",
-      "dependencies": {
-        "@opentelemetry/semantic-conventions": "1.28.0"
-      },
+    "node_modules/@pkgr/core": {
+      "version": "0.1.1",
+      "resolved": "https://registry.npmjs.org/@pkgr/core/-/core-0.1.1.tgz",
+      "integrity": "sha512-cq8o4cWH0ibXh9VGi5P20Tu9XF/0fFXl9EUinr9QfTM7a7p0oTA4iJRCQWppXR1Pg8dSM0UCItCkPwsk9qWWYA==",
+      "dev": true,
+      "license": "MIT",
       "engines": {
-        "node": ">=14"
+        "node": "^12.20.0 || ^14.18.0 || >=16.0.0"
       },
-      "peerDependencies": {
-        "@opentelemetry/api": ">=1.0.0 <1.10.0"
-      }
-    },
-    "node_modules/@opentelemetry/core/node_modules/@opentelemetry/semantic-conventions": {
-      "version": "1.28.0",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/semantic-conventions/-/semantic-conventions-1.28.0.tgz",
-      "integrity": "sha512-lp4qAiMTD4sNWW4DbKLBkfiMZ4jbAboJIGOQr5DvciMRI494OapieI9qiODpOt0XBr1LjIDy1xAGAnVs5supTA==",
-      "license": "Apache-2.0",
-      "engines": {
-        "node": ">=14"
+      "funding": {
+        "url": "https://opencollective.com/unts"
       }
     },
-    "node_modules/@opentelemetry/exporter-jaeger": {
-      "version": "1.30.1",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/exporter-jaeger/-/exporter-jaeger-1.30.1.tgz",
-      "integrity": "sha512-7Ki+x7cZ/PEQxp3UyB+CWkWBqLk22yRGQ4AWIGwZlEs6rpCOdWwIFOyQDO9DdeyWtTPTvO3An/7chPZcRHOgzQ==",
+    "node_modules/@playwright/test": {
+      "version": "1.50.1",
+      "resolved": "https://registry.npmjs.org/@playwright/test/-/test-1.50.1.tgz",
+      "integrity": "sha512-Jii3aBg+CEDpgnuDxEp/h7BimHcUTDlpEtce89xEumlJ5ef2hqepZ+PWp1DDpYC/VO9fmWVI1IlEaoI5fK9FXQ==",
+      "devOptional": true,
       "license": "Apache-2.0",
+      "peer": true,
       "dependencies": {
-        "@opentelemetry/core": "1.30.1",
-        "@opentelemetry/sdk-trace-base": "1.30.1",
-        "@opentelemetry/semantic-conventions": "1.28.0",
-        "jaeger-client": "^3.15.0"
+        "playwright": "1.50.1"
       },
-      "engines": {
-        "node": ">=14"
+      "bin": {
+        "playwright": "cli.js"
       },
-      "peerDependencies": {
-        "@opentelemetry/api": "^1.0.0"
-      }
-    },
-    "node_modules/@opentelemetry/exporter-jaeger/node_modules/@opentelemetry/semantic-conventions": {
-      "version": "1.28.0",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/semantic-conventions/-/semantic-conventions-1.28.0.tgz",
-      "integrity": "sha512-lp4qAiMTD4sNWW4DbKLBkfiMZ4jbAboJIGOQr5DvciMRI494OapieI9qiODpOt0XBr1LjIDy1xAGAnVs5supTA==",
-      "license": "Apache-2.0",
       "engines": {
-        "node": ">=14"
+        "node": ">=18"
       }
     },
-    "node_modules/@opentelemetry/exporter-logs-otlp-grpc": {
-      "version": "0.57.2",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/exporter-logs-otlp-grpc/-/exporter-logs-otlp-grpc-0.57.2.tgz",
-      "integrity": "sha512-eovEy10n3umjKJl2Ey6TLzikPE+W4cUQ4gCwgGP1RqzTGtgDra0WjIqdy29ohiUKfvmbiL3MndZww58xfIvyFw==",
-      "license": "Apache-2.0",
-      "dependencies": {
-        "@grpc/grpc-js": "^1.7.1",
-        "@opentelemetry/core": "1.30.1",
-        "@opentelemetry/otlp-exporter-base": "0.57.2",
-        "@opentelemetry/otlp-grpc-exporter-base": "0.57.2",
-        "@opentelemetry/otlp-transformer": "0.57.2",
-        "@opentelemetry/sdk-logs": "0.57.2"
-      },
-      "engines": {
-        "node": ">=14"
-      },
-      "peerDependencies": {
-        "@opentelemetry/api": "^1.3.0"
-      }
+    "node_modules/@polka/url": {
+      "version": "1.0.0-next.28",
+      "resolved": "https://registry.npmjs.org/@polka/url/-/url-1.0.0-next.28.tgz",
+      "integrity": "sha512-8LduaNlMZGwdZ6qWrKlfa+2M4gahzFkprZiAt2TF8uS0qQgBizKXpXURqvTJ4WtmupWxaLqjRb2UCTe72mu+Aw==",
+      "dev": true,
+      "license": "MIT"
     },
-    "node_modules/@opentelemetry/exporter-logs-otlp-http": {
-      "version": "0.57.2",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/exporter-logs-otlp-http/-/exporter-logs-otlp-http-0.57.2.tgz",
-      "integrity": "sha512-0rygmvLcehBRp56NQVLSleJ5ITTduq/QfU7obOkyWgPpFHulwpw2LYTqNIz5TczKZuy5YY+5D3SDnXZL1tXImg==",
-      "license": "Apache-2.0",
-      "dependencies": {
-        "@opentelemetry/api-logs": "0.57.2",
-        "@opentelemetry/core": "1.30.1",
-        "@opentelemetry/otlp-exporter-base": "0.57.2",
-        "@opentelemetry/otlp-transformer": "0.57.2",
-        "@opentelemetry/sdk-logs": "0.57.2"
-      },
-      "engines": {
-        "node": ">=14"
-      },
+    "node_modules/@radix-ui/react-compose-refs": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/@radix-ui/react-compose-refs/-/react-compose-refs-1.1.1.tgz",
+      "integrity": "sha512-Y9VzoRDSJtgFMUCoiZBDVo084VQ5hfpXxVE+NgkdNsjiDBByiImMZKKhxMwCbdHvhlENG6a833CbFkOQvTricw==",
+      "license": "MIT",
       "peerDependencies": {
-        "@opentelemetry/api": "^1.3.0"
-      }
-    },
-    "node_modules/@opentelemetry/exporter-logs-otlp-proto": {
-      "version": "0.57.2",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/exporter-logs-otlp-proto/-/exporter-logs-otlp-proto-0.57.2.tgz",
-      "integrity": "sha512-ta0ithCin0F8lu9eOf4lEz9YAScecezCHkMMyDkvd9S7AnZNX5ikUmC5EQOQADU+oCcgo/qkQIaKcZvQ0TYKDw==",
-      "license": "Apache-2.0",
-      "dependencies": {
-        "@opentelemetry/api-logs": "0.57.2",
-        "@opentelemetry/core": "1.30.1",
-        "@opentelemetry/otlp-exporter-base": "0.57.2",
-        "@opentelemetry/otlp-transformer": "0.57.2",
-        "@opentelemetry/resources": "1.30.1",
-        "@opentelemetry/sdk-logs": "0.57.2",
-        "@opentelemetry/sdk-trace-base": "1.30.1"
-      },
-      "engines": {
-        "node": ">=14"
+        "@types/react": "*",
+        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
       },
-      "peerDependencies": {
-        "@opentelemetry/api": "^1.3.0"
+      "peerDependenciesMeta": {
+        "@types/react": {
+          "optional": true
+        }
       }
     },
-    "node_modules/@opentelemetry/exporter-metrics-otlp-grpc": {
-      "version": "0.57.2",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/exporter-metrics-otlp-grpc/-/exporter-metrics-otlp-grpc-0.57.2.tgz",
-      "integrity": "sha512-r70B8yKR41F0EC443b5CGB4rUaOMm99I5N75QQt6sHKxYDzSEc6gm48Diz1CI1biwa5tDPznpylTrywO/pT7qw==",
-      "license": "Apache-2.0",
+    "node_modules/@radix-ui/react-slot": {
+      "version": "1.1.2",
+      "resolved": "https://registry.npmjs.org/@radix-ui/react-slot/-/react-slot-1.1.2.tgz",
+      "integrity": "sha512-YAKxaiGsSQJ38VzKH86/BPRC4rh+b1Jpa+JneA5LRE7skmLPNAyeG8kPJj/oo4STLvlrs8vkf/iYyc3A5stYCQ==",
+      "license": "MIT",
       "dependencies": {
-        "@grpc/grpc-js": "^1.7.1",
-        "@opentelemetry/core": "1.30.1",
-        "@opentelemetry/exporter-metrics-otlp-http": "0.57.2",
-        "@opentelemetry/otlp-exporter-base": "0.57.2",
-        "@opentelemetry/otlp-grpc-exporter-base": "0.57.2",
-        "@opentelemetry/otlp-transformer": "0.57.2",
-        "@opentelemetry/resources": "1.30.1",
-        "@opentelemetry/sdk-metrics": "1.30.1"
-      },
-      "engines": {
-        "node": ">=14"
+        "@radix-ui/react-compose-refs": "1.1.1"
       },
       "peerDependencies": {
-        "@opentelemetry/api": "^1.3.0"
-      }
-    },
-    "node_modules/@opentelemetry/exporter-metrics-otlp-http": {
-      "version": "0.57.2",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/exporter-metrics-otlp-http/-/exporter-metrics-otlp-http-0.57.2.tgz",
-      "integrity": "sha512-ttb9+4iKw04IMubjm3t0EZsYRNWr3kg44uUuzfo9CaccYlOh8cDooe4QObDUkvx9d5qQUrbEckhrWKfJnKhemA==",
-      "license": "Apache-2.0",
-      "dependencies": {
-        "@opentelemetry/core": "1.30.1",
-        "@opentelemetry/otlp-exporter-base": "0.57.2",
-        "@opentelemetry/otlp-transformer": "0.57.2",
-        "@opentelemetry/resources": "1.30.1",
-        "@opentelemetry/sdk-metrics": "1.30.1"
-      },
-      "engines": {
-        "node": ">=14"
+        "@types/react": "*",
+        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
       },
-      "peerDependencies": {
-        "@opentelemetry/api": "^1.3.0"
-      }
-    },
-    "node_modules/@opentelemetry/exporter-metrics-otlp-proto": {
-      "version": "0.57.2",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/exporter-metrics-otlp-proto/-/exporter-metrics-otlp-proto-0.57.2.tgz",
-      "integrity": "sha512-HX068Q2eNs38uf7RIkNN9Hl4Ynl+3lP0++KELkXMCpsCbFO03+0XNNZ1SkwxPlP9jrhQahsMPMkzNXpq3fKsnw==",
-      "license": "Apache-2.0",
-      "dependencies": {
-        "@opentelemetry/core": "1.30.1",
-        "@opentelemetry/exporter-metrics-otlp-http": "0.57.2",
-        "@opentelemetry/otlp-exporter-base": "0.57.2",
-        "@opentelemetry/otlp-transformer": "0.57.2",
-        "@opentelemetry/resources": "1.30.1",
-        "@opentelemetry/sdk-metrics": "1.30.1"
-      },
-      "engines": {
-        "node": ">=14"
-      },
-      "peerDependencies": {
-        "@opentelemetry/api": "^1.3.0"
-      }
-    },
-    "node_modules/@opentelemetry/exporter-prometheus": {
-      "version": "0.57.2",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/exporter-prometheus/-/exporter-prometheus-0.57.2.tgz",
-      "integrity": "sha512-VqIqXnuxWMWE/1NatAGtB1PvsQipwxDcdG4RwA/umdBcW3/iOHp0uejvFHTRN2O78ZPged87ErJajyUBPUhlDQ==",
-      "license": "Apache-2.0",
-      "dependencies": {
-        "@opentelemetry/core": "1.30.1",
-        "@opentelemetry/resources": "1.30.1",
-        "@opentelemetry/sdk-metrics": "1.30.1"
-      },
-      "engines": {
-        "node": ">=14"
-      },
-      "peerDependencies": {
-        "@opentelemetry/api": "^1.3.0"
-      }
-    },
-    "node_modules/@opentelemetry/exporter-trace-otlp-grpc": {
-      "version": "0.57.2",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/exporter-trace-otlp-grpc/-/exporter-trace-otlp-grpc-0.57.2.tgz",
-      "integrity": "sha512-gHU1vA3JnHbNxEXg5iysqCWxN9j83d7/epTYBZflqQnTyCC4N7yZXn/dMM+bEmyhQPGjhCkNZLx4vZuChH1PYw==",
-      "license": "Apache-2.0",
-      "dependencies": {
-        "@grpc/grpc-js": "^1.7.1",
-        "@opentelemetry/core": "1.30.1",
-        "@opentelemetry/otlp-exporter-base": "0.57.2",
-        "@opentelemetry/otlp-grpc-exporter-base": "0.57.2",
-        "@opentelemetry/otlp-transformer": "0.57.2",
-        "@opentelemetry/resources": "1.30.1",
-        "@opentelemetry/sdk-trace-base": "1.30.1"
-      },
-      "engines": {
-        "node": ">=14"
-      },
-      "peerDependencies": {
-        "@opentelemetry/api": "^1.3.0"
-      }
-    },
-    "node_modules/@opentelemetry/exporter-trace-otlp-http": {
-      "version": "0.57.2",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/exporter-trace-otlp-http/-/exporter-trace-otlp-http-0.57.2.tgz",
-      "integrity": "sha512-sB/gkSYFu+0w2dVQ0PWY9fAMl172PKMZ/JrHkkW8dmjCL0CYkmXeE+ssqIL/yBUTPOvpLIpenX5T9RwXRBW/3g==",
-      "license": "Apache-2.0",
-      "dependencies": {
-        "@opentelemetry/core": "1.30.1",
-        "@opentelemetry/otlp-exporter-base": "0.57.2",
-        "@opentelemetry/otlp-transformer": "0.57.2",
-        "@opentelemetry/resources": "1.30.1",
-        "@opentelemetry/sdk-trace-base": "1.30.1"
-      },
-      "engines": {
-        "node": ">=14"
-      },
-      "peerDependencies": {
-        "@opentelemetry/api": "^1.3.0"
-      }
-    },
-    "node_modules/@opentelemetry/exporter-trace-otlp-proto": {
-      "version": "0.57.2",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/exporter-trace-otlp-proto/-/exporter-trace-otlp-proto-0.57.2.tgz",
-      "integrity": "sha512-awDdNRMIwDvUtoRYxRhja5QYH6+McBLtoz1q9BeEsskhZcrGmH/V1fWpGx8n+Rc+542e8pJA6y+aullbIzQmlw==",
-      "license": "Apache-2.0",
-      "dependencies": {
-        "@opentelemetry/core": "1.30.1",
-        "@opentelemetry/otlp-exporter-base": "0.57.2",
-        "@opentelemetry/otlp-transformer": "0.57.2",
-        "@opentelemetry/resources": "1.30.1",
-        "@opentelemetry/sdk-trace-base": "1.30.1"
-      },
-      "engines": {
-        "node": ">=14"
-      },
-      "peerDependencies": {
-        "@opentelemetry/api": "^1.3.0"
-      }
-    },
-    "node_modules/@opentelemetry/exporter-zipkin": {
-      "version": "1.30.1",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/exporter-zipkin/-/exporter-zipkin-1.30.1.tgz",
-      "integrity": "sha512-6S2QIMJahIquvFaaxmcwpvQQRD/YFaMTNoIxrfPIPOeITN+a8lfEcPDxNxn8JDAaxkg+4EnXhz8upVDYenoQjA==",
-      "license": "Apache-2.0",
-      "dependencies": {
-        "@opentelemetry/core": "1.30.1",
-        "@opentelemetry/resources": "1.30.1",
-        "@opentelemetry/sdk-trace-base": "1.30.1",
-        "@opentelemetry/semantic-conventions": "1.28.0"
-      },
-      "engines": {
-        "node": ">=14"
-      },
-      "peerDependencies": {
-        "@opentelemetry/api": "^1.0.0"
-      }
-    },
-    "node_modules/@opentelemetry/exporter-zipkin/node_modules/@opentelemetry/semantic-conventions": {
-      "version": "1.28.0",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/semantic-conventions/-/semantic-conventions-1.28.0.tgz",
-      "integrity": "sha512-lp4qAiMTD4sNWW4DbKLBkfiMZ4jbAboJIGOQr5DvciMRI494OapieI9qiODpOt0XBr1LjIDy1xAGAnVs5supTA==",
-      "license": "Apache-2.0",
-      "engines": {
-        "node": ">=14"
-      }
-    },
-    "node_modules/@opentelemetry/instrumentation": {
-      "version": "0.57.2",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation/-/instrumentation-0.57.2.tgz",
-      "integrity": "sha512-BdBGhQBh8IjZ2oIIX6F2/Q3LKm/FDDKi6ccYKcBTeilh6SNdNKveDOLk73BkSJjQLJk6qe4Yh+hHw1UPhCDdrg==",
-      "license": "Apache-2.0",
-      "dependencies": {
-        "@opentelemetry/api-logs": "0.57.2",
-        "@types/shimmer": "^1.2.0",
-        "import-in-the-middle": "^1.8.1",
-        "require-in-the-middle": "^7.1.1",
-        "semver": "^7.5.2",
-        "shimmer": "^1.2.1"
-      },
-      "engines": {
-        "node": ">=14"
-      },
-      "peerDependencies": {
-        "@opentelemetry/api": "^1.3.0"
-      }
-    },
-    "node_modules/@opentelemetry/instrumentation/node_modules/semver": {
-      "version": "7.7.1",
-      "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.1.tgz",
-      "integrity": "sha512-hlq8tAfn0m/61p4BVRcPzIGr6LKiMwo4VM6dGi6pt4qcRkmNzTcWq6eCEjEh+qXjkMDvPlOFFSGwQjoEa6gyMA==",
-      "license": "ISC",
-      "bin": {
-        "semver": "bin/semver.js"
-      },
-      "engines": {
-        "node": ">=10"
-      }
-    },
-    "node_modules/@opentelemetry/otlp-exporter-base": {
-      "version": "0.57.2",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/otlp-exporter-base/-/otlp-exporter-base-0.57.2.tgz",
-      "integrity": "sha512-XdxEzL23Urhidyebg5E6jZoaiW5ygP/mRjxLHixogbqwDy2Faduzb5N0o/Oi+XTIJu+iyxXdVORjXax+Qgfxag==",
-      "license": "Apache-2.0",
-      "dependencies": {
-        "@opentelemetry/core": "1.30.1",
-        "@opentelemetry/otlp-transformer": "0.57.2"
-      },
-      "engines": {
-        "node": ">=14"
-      },
-      "peerDependencies": {
-        "@opentelemetry/api": "^1.3.0"
-      }
-    },
-    "node_modules/@opentelemetry/otlp-grpc-exporter-base": {
-      "version": "0.57.2",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/otlp-grpc-exporter-base/-/otlp-grpc-exporter-base-0.57.2.tgz",
-      "integrity": "sha512-USn173KTWy0saqqRB5yU9xUZ2xdgb1Rdu5IosJnm9aV4hMTuFFRTUsQxbgc24QxpCHeoKzzCSnS/JzdV0oM2iQ==",
-      "license": "Apache-2.0",
-      "dependencies": {
-        "@grpc/grpc-js": "^1.7.1",
-        "@opentelemetry/core": "1.30.1",
-        "@opentelemetry/otlp-exporter-base": "0.57.2",
-        "@opentelemetry/otlp-transformer": "0.57.2"
-      },
-      "engines": {
-        "node": ">=14"
-      },
-      "peerDependencies": {
-        "@opentelemetry/api": "^1.3.0"
-      }
-    },
-    "node_modules/@opentelemetry/otlp-transformer": {
-      "version": "0.57.2",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/otlp-transformer/-/otlp-transformer-0.57.2.tgz",
-      "integrity": "sha512-48IIRj49gbQVK52jYsw70+Jv+JbahT8BqT2Th7C4H7RCM9d0gZ5sgNPoMpWldmfjvIsSgiGJtjfk9MeZvjhoig==",
-      "license": "Apache-2.0",
-      "dependencies": {
-        "@opentelemetry/api-logs": "0.57.2",
-        "@opentelemetry/core": "1.30.1",
-        "@opentelemetry/resources": "1.30.1",
-        "@opentelemetry/sdk-logs": "0.57.2",
-        "@opentelemetry/sdk-metrics": "1.30.1",
-        "@opentelemetry/sdk-trace-base": "1.30.1",
-        "protobufjs": "^7.3.0"
-      },
-      "engines": {
-        "node": ">=14"
-      },
-      "peerDependencies": {
-        "@opentelemetry/api": "^1.3.0"
-      }
-    },
-    "node_modules/@opentelemetry/propagator-b3": {
-      "version": "1.30.1",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/propagator-b3/-/propagator-b3-1.30.1.tgz",
-      "integrity": "sha512-oATwWWDIJzybAZ4pO76ATN5N6FFbOA1otibAVlS8v90B4S1wClnhRUk7K+2CHAwN1JKYuj4jh/lpCEG5BAqFuQ==",
-      "license": "Apache-2.0",
-      "dependencies": {
-        "@opentelemetry/core": "1.30.1"
-      },
-      "engines": {
-        "node": ">=14"
-      },
-      "peerDependencies": {
-        "@opentelemetry/api": ">=1.0.0 <1.10.0"
-      }
-    },
-    "node_modules/@opentelemetry/propagator-jaeger": {
-      "version": "1.30.1",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/propagator-jaeger/-/propagator-jaeger-1.30.1.tgz",
-      "integrity": "sha512-Pj/BfnYEKIOImirH76M4hDaBSx6HyZ2CXUqk+Kj02m6BB80c/yo4BdWkn/1gDFfU+YPY+bPR2U0DKBfdxCKwmg==",
-      "license": "Apache-2.0",
-      "dependencies": {
-        "@opentelemetry/core": "1.30.1"
-      },
-      "engines": {
-        "node": ">=14"
-      },
-      "peerDependencies": {
-        "@opentelemetry/api": ">=1.0.0 <1.10.0"
-      }
-    },
-    "node_modules/@opentelemetry/resources": {
-      "version": "1.30.1",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/resources/-/resources-1.30.1.tgz",
-      "integrity": "sha512-5UxZqiAgLYGFjS4s9qm5mBVo433u+dSPUFWVWXmLAD4wB65oMCoXaJP1KJa9DIYYMeHu3z4BZcStG3LC593cWA==",
-      "license": "Apache-2.0",
-      "dependencies": {
-        "@opentelemetry/core": "1.30.1",
-        "@opentelemetry/semantic-conventions": "1.28.0"
-      },
-      "engines": {
-        "node": ">=14"
-      },
-      "peerDependencies": {
-        "@opentelemetry/api": ">=1.0.0 <1.10.0"
-      }
-    },
-    "node_modules/@opentelemetry/resources/node_modules/@opentelemetry/semantic-conventions": {
-      "version": "1.28.0",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/semantic-conventions/-/semantic-conventions-1.28.0.tgz",
-      "integrity": "sha512-lp4qAiMTD4sNWW4DbKLBkfiMZ4jbAboJIGOQr5DvciMRI494OapieI9qiODpOt0XBr1LjIDy1xAGAnVs5supTA==",
-      "license": "Apache-2.0",
-      "engines": {
-        "node": ">=14"
-      }
-    },
-    "node_modules/@opentelemetry/sdk-logs": {
-      "version": "0.57.2",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/sdk-logs/-/sdk-logs-0.57.2.tgz",
-      "integrity": "sha512-TXFHJ5c+BKggWbdEQ/inpgIzEmS2BGQowLE9UhsMd7YYlUfBQJ4uax0VF/B5NYigdM/75OoJGhAV3upEhK+3gg==",
-      "license": "Apache-2.0",
-      "dependencies": {
-        "@opentelemetry/api-logs": "0.57.2",
-        "@opentelemetry/core": "1.30.1",
-        "@opentelemetry/resources": "1.30.1"
-      },
-      "engines": {
-        "node": ">=14"
-      },
-      "peerDependencies": {
-        "@opentelemetry/api": ">=1.4.0 <1.10.0"
-      }
-    },
-    "node_modules/@opentelemetry/sdk-metrics": {
-      "version": "1.30.1",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/sdk-metrics/-/sdk-metrics-1.30.1.tgz",
-      "integrity": "sha512-q9zcZ0Okl8jRgmy7eNW3Ku1XSgg3sDLa5evHZpCwjspw7E8Is4K/haRPDJrBcX3YSn/Y7gUvFnByNYEKQNbNog==",
-      "license": "Apache-2.0",
-      "dependencies": {
-        "@opentelemetry/core": "1.30.1",
-        "@opentelemetry/resources": "1.30.1"
-      },
-      "engines": {
-        "node": ">=14"
-      },
-      "peerDependencies": {
-        "@opentelemetry/api": ">=1.3.0 <1.10.0"
-      }
-    },
-    "node_modules/@opentelemetry/sdk-node": {
-      "version": "0.57.2",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/sdk-node/-/sdk-node-0.57.2.tgz",
-      "integrity": "sha512-8BaeqZyN5sTuPBtAoY+UtKwXBdqyuRKmekN5bFzAO40CgbGzAxfTpiL3PBerT7rhZ7p2nBdq7FaMv/tBQgHE4A==",
-      "license": "Apache-2.0",
-      "dependencies": {
-        "@opentelemetry/api-logs": "0.57.2",
-        "@opentelemetry/core": "1.30.1",
-        "@opentelemetry/exporter-logs-otlp-grpc": "0.57.2",
-        "@opentelemetry/exporter-logs-otlp-http": "0.57.2",
-        "@opentelemetry/exporter-logs-otlp-proto": "0.57.2",
-        "@opentelemetry/exporter-metrics-otlp-grpc": "0.57.2",
-        "@opentelemetry/exporter-metrics-otlp-http": "0.57.2",
-        "@opentelemetry/exporter-metrics-otlp-proto": "0.57.2",
-        "@opentelemetry/exporter-prometheus": "0.57.2",
-        "@opentelemetry/exporter-trace-otlp-grpc": "0.57.2",
-        "@opentelemetry/exporter-trace-otlp-http": "0.57.2",
-        "@opentelemetry/exporter-trace-otlp-proto": "0.57.2",
-        "@opentelemetry/exporter-zipkin": "1.30.1",
-        "@opentelemetry/instrumentation": "0.57.2",
-        "@opentelemetry/resources": "1.30.1",
-        "@opentelemetry/sdk-logs": "0.57.2",
-        "@opentelemetry/sdk-metrics": "1.30.1",
-        "@opentelemetry/sdk-trace-base": "1.30.1",
-        "@opentelemetry/sdk-trace-node": "1.30.1",
-        "@opentelemetry/semantic-conventions": "1.28.0"
-      },
-      "engines": {
-        "node": ">=14"
-      },
-      "peerDependencies": {
-        "@opentelemetry/api": ">=1.3.0 <1.10.0"
-      }
-    },
-    "node_modules/@opentelemetry/sdk-node/node_modules/@opentelemetry/semantic-conventions": {
-      "version": "1.28.0",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/semantic-conventions/-/semantic-conventions-1.28.0.tgz",
-      "integrity": "sha512-lp4qAiMTD4sNWW4DbKLBkfiMZ4jbAboJIGOQr5DvciMRI494OapieI9qiODpOt0XBr1LjIDy1xAGAnVs5supTA==",
-      "license": "Apache-2.0",
-      "engines": {
-        "node": ">=14"
-      }
-    },
-    "node_modules/@opentelemetry/sdk-trace-base": {
-      "version": "1.30.1",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/sdk-trace-base/-/sdk-trace-base-1.30.1.tgz",
-      "integrity": "sha512-jVPgBbH1gCy2Lb7X0AVQ8XAfgg0pJ4nvl8/IiQA6nxOsPvS+0zMJaFSs2ltXe0J6C8dqjcnpyqINDJmU30+uOg==",
-      "license": "Apache-2.0",
-      "dependencies": {
-        "@opentelemetry/core": "1.30.1",
-        "@opentelemetry/resources": "1.30.1",
-        "@opentelemetry/semantic-conventions": "1.28.0"
-      },
-      "engines": {
-        "node": ">=14"
-      },
-      "peerDependencies": {
-        "@opentelemetry/api": ">=1.0.0 <1.10.0"
-      }
-    },
-    "node_modules/@opentelemetry/sdk-trace-base/node_modules/@opentelemetry/semantic-conventions": {
-      "version": "1.28.0",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/semantic-conventions/-/semantic-conventions-1.28.0.tgz",
-      "integrity": "sha512-lp4qAiMTD4sNWW4DbKLBkfiMZ4jbAboJIGOQr5DvciMRI494OapieI9qiODpOt0XBr1LjIDy1xAGAnVs5supTA==",
-      "license": "Apache-2.0",
-      "engines": {
-        "node": ">=14"
-      }
-    },
-    "node_modules/@opentelemetry/sdk-trace-node": {
-      "version": "1.30.1",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/sdk-trace-node/-/sdk-trace-node-1.30.1.tgz",
-      "integrity": "sha512-cBjYOINt1JxXdpw1e5MlHmFRc5fgj4GW/86vsKFxJCJ8AL4PdVtYH41gWwl4qd4uQjqEL1oJVrXkSy5cnduAnQ==",
-      "license": "Apache-2.0",
-      "dependencies": {
-        "@opentelemetry/context-async-hooks": "1.30.1",
-        "@opentelemetry/core": "1.30.1",
-        "@opentelemetry/propagator-b3": "1.30.1",
-        "@opentelemetry/propagator-jaeger": "1.30.1",
-        "@opentelemetry/sdk-trace-base": "1.30.1",
-        "semver": "^7.5.2"
-      },
-      "engines": {
-        "node": ">=14"
-      },
-      "peerDependencies": {
-        "@opentelemetry/api": ">=1.0.0 <1.10.0"
-      }
-    },
-    "node_modules/@opentelemetry/sdk-trace-node/node_modules/semver": {
-      "version": "7.7.1",
-      "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.1.tgz",
-      "integrity": "sha512-hlq8tAfn0m/61p4BVRcPzIGr6LKiMwo4VM6dGi6pt4qcRkmNzTcWq6eCEjEh+qXjkMDvPlOFFSGwQjoEa6gyMA==",
-      "license": "ISC",
-      "bin": {
-        "semver": "bin/semver.js"
-      },
-      "engines": {
-        "node": ">=10"
-      }
-    },
-    "node_modules/@opentelemetry/semantic-conventions": {
-      "version": "1.30.0",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/semantic-conventions/-/semantic-conventions-1.30.0.tgz",
-      "integrity": "sha512-4VlGgo32k2EQ2wcCY3vEU28A0O13aOtHz3Xt2/2U5FAh9EfhD6t6DqL5Z6yAnRCntbTFDU4YfbpyzSlHNWycPw==",
-      "license": "Apache-2.0",
-      "engines": {
-        "node": ">=14"
-      }
-    },
-    "node_modules/@pkgjs/parseargs": {
-      "version": "0.11.0",
-      "resolved": "https://registry.npmjs.org/@pkgjs/parseargs/-/parseargs-0.11.0.tgz",
-      "integrity": "sha512-+1VkjdD0QBLPodGrJUeqarH8VAIvQODIbwh9XpP5Syisf7YoQgsJKPNFoqqLQlu+VQ/tVSshMR6loPMn8U+dPg==",
-      "dev": true,
-      "license": "MIT",
-      "optional": true,
-      "engines": {
-        "node": ">=14"
-      }
-    },
-    "node_modules/@pkgr/core": {
-      "version": "0.1.1",
-      "resolved": "https://registry.npmjs.org/@pkgr/core/-/core-0.1.1.tgz",
-      "integrity": "sha512-cq8o4cWH0ibXh9VGi5P20Tu9XF/0fFXl9EUinr9QfTM7a7p0oTA4iJRCQWppXR1Pg8dSM0UCItCkPwsk9qWWYA==",
-      "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": "^12.20.0 || ^14.18.0 || >=16.0.0"
-      },
-      "funding": {
-        "url": "https://opencollective.com/unts"
-      }
-    },
-    "node_modules/@playwright/test": {
-      "version": "1.51.0",
-      "resolved": "https://registry.npmjs.org/@playwright/test/-/test-1.51.0.tgz",
-      "integrity": "sha512-dJ0dMbZeHhI+wb77+ljx/FeC8VBP6j/rj9OAojO08JI80wTZy6vRk9KvHKiDCUh4iMpEiseMgqRBIeW+eKX6RA==",
-      "devOptional": true,
-      "license": "Apache-2.0",
-      "peer": true,
-      "dependencies": {
-        "playwright": "1.51.0"
-      },
-      "bin": {
-        "playwright": "cli.js"
-      },
-      "engines": {
-        "node": ">=18"
-      }
-    },
-    "node_modules/@playwright/test/node_modules/fsevents": {
-      "version": "2.3.2",
-      "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.2.tgz",
-      "integrity": "sha512-xiqMQR4xAeHTuB9uWm+fFRcIOgKBMiOBP+eXiyT7jsgVCq1bkVygt00oASowB7EdtpOHaaPgKt812P9ab+DDKA==",
-      "dev": true,
-      "hasInstallScript": true,
-      "license": "MIT",
-      "optional": true,
-      "os": [
-        "darwin"
-      ],
-      "peer": true,
-      "engines": {
-        "node": "^8.16.0 || ^10.6.0 || >=11.0.0"
-      }
-    },
-    "node_modules/@playwright/test/node_modules/playwright": {
-      "version": "1.51.0",
-      "resolved": "https://registry.npmjs.org/playwright/-/playwright-1.51.0.tgz",
-      "integrity": "sha512-442pTfGM0xxfCYxuBa/Pu6B2OqxqqaYq39JS8QDMGThUvIOCd6s0ANDog3uwA0cHavVlnTQzGCN7Id2YekDSXA==",
-      "devOptional": true,
-      "license": "Apache-2.0",
-      "peer": true,
-      "dependencies": {
-        "playwright-core": "1.51.0"
-      },
-      "bin": {
-        "playwright": "cli.js"
-      },
-      "engines": {
-        "node": ">=18"
-      },
-      "optionalDependencies": {
-        "fsevents": "2.3.2"
-      }
-    },
-    "node_modules/@playwright/test/node_modules/playwright-core": {
-      "version": "1.51.0",
-      "resolved": "https://registry.npmjs.org/playwright-core/-/playwright-core-1.51.0.tgz",
-      "integrity": "sha512-x47yPE3Zwhlil7wlNU/iktF7t2r/URR3VLbH6EknJd/04Qc/PSJ0EY3CMXipmglLG+zyRxW6HNo2EGbKLHPWMg==",
-      "devOptional": true,
-      "license": "Apache-2.0",
-      "peer": true,
-      "bin": {
-        "playwright-core": "cli.js"
-      },
-      "engines": {
-        "node": ">=18"
-      }
-    },
-    "node_modules/@polka/url": {
-      "version": "1.0.0-next.28",
-      "resolved": "https://registry.npmjs.org/@polka/url/-/url-1.0.0-next.28.tgz",
-      "integrity": "sha512-8LduaNlMZGwdZ6qWrKlfa+2M4gahzFkprZiAt2TF8uS0qQgBizKXpXURqvTJ4WtmupWxaLqjRb2UCTe72mu+Aw==",
-      "dev": true,
-      "license": "MIT"
-    },
-    "node_modules/@protobufjs/aspromise": {
-      "version": "1.1.2",
-      "resolved": "https://registry.npmjs.org/@protobufjs/aspromise/-/aspromise-1.1.2.tgz",
-      "integrity": "sha512-j+gKExEuLmKwvz3OgROXtrJ2UG2x8Ch2YZUxahh+s1F2HZ+wAceUNLkvy6zKCPVRkU++ZWQrdxsUeQXmcg4uoQ==",
-      "license": "BSD-3-Clause"
-    },
-    "node_modules/@protobufjs/base64": {
-      "version": "1.1.2",
-      "resolved": "https://registry.npmjs.org/@protobufjs/base64/-/base64-1.1.2.tgz",
-      "integrity": "sha512-AZkcAA5vnN/v4PDqKyMR5lx7hZttPDgClv83E//FMNhR2TMcLUhfRUBHCmSl0oi9zMgDDqRUJkSxO3wm85+XLg==",
-      "license": "BSD-3-Clause"
-    },
-    "node_modules/@protobufjs/codegen": {
-      "version": "2.0.4",
-      "resolved": "https://registry.npmjs.org/@protobufjs/codegen/-/codegen-2.0.4.tgz",
-      "integrity": "sha512-YyFaikqM5sH0ziFZCN3xDC7zeGaB/d0IUb9CATugHWbd1FRFwWwt4ld4OYMPWu5a3Xe01mGAULCdqhMlPl29Jg==",
-      "license": "BSD-3-Clause"
-    },
-    "node_modules/@protobufjs/eventemitter": {
-      "version": "1.1.0",
-      "resolved": "https://registry.npmjs.org/@protobufjs/eventemitter/-/eventemitter-1.1.0.tgz",
-      "integrity": "sha512-j9ednRT81vYJ9OfVuXG6ERSTdEL1xVsNgqpkxMsbIabzSo3goCjDIveeGv5d03om39ML71RdmrGNjG5SReBP/Q==",
-      "license": "BSD-3-Clause"
-    },
-    "node_modules/@protobufjs/fetch": {
-      "version": "1.1.0",
-      "resolved": "https://registry.npmjs.org/@protobufjs/fetch/-/fetch-1.1.0.tgz",
-      "integrity": "sha512-lljVXpqXebpsijW71PZaCYeIcE5on1w5DlQy5WH6GLbFryLUrBD4932W/E2BSpfRJWseIL4v/KPgBFxDOIdKpQ==",
-      "license": "BSD-3-Clause",
-      "dependencies": {
-        "@protobufjs/aspromise": "^1.1.1",
-        "@protobufjs/inquire": "^1.1.0"
-      }
-    },
-    "node_modules/@protobufjs/float": {
-      "version": "1.0.2",
-      "resolved": "https://registry.npmjs.org/@protobufjs/float/-/float-1.0.2.tgz",
-      "integrity": "sha512-Ddb+kVXlXst9d+R9PfTIxh1EdNkgoRe5tOX6t01f1lYWOvJnSPDBlG241QLzcyPdoNTsblLUdujGSE4RzrTZGQ==",
-      "license": "BSD-3-Clause"
-    },
-    "node_modules/@protobufjs/inquire": {
-      "version": "1.1.0",
-      "resolved": "https://registry.npmjs.org/@protobufjs/inquire/-/inquire-1.1.0.tgz",
-      "integrity": "sha512-kdSefcPdruJiFMVSbn801t4vFK7KB/5gd2fYvrxhuJYg8ILrmn9SKSX2tZdV6V+ksulWqS7aXjBcRXl3wHoD9Q==",
-      "license": "BSD-3-Clause"
-    },
-    "node_modules/@protobufjs/path": {
-      "version": "1.1.2",
-      "resolved": "https://registry.npmjs.org/@protobufjs/path/-/path-1.1.2.tgz",
-      "integrity": "sha512-6JOcJ5Tm08dOHAbdR3GrvP+yUUfkjG5ePsHYczMFLq3ZmMkAD98cDgcT2iA1lJ9NVwFd4tH/iSSoe44YWkltEA==",
-      "license": "BSD-3-Clause"
-    },
-    "node_modules/@protobufjs/pool": {
-      "version": "1.1.0",
-      "resolved": "https://registry.npmjs.org/@protobufjs/pool/-/pool-1.1.0.tgz",
-      "integrity": "sha512-0kELaGSIDBKvcgS4zkjz1PeddatrjYcmMWOlAuAPwAeccUrPHdUqo/J6LiymHHEiJT5NrF1UVwxY14f+fy4WQw==",
-      "license": "BSD-3-Clause"
-    },
-    "node_modules/@protobufjs/utf8": {
-      "version": "1.1.0",
-      "resolved": "https://registry.npmjs.org/@protobufjs/utf8/-/utf8-1.1.0.tgz",
-      "integrity": "sha512-Vvn3zZrhQZkkBE8LSuW3em98c0FwgO4nxzv6OdSxPKJIEKY2bGbHn+mhGIPerzI4twdxaP8/0+06HBpwf345Lw==",
-      "license": "BSD-3-Clause"
-    },
-    "node_modules/@radix-ui/react-compose-refs": {
-      "version": "1.1.1",
-      "resolved": "https://registry.npmjs.org/@radix-ui/react-compose-refs/-/react-compose-refs-1.1.1.tgz",
-      "integrity": "sha512-Y9VzoRDSJtgFMUCoiZBDVo084VQ5hfpXxVE+NgkdNsjiDBByiImMZKKhxMwCbdHvhlENG6a833CbFkOQvTricw==",
-      "license": "MIT",
-      "peerDependencies": {
-        "@types/react": "*",
-        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
-      },
-      "peerDependenciesMeta": {
-        "@types/react": {
-          "optional": true
-        }
-      }
-    },
-    "node_modules/@radix-ui/react-slot": {
-      "version": "1.1.2",
-      "resolved": "https://registry.npmjs.org/@radix-ui/react-slot/-/react-slot-1.1.2.tgz",
-      "integrity": "sha512-YAKxaiGsSQJ38VzKH86/BPRC4rh+b1Jpa+JneA5LRE7skmLPNAyeG8kPJj/oo4STLvlrs8vkf/iYyc3A5stYCQ==",
-      "license": "MIT",
-      "dependencies": {
-        "@radix-ui/react-compose-refs": "1.1.1"
-      },
-      "peerDependencies": {
-        "@types/react": "*",
-        "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
-      },
-      "peerDependenciesMeta": {
-        "@types/react": {
-          "optional": true
-        }
+      "peerDependenciesMeta": {
+        "@types/react": {
+          "optional": true
+        }
       }
     },
     "node_modules/@rollup/rollup-android-arm-eabi": {
@@ -6124,6 +5448,7 @@
       ],
       "dev": true,
       "license": "MIT",
+      "optional": true,
       "os": [
         "win32"
       ]
@@ -6781,34 +6106,6 @@
         "node": ">=10.13.0"
       }
     },
-    "node_modules/@tsconfig/node10": {
-      "version": "1.0.11",
-      "resolved": "https://registry.npmjs.org/@tsconfig/node10/-/node10-1.0.11.tgz",
-      "integrity": "sha512-DcRjDCujK/kCk/cUe8Xz8ZSpm8mS3mNNpta+jGCA6USEDfktlNvm1+IuZ9eTcDbNk41BHwpHHeW+N1lKCz4zOw==",
-      "dev": true,
-      "license": "MIT"
-    },
-    "node_modules/@tsconfig/node12": {
-      "version": "1.0.11",
-      "resolved": "https://registry.npmjs.org/@tsconfig/node12/-/node12-1.0.11.tgz",
-      "integrity": "sha512-cqefuRsh12pWyGsIoBKJA9luFu3mRxCA+ORZvA4ktLSzIuCUtWVxGIuXigEwO5/ywWFMZ2QEGKWvkZG1zDMTag==",
-      "dev": true,
-      "license": "MIT"
-    },
-    "node_modules/@tsconfig/node14": {
-      "version": "1.0.3",
-      "resolved": "https://registry.npmjs.org/@tsconfig/node14/-/node14-1.0.3.tgz",
-      "integrity": "sha512-ysT8mhdixWK6Hw3i1V2AeRqZ5WfXg1G43mqoYlM2nc6388Fq5jcXyr5mRsqViLx/GJYdoL0bfXD8nmF+Zn/Iow==",
-      "dev": true,
-      "license": "MIT"
-    },
-    "node_modules/@tsconfig/node16": {
-      "version": "1.0.4",
-      "resolved": "https://registry.npmjs.org/@tsconfig/node16/-/node16-1.0.4.tgz",
-      "integrity": "sha512-vxhUy4J8lyeyinH7Azl1pdd43GJhZH/tP2weN8TntQblOY+A0XbT8DJk1/oCPuOOyg/Ja757rG0CgHcWC8OfMA==",
-      "dev": true,
-      "license": "MIT"
-    },
     "node_modules/@types/aria-query": {
       "version": "5.0.4",
       "resolved": "https://registry.npmjs.org/@types/aria-query/-/aria-query-5.0.4.tgz",
@@ -6996,9 +6293,9 @@
       "license": "MIT"
     },
     "node_modules/@types/node": {
-      "version": "22.13.9",
-      "resolved": "https://registry.npmjs.org/@types/node/-/node-22.13.9.tgz",
-      "integrity": "sha512-acBjXdRJ3A6Pb3tqnw9HZmyR3Fiol3aGxRCK1x3d+6CDAMjl7I649wpSd+yNURCjbOUGu9tqtLKnTGxmK6CyGw==",
+      "version": "22.13.8",
+      "resolved": "https://registry.npmjs.org/@types/node/-/node-22.13.8.tgz",
+      "integrity": "sha512-G3EfaZS+iOGYWLLRCEAXdWK9my08oHNZ+FHluRiggIYJPOXzhOiDgpVCUHaUvyIC5/fj7C/p637jdzC666AOKQ==",
       "license": "MIT",
       "dependencies": {
         "undici-types": "~6.20.0"
@@ -7040,12 +6337,6 @@
         "csstype": "^3.0.2"
       }
     },
-    "node_modules/@types/shimmer": {
-      "version": "1.2.0",
-      "resolved": "https://registry.npmjs.org/@types/shimmer/-/shimmer-1.2.0.tgz",
-      "integrity": "sha512-UE7oxhQLLd9gub6JKIAhDq06T0F6FnztwMNRvYgjeQSBeMc1ZG/tA47EwfduvkuQS8apbkM/lpLpWsaCeYsXVg==",
-      "license": "MIT"
-    },
     "node_modules/@types/stack-utils": {
       "version": "2.0.3",
       "resolved": "https://registry.npmjs.org/@types/stack-utils/-/stack-utils-2.0.3.tgz",
@@ -7270,19 +6561,6 @@
         "url": "https://github.com/sponsors/isaacs"
       }
     },
-    "node_modules/@typescript-eslint/typescript-estree/node_modules/semver": {
-      "version": "7.7.1",
-      "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.1.tgz",
-      "integrity": "sha512-hlq8tAfn0m/61p4BVRcPzIGr6LKiMwo4VM6dGi6pt4qcRkmNzTcWq6eCEjEh+qXjkMDvPlOFFSGwQjoEa6gyMA==",
-      "dev": true,
-      "license": "ISC",
-      "bin": {
-        "semver": "bin/semver.js"
-      },
-      "engines": {
-        "node": ">=10"
-      }
-    },
     "node_modules/@typescript-eslint/utils": {
       "version": "7.18.0",
       "resolved": "https://registry.npmjs.org/@typescript-eslint/utils/-/utils-7.18.0.tgz",
@@ -7446,14 +6724,14 @@
       }
     },
     "node_modules/@vitest/expect": {
-      "version": "3.0.8",
-      "resolved": "https://registry.npmjs.org/@vitest/expect/-/expect-3.0.8.tgz",
-      "integrity": "sha512-Xu6TTIavTvSSS6LZaA3EebWFr6tsoXPetOWNMOlc7LO88QVVBwq2oQWBoDiLCN6YTvNYsGSjqOO8CAdjom5DCQ==",
+      "version": "3.0.7",
+      "resolved": "https://registry.npmjs.org/@vitest/expect/-/expect-3.0.7.tgz",
+      "integrity": "sha512-QP25f+YJhzPfHrHfYHtvRn+uvkCFCqFtW9CktfBxmB+25QqWsx7VB2As6f4GmwllHLDhXNHvqedwhvMmSnNmjw==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
-        "@vitest/spy": "3.0.8",
-        "@vitest/utils": "3.0.8",
+        "@vitest/spy": "3.0.7",
+        "@vitest/utils": "3.0.7",
         "chai": "^5.2.0",
         "tinyrainbow": "^2.0.0"
       },
@@ -7462,13 +6740,13 @@
       }
     },
     "node_modules/@vitest/mocker": {
-      "version": "3.0.8",
-      "resolved": "https://registry.npmjs.org/@vitest/mocker/-/mocker-3.0.8.tgz",
-      "integrity": "sha512-n3LjS7fcW1BCoF+zWZxG7/5XvuYH+lsFg+BDwwAz0arIwHQJFUEsKBQ0BLU49fCxuM/2HSeBPHQD8WjgrxMfow==",
+      "version": "3.0.7",
+      "resolved": "https://registry.npmjs.org/@vitest/mocker/-/mocker-3.0.7.tgz",
+      "integrity": "sha512-qui+3BLz9Eonx4EAuR/i+QlCX6AUZ35taDQgwGkK/Tw6/WgwodSrjN1X2xf69IA/643ZX5zNKIn2svvtZDrs4w==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
-        "@vitest/spy": "3.0.8",
+        "@vitest/spy": "3.0.7",
         "estree-walker": "^3.0.3",
         "magic-string": "^0.30.17"
       },
@@ -7488,10 +6766,20 @@
         }
       }
     },
+    "node_modules/@vitest/mocker/node_modules/estree-walker": {
+      "version": "3.0.3",
+      "resolved": "https://registry.npmjs.org/estree-walker/-/estree-walker-3.0.3.tgz",
+      "integrity": "sha512-7RUKfXgSMMkzt6ZuXmqapOurLGPPfgj6l9uRZ7lRGolvk0y2yocc35LdcxKC5PQZdn2DMqioAQ2NoWcrTKmm6g==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@types/estree": "^1.0.0"
+      }
+    },
     "node_modules/@vitest/pretty-format": {
-      "version": "3.0.8",
-      "resolved": "https://registry.npmjs.org/@vitest/pretty-format/-/pretty-format-3.0.8.tgz",
-      "integrity": "sha512-BNqwbEyitFhzYMYHUVbIvepOyeQOSFA/NeJMIP9enMntkkxLgOcgABH6fjyXG85ipTgvero6noreavGIqfJcIg==",
+      "version": "3.0.7",
+      "resolved": "https://registry.npmjs.org/@vitest/pretty-format/-/pretty-format-3.0.7.tgz",
+      "integrity": "sha512-CiRY0BViD/V8uwuEzz9Yapyao+M9M008/9oMOSQydwbwb+CMokEq3XVaF3XK/VWaOK0Jm9z7ENhybg70Gtxsmg==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
@@ -7502,13 +6790,13 @@
       }
     },
     "node_modules/@vitest/runner": {
-      "version": "3.0.8",
-      "resolved": "https://registry.npmjs.org/@vitest/runner/-/runner-3.0.8.tgz",
-      "integrity": "sha512-c7UUw6gEcOzI8fih+uaAXS5DwjlBaCJUo7KJ4VvJcjL95+DSR1kova2hFuRt3w41KZEFcOEiq098KkyrjXeM5w==",
+      "version": "3.0.7",
+      "resolved": "https://registry.npmjs.org/@vitest/runner/-/runner-3.0.7.tgz",
+      "integrity": "sha512-WeEl38Z0S2ZcuRTeyYqaZtm4e26tq6ZFqh5y8YD9YxfWuu0OFiGFUbnxNynwLjNRHPsXyee2M9tV7YxOTPZl2g==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
-        "@vitest/utils": "3.0.8",
+        "@vitest/utils": "3.0.7",
         "pathe": "^2.0.3"
       },
       "funding": {
@@ -7516,13 +6804,13 @@
       }
     },
     "node_modules/@vitest/snapshot": {
-      "version": "3.0.8",
-      "resolved": "https://registry.npmjs.org/@vitest/snapshot/-/snapshot-3.0.8.tgz",
-      "integrity": "sha512-x8IlMGSEMugakInj44nUrLSILh/zy1f2/BgH0UeHpNyOocG18M9CWVIFBaXPt8TrqVZWmcPjwfG/ht5tnpba8A==",
+      "version": "3.0.7",
+      "resolved": "https://registry.npmjs.org/@vitest/snapshot/-/snapshot-3.0.7.tgz",
+      "integrity": "sha512-eqTUryJWQN0Rtf5yqCGTQWsCFOQe4eNz5Twsu21xYEcnFJtMU5XvmG0vgebhdLlrHQTSq5p8vWHJIeJQV8ovsA==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
-        "@vitest/pretty-format": "3.0.8",
+        "@vitest/pretty-format": "3.0.7",
         "magic-string": "^0.30.17",
         "pathe": "^2.0.3"
       },
@@ -7531,9 +6819,9 @@
       }
     },
     "node_modules/@vitest/spy": {
-      "version": "3.0.8",
-      "resolved": "https://registry.npmjs.org/@vitest/spy/-/spy-3.0.8.tgz",
-      "integrity": "sha512-MR+PzJa+22vFKYb934CejhR4BeRpMSoxkvNoDit68GQxRLSf11aT6CTj3XaqUU9rxgWJFnqicN/wxw6yBRkI1Q==",
+      "version": "3.0.7",
+      "resolved": "https://registry.npmjs.org/@vitest/spy/-/spy-3.0.7.tgz",
+      "integrity": "sha512-4T4WcsibB0B6hrKdAZTM37ekuyFZt2cGbEGd2+L0P8ov15J1/HUsUaqkXEQPNAWr4BtPPe1gI+FYfMHhEKfR8w==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
@@ -7544,13 +6832,13 @@
       }
     },
     "node_modules/@vitest/ui": {
-      "version": "3.0.8",
-      "resolved": "https://registry.npmjs.org/@vitest/ui/-/ui-3.0.8.tgz",
-      "integrity": "sha512-MfTjaLU+Gw/lYorgwFZ06Cym+Mj9hPfZh/Q91d4JxyAHiicAakPTvS7zYCSHF+5cErwu2PVBe1alSjuh6L/UiA==",
+      "version": "3.0.7",
+      "resolved": "https://registry.npmjs.org/@vitest/ui/-/ui-3.0.7.tgz",
+      "integrity": "sha512-bogkkSaVdSTRj02TfypjrqrLCeEc/tA5V4gAVM843Rp5JtIub3xaij+qjsSnS6CseLQJUSdDCFaFqPMmymRJKQ==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
-        "@vitest/utils": "3.0.8",
+        "@vitest/utils": "3.0.7",
         "fflate": "^0.8.2",
         "flatted": "^3.3.3",
         "pathe": "^2.0.3",
@@ -7562,17 +6850,17 @@
         "url": "https://opencollective.com/vitest"
       },
       "peerDependencies": {
-        "vitest": "3.0.8"
+        "vitest": "3.0.7"
       }
     },
     "node_modules/@vitest/utils": {
-      "version": "3.0.8",
-      "resolved": "https://registry.npmjs.org/@vitest/utils/-/utils-3.0.8.tgz",
-      "integrity": "sha512-nkBC3aEhfX2PdtQI/QwAWp8qZWwzASsU4Npbcd5RdMPBSSLCpkZp52P3xku3s3uA0HIEhGvEcF8rNkBsz9dQ4Q==",
+      "version": "3.0.7",
+      "resolved": "https://registry.npmjs.org/@vitest/utils/-/utils-3.0.7.tgz",
+      "integrity": "sha512-xePVpCRfooFX3rANQjwoditoXgWb1MaFbzmGuPP59MK6i13mrnDw/yEIyJudLeW6/38mCNcwCiJIGmpDPibAIg==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
-        "@vitest/pretty-format": "3.0.8",
+        "@vitest/pretty-format": "3.0.7",
         "loupe": "^3.1.3",
         "tinyrainbow": "^2.0.0"
       },
@@ -7806,9 +7094,10 @@
       }
     },
     "node_modules/acorn": {
-      "version": "8.14.1",
-      "resolved": "https://registry.npmjs.org/acorn/-/acorn-8.14.1.tgz",
-      "integrity": "sha512-OvQ/2pUDKmgfCg++xsTX1wGxfTaszcHVcTctW4UJB4hibJx2HXxxO5UmVgyjMa+ZDsiaf5wWLXYpRWMmBI0QHg==",
+      "version": "8.14.0",
+      "resolved": "https://registry.npmjs.org/acorn/-/acorn-8.14.0.tgz",
+      "integrity": "sha512-cl669nCJTZBsL97OF4kUQm5g5hC2uihk0NxY3WENAC0TYdILVkAyHymAntgxGkl7K+t0cXIrH5siy5S4XkFycA==",
+      "dev": true,
       "license": "MIT",
       "bin": {
         "acorn": "bin/acorn"
@@ -7828,15 +7117,6 @@
         "acorn-walk": "^8.0.2"
       }
     },
-    "node_modules/acorn-import-attributes": {
-      "version": "1.9.5",
-      "resolved": "https://registry.npmjs.org/acorn-import-attributes/-/acorn-import-attributes-1.9.5.tgz",
-      "integrity": "sha512-n02Vykv5uA3eHGM/Z2dQrcD56kL8TyDb2p1+0P83PClMnC/nc+anbQRhIOWnSq4Ke/KvDPrY3C9hDtC/A3eHnQ==",
-      "license": "MIT",
-      "peerDependencies": {
-        "acorn": "^8"
-      }
-    },
     "node_modules/acorn-jsx": {
       "version": "5.3.2",
       "resolved": "https://registry.npmjs.org/acorn-jsx/-/acorn-jsx-5.3.2.tgz",
@@ -7861,13 +7141,16 @@
       }
     },
     "node_modules/agent-base": {
-      "version": "7.1.3",
-      "resolved": "https://registry.npmjs.org/agent-base/-/agent-base-7.1.3.tgz",
-      "integrity": "sha512-jRR5wdylq8CkOe6hei19GGZnxM6rBGwFl3Bg0YItGDimvjGtAvdZk4Pu6Cl4u4Igsws4a1fd1Vq3ezrhn4KmFw==",
+      "version": "6.0.2",
+      "resolved": "https://registry.npmjs.org/agent-base/-/agent-base-6.0.2.tgz",
+      "integrity": "sha512-RZNwNclF7+MS/8bDg70amg32dyeZGZxiDuQmZxKLAlQjr3jGyLx+4Kkk58UO7D2QdgFIQCovuSuZESne6RG6XQ==",
       "dev": true,
       "license": "MIT",
+      "dependencies": {
+        "debug": "4"
+      },
       "engines": {
-        "node": ">= 14"
+        "node": ">= 6.0.0"
       }
     },
     "node_modules/agentkeepalive": {
@@ -7951,14 +7234,6 @@
         "ajv": "^6.9.1"
       }
     },
-    "node_modules/ansi-color": {
-      "version": "0.2.1",
-      "resolved": "https://registry.npmjs.org/ansi-color/-/ansi-color-0.2.1.tgz",
-      "integrity": "sha512-bF6xLaZBLpOQzgYUtYEhJx090nPSZk1BQ/q2oyBK9aMMcJHzx9uXGCjI2Y+LebsN4Jwoykr0V9whbPiogdyHoQ==",
-      "engines": {
-        "node": "*"
-      }
-    },
     "node_modules/ansi-escapes": {
       "version": "4.3.2",
       "resolved": "https://registry.npmjs.org/ansi-escapes/-/ansi-escapes-4.3.2.tgz",
@@ -7979,6 +7254,7 @@
       "version": "5.0.1",
       "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
       "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
+      "dev": true,
       "license": "MIT",
       "engines": {
         "node": ">=8"
@@ -8018,6 +7294,19 @@
         "node": ">= 8"
       }
     },
+    "node_modules/anymatch/node_modules/picomatch": {
+      "version": "2.3.1",
+      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz",
+      "integrity": "sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=8.6"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/jonschlinkert"
+      }
+    },
     "node_modules/arg": {
       "version": "5.0.2",
       "resolved": "https://registry.npmjs.org/arg/-/arg-5.0.2.tgz",
@@ -8248,15 +7537,6 @@
       "integrity": "sha512-Oei9OH4tRh0YqU3GxhX79dM/mwVgvbZJaSNaRk+bshkj0S5cfHcgYakreBjrHwatXKbz+IoIdYLxrKim2MjW0Q==",
       "license": "MIT"
     },
-    "node_modules/atomic-sleep": {
-      "version": "1.0.0",
-      "resolved": "https://registry.npmjs.org/atomic-sleep/-/atomic-sleep-1.0.0.tgz",
-      "integrity": "sha512-kNOjDqAh7px0XWNI+4QbzoiR/nTkHAWNud2uvnJquD1/x5a7EQZMJT0AczqK0Qn67oY/TTQ1LbUKajZpp3I9tQ==",
-      "license": "MIT",
-      "engines": {
-        "node": ">=8.0.0"
-      }
-    },
     "node_modules/autoprefixer": {
       "version": "10.4.20",
       "resolved": "https://registry.npmjs.org/autoprefixer/-/autoprefixer-10.4.20.tgz",
@@ -8311,9 +7591,9 @@
       }
     },
     "node_modules/axe-core": {
-      "version": "4.10.3",
-      "resolved": "https://registry.npmjs.org/axe-core/-/axe-core-4.10.3.tgz",
-      "integrity": "sha512-Xm7bpRXnDSX2YE2YFfBk2FnF0ep6tmG7xPh8iHee8MIcrgq762Nkce856dYtJYLkuIoYZvGfTs/PbZhideTcEg==",
+      "version": "4.10.2",
+      "resolved": "https://registry.npmjs.org/axe-core/-/axe-core-4.10.2.tgz",
+      "integrity": "sha512-RE3mdQ7P3FRSe7eqCWoeQ/Z9QXrtniSjp1wUjt5nRC3WIpz5rSCve6o3fsZ2aCpJtrZjSZgjwXAoTO5k4tEI0w==",
       "dev": true,
       "license": "MPL-2.0",
       "engines": {
@@ -8321,9 +7601,9 @@
       }
     },
     "node_modules/axios": {
-      "version": "1.8.2",
-      "resolved": "https://registry.npmjs.org/axios/-/axios-1.8.2.tgz",
-      "integrity": "sha512-ls4GYBm5aig9vWx8AWDSGLpnpDQRtWAfrjU+EuytuODrFBkqesN2RkOQCBzrA1RQNHw1SmRMSDDDSwzNAYQ6Rg==",
+      "version": "1.8.1",
+      "resolved": "https://registry.npmjs.org/axios/-/axios-1.8.1.tgz",
+      "integrity": "sha512-NN+fvwH/kV01dYUQ3PTOZns4LWtWhOFCAhQ/pHb88WQ1hNe5V/dvFwc4VJcDL11LT9xSX0QtsR8sWUuyOuOq7g==",
       "license": "MIT",
       "dependencies": {
         "follow-redirects": "^1.15.6",
@@ -8430,6 +7710,16 @@
         "node": ">=8"
       }
     },
+    "node_modules/babel-plugin-istanbul/node_modules/semver": {
+      "version": "6.3.1",
+      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
+      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
+      "dev": true,
+      "license": "ISC",
+      "bin": {
+        "semver": "bin/semver.js"
+      }
+    },
     "node_modules/babel-plugin-jest-hoist": {
       "version": "29.6.3",
       "resolved": "https://registry.npmjs.org/babel-plugin-jest-hoist/-/babel-plugin-jest-hoist-29.6.3.tgz",
@@ -8461,6 +7751,16 @@
         "@babel/core": "^7.4.0 || ^8.0.0-0 <8.0.0"
       }
     },
+    "node_modules/babel-plugin-polyfill-corejs2/node_modules/semver": {
+      "version": "6.3.1",
+      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
+      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
+      "dev": true,
+      "license": "ISC",
+      "bin": {
+        "semver": "bin/semver.js"
+      }
+    },
     "node_modules/babel-plugin-polyfill-corejs3": {
       "version": "0.11.1",
       "resolved": "https://registry.npmjs.org/babel-plugin-polyfill-corejs3/-/babel-plugin-polyfill-corejs3-0.11.1.tgz",
@@ -8719,20 +8019,6 @@
       "dev": true,
       "license": "MIT"
     },
-    "node_modules/bufrw": {
-      "version": "1.4.0",
-      "resolved": "https://registry.npmjs.org/bufrw/-/bufrw-1.4.0.tgz",
-      "integrity": "sha512-sWm8iPbqvL9+5SiYxXH73UOkyEbGQg7kyHQmReF89WJHQJw2eV4P/yZ0E+b71cczJ4pPobVhXxgQcmfSTgGHxQ==",
-      "dependencies": {
-        "ansi-color": "^0.2.1",
-        "error": "^7.0.0",
-        "hexer": "^1.5.0",
-        "xtend": "^4.0.0"
-      },
-      "engines": {
-        "node": ">= 0.10.x"
-      }
-    },
     "node_modules/busboy": {
       "version": "1.6.0",
       "resolved": "https://registry.npmjs.org/busboy/-/busboy-1.6.0.tgz",
@@ -8981,6 +8267,7 @@
       "version": "1.4.3",
       "resolved": "https://registry.npmjs.org/cjs-module-lexer/-/cjs-module-lexer-1.4.3.tgz",
       "integrity": "sha512-9z8TZaGM1pfswYeXrUpzPrkx8UnWYdhJclsiYMm6x/w5+nN+8Tf/LnAgfLGQCm59qAOxU8WwHEq2vNwF6i4j+Q==",
+      "dev": true,
       "license": "MIT"
     },
     "node_modules/class-variance-authority": {
@@ -9213,6 +8500,7 @@
       "version": "8.0.1",
       "resolved": "https://registry.npmjs.org/cliui/-/cliui-8.0.1.tgz",
       "integrity": "sha512-BSeNnyus75C4//NQ9gQt1/csTXyo/8Sb+afLAkzAptFuMsod9HFokGNudZpi/oQV73hnVK+sR+5PVRMd+Dr7YQ==",
+      "dev": true,
       "license": "ISC",
       "dependencies": {
         "string-width": "^4.2.0",
@@ -9227,6 +8515,7 @@
       "version": "4.3.0",
       "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
       "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
+      "dev": true,
       "license": "MIT",
       "dependencies": {
         "color-convert": "^2.0.1"
@@ -9242,12 +8531,14 @@
       "version": "8.0.0",
       "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
       "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
+      "dev": true,
       "license": "MIT"
     },
     "node_modules/cliui/node_modules/is-fullwidth-code-point": {
       "version": "3.0.0",
       "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
       "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
+      "dev": true,
       "license": "MIT",
       "engines": {
         "node": ">=8"
@@ -9257,6 +8548,7 @@
       "version": "4.2.3",
       "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
       "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
+      "dev": true,
       "license": "MIT",
       "dependencies": {
         "emoji-regex": "^8.0.0",
@@ -9271,6 +8563,7 @@
       "version": "7.0.0",
       "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-7.0.0.tgz",
       "integrity": "sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==",
+      "dev": true,
       "license": "MIT",
       "dependencies": {
         "ansi-styles": "^4.0.0",
@@ -9358,6 +8651,7 @@
       "version": "2.0.20",
       "resolved": "https://registry.npmjs.org/colorette/-/colorette-2.0.20.tgz",
       "integrity": "sha512-IfEDxwoWIjkeXL1eXcDiow4UbKjhLdq6/EuSVR9GMN7KVH3r9gQ83e73hsz1Nd1T3ijd5xv1wcWRYO+D6kCI2w==",
+      "dev": true,
       "license": "MIT"
     },
     "node_modules/combined-stream": {
@@ -9562,13 +8856,6 @@
         "url": "https://github.com/chalk/chalk?sponsor=1"
       }
     },
-    "node_modules/create-require": {
-      "version": "1.1.1",
-      "resolved": "https://registry.npmjs.org/create-require/-/create-require-1.1.1.tgz",
-      "integrity": "sha512-dcKFX3jn0MpIaXjisoRvexIJVEKzaq7z2rZKxf+MSr9TkdmHmsU4m2lcLojrj/FHl8mk5VxMmYA+ftRkP/3oKQ==",
-      "dev": true,
-      "license": "MIT"
-    },
     "node_modules/critters": {
       "version": "0.0.23",
       "resolved": "https://registry.npmjs.org/critters/-/critters-0.0.23.tgz",
@@ -9926,15 +9213,6 @@
         "url": "https://github.com/sponsors/ljharb"
       }
     },
-    "node_modules/dateformat": {
-      "version": "4.6.3",
-      "resolved": "https://registry.npmjs.org/dateformat/-/dateformat-4.6.3.tgz",
-      "integrity": "sha512-2P0p0pFGzHS5EMnhdxQi7aJN+iMheud0UhG4dlE1DLAlvL8JHjJJTX/CSm4JXwV0Ka5nGk3zC5mcb5bUQUxxMA==",
-      "license": "MIT",
-      "engines": {
-        "node": "*"
-      }
-    },
     "node_modules/debounce": {
       "version": "1.2.1",
       "resolved": "https://registry.npmjs.org/debounce/-/debounce-1.2.1.tgz",
@@ -10107,16 +9385,6 @@
       "dev": true,
       "license": "Apache-2.0"
     },
-    "node_modules/diff": {
-      "version": "4.0.2",
-      "resolved": "https://registry.npmjs.org/diff/-/diff-4.0.2.tgz",
-      "integrity": "sha512-58lmxKSA4BNyLz+HHMUzlOEpg09FV+ev6ZMe3vJihgdxzgcwZ8VoEEPmALCZG9LmqfVoNMMKpttIYTVG6uDY7A==",
-      "dev": true,
-      "license": "BSD-3-Clause",
-      "engines": {
-        "node": ">=0.3.1"
-      }
-    },
     "node_modules/diff-sequences": {
       "version": "29.6.3",
       "resolved": "https://registry.npmjs.org/diff-sequences/-/diff-sequences-29.6.3.tgz",
@@ -10251,7 +9519,6 @@
       "version": "16.4.7",
       "resolved": "https://registry.npmjs.org/dotenv/-/dotenv-16.4.7.tgz",
       "integrity": "sha512-47qPchRCykZC03FhkYAhrvwU4xDBFIj1QPqaarj6mdM/hgUzfPHcpkHJOn3mJAufFeeAxAzeGsr5X0M4k6fLZQ==",
-      "dev": true,
       "license": "BSD-2-Clause",
       "engines": {
         "node": ">=12"
@@ -10311,9 +9578,9 @@
       "license": "MIT"
     },
     "node_modules/electron-to-chromium": {
-      "version": "1.5.113",
-      "resolved": "https://registry.npmjs.org/electron-to-chromium/-/electron-to-chromium-1.5.113.tgz",
-      "integrity": "sha512-wjT2O4hX+wdWPJ76gWSkMhcHAV2PTMX+QetUCPYEdCIe+cxmgzzSSiGRCKW8nuh4mwKZlpv0xvoW7OF2X+wmHg==",
+      "version": "1.5.112",
+      "resolved": "https://registry.npmjs.org/electron-to-chromium/-/electron-to-chromium-1.5.112.tgz",
+      "integrity": "sha512-oen93kVyqSb3l+ziUgzIOlWt/oOuy4zRmpwestMn4rhFWAoFJeFuCVte9F2fASjeZZo7l/Cif9TiyrdW4CwEMA==",
       "dev": true,
       "license": "ISC"
     },
@@ -10356,15 +9623,6 @@
         "node": ">= 0.8"
       }
     },
-    "node_modules/end-of-stream": {
-      "version": "1.4.4",
-      "resolved": "https://registry.npmjs.org/end-of-stream/-/end-of-stream-1.4.4.tgz",
-      "integrity": "sha512-+uw1inIHVPQoaVuHzRyXd21icM+cnt4CzD5rW+NC1wjOUSTOs+Te7FOv7AhN7vS9x/oIyhLP5PR1H+phQAHu5Q==",
-      "license": "MIT",
-      "dependencies": {
-        "once": "^1.4.0"
-      }
-    },
     "node_modules/enhanced-resolve": {
       "version": "5.18.1",
       "resolved": "https://registry.npmjs.org/enhanced-resolve/-/enhanced-resolve-5.18.1.tgz",
@@ -10404,15 +9662,6 @@
         "url": "https://github.com/sponsors/sindresorhus"
       }
     },
-    "node_modules/error": {
-      "version": "7.0.2",
-      "resolved": "https://registry.npmjs.org/error/-/error-7.0.2.tgz",
-      "integrity": "sha512-UtVv4l5MhijsYUxPJo4390gzfZvAnTHreNnDjnTZaKIiZ/SemXxAhBkYSKtWa5RtBXbLP8tMgn/n0RUa/H7jXw==",
-      "dependencies": {
-        "string-template": "~0.2.1",
-        "xtend": "~4.0.0"
-      }
-    },
     "node_modules/error-ex": {
       "version": "1.3.2",
       "resolved": "https://registry.npmjs.org/error-ex/-/error-ex-1.3.2.tgz",
@@ -10651,6 +9900,7 @@
       "version": "3.2.0",
       "resolved": "https://registry.npmjs.org/escalade/-/escalade-3.2.0.tgz",
       "integrity": "sha512-WUj2qlxaQtO4g6Pq5c29GTcWGDyd8itL8zTlipgECz3JesAiiOKotd8JU6otB3PACgG6xkJUyVhboMS+bje/jA==",
+      "dev": true,
       "license": "MIT",
       "engines": {
         "node": ">=6"
@@ -10950,40 +10200,14 @@
         "node": ">=0.10.0"
       }
     },
-    "node_modules/eslint-plugin-import/node_modules/json5": {
-      "version": "1.0.2",
-      "resolved": "https://registry.npmjs.org/json5/-/json5-1.0.2.tgz",
-      "integrity": "sha512-g1MWMLBiz8FKi1e4w0UyVL3w+iJceWAFBAaBnnGKOpNa5f8TLktkbre1+s6oICydWAm+HRUGTmI+//xv2hvXYA==",
+    "node_modules/eslint-plugin-import/node_modules/semver": {
+      "version": "6.3.1",
+      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
+      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
       "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "minimist": "^1.2.0"
-      },
+      "license": "ISC",
       "bin": {
-        "json5": "lib/cli.js"
-      }
-    },
-    "node_modules/eslint-plugin-import/node_modules/strip-bom": {
-      "version": "3.0.0",
-      "resolved": "https://registry.npmjs.org/strip-bom/-/strip-bom-3.0.0.tgz",
-      "integrity": "sha512-vavAMRXOgBVNF6nyEEmL3DBK19iRpDcoIwW+swQ+CbGiu7lju6t+JklA1MHweoWtadgt4ISVUsXLyDq34ddcwA==",
-      "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=4"
-      }
-    },
-    "node_modules/eslint-plugin-import/node_modules/tsconfig-paths": {
-      "version": "3.15.0",
-      "resolved": "https://registry.npmjs.org/tsconfig-paths/-/tsconfig-paths-3.15.0.tgz",
-      "integrity": "sha512-2Ac2RgzDe/cn48GvOe3M+o82pEFewD3UPbyoUHHdKasHwJKjds4fLXWf/Ux5kATBKN20oaFGu+jbElp1pos0mg==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "@types/json5": "^0.0.29",
-        "json5": "^1.0.2",
-        "minimist": "^1.2.6",
-        "strip-bom": "^3.0.0"
+        "semver": "bin/semver.js"
       }
     },
     "node_modules/eslint-plugin-jsx-a11y": {
@@ -11134,6 +10358,16 @@
         "url": "https://github.com/sponsors/ljharb"
       }
     },
+    "node_modules/eslint-plugin-react/node_modules/semver": {
+      "version": "6.3.1",
+      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
+      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
+      "dev": true,
+      "license": "ISC",
+      "bin": {
+        "semver": "bin/semver.js"
+      }
+    },
     "node_modules/eslint-scope": {
       "version": "7.2.2",
       "resolved": "https://registry.npmjs.org/eslint-scope/-/eslint-scope-7.2.2.tgz",
@@ -11359,16 +10593,6 @@
         "node": ">=4.0"
       }
     },
-    "node_modules/estree-walker": {
-      "version": "3.0.3",
-      "resolved": "https://registry.npmjs.org/estree-walker/-/estree-walker-3.0.3.tgz",
-      "integrity": "sha512-7RUKfXgSMMkzt6ZuXmqapOurLGPPfgj6l9uRZ7lRGolvk0y2yocc35LdcxKC5PQZdn2DMqioAQ2NoWcrTKmm6g==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "@types/estree": "^1.0.0"
-      }
-    },
     "node_modules/esutils": {
       "version": "2.0.3",
       "resolved": "https://registry.npmjs.org/esutils/-/esutils-2.0.3.tgz",
@@ -11594,12 +10818,6 @@
       "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==",
       "license": "MIT"
     },
-    "node_modules/fast-copy": {
-      "version": "3.0.2",
-      "resolved": "https://registry.npmjs.org/fast-copy/-/fast-copy-3.0.2.tgz",
-      "integrity": "sha512-dl0O9Vhju8IrcLndv2eU4ldt1ftXMqqfgN4H1cpmGV7P6jeB9FwpN9a2c8DPGE1Ys88rNUJVYDHq73CGAGOPfQ==",
-      "license": "MIT"
-    },
     "node_modules/fast-deep-equal": {
       "version": "3.1.3",
       "resolved": "https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-3.1.3.tgz",
@@ -11658,21 +10876,6 @@
       "dev": true,
       "license": "MIT"
     },
-    "node_modules/fast-redact": {
-      "version": "3.5.0",
-      "resolved": "https://registry.npmjs.org/fast-redact/-/fast-redact-3.5.0.tgz",
-      "integrity": "sha512-dwsoQlS7h9hMeYUq1W++23NDcBLV4KqONnITDV9DjfS3q1SgDGVrBdvvTLUotWtPSD7asWDV9/CmsZPy8Hf70A==",
-      "license": "MIT",
-      "engines": {
-        "node": ">=6"
-      }
-    },
-    "node_modules/fast-safe-stringify": {
-      "version": "2.1.1",
-      "resolved": "https://registry.npmjs.org/fast-safe-stringify/-/fast-safe-stringify-2.1.1.tgz",
-      "integrity": "sha512-W+KJc2dmILlPplD/H4K9l9LcAHAfPtP6BY84uVLXQ6Evcz9Lcg33Y2z1IVblT6xdY54PXYVHEv+0Wpq8Io6zkA==",
-      "license": "MIT"
-    },
     "node_modules/fast-sha256": {
       "version": "1.3.0",
       "resolved": "https://registry.npmjs.org/fast-sha256/-/fast-sha256-1.3.0.tgz",
@@ -11735,6 +10938,21 @@
         "bser": "2.1.1"
       }
     },
+    "node_modules/fdir": {
+      "version": "6.4.3",
+      "resolved": "https://registry.npmjs.org/fdir/-/fdir-6.4.3.tgz",
+      "integrity": "sha512-PMXmW2y1hDDfTSRc9gaXIuCCRpuoz3Kaz8cUelp3smouvfT632ozg2vrT6lJsHKKOF59YLbOGfAWGUcKEfRMQw==",
+      "dev": true,
+      "license": "MIT",
+      "peerDependencies": {
+        "picomatch": "^3 || ^4"
+      },
+      "peerDependenciesMeta": {
+        "picomatch": {
+          "optional": true
+        }
+      }
+    },
     "node_modules/fetch-blob": {
       "version": "3.2.0",
       "resolved": "https://registry.npmjs.org/fetch-blob/-/fetch-blob-3.2.0.tgz",
@@ -11759,16 +10977,6 @@
         "node": "^12.20 || >= 14.13"
       }
     },
-    "node_modules/fetch-blob/node_modules/web-streams-polyfill": {
-      "version": "3.3.3",
-      "resolved": "https://registry.npmjs.org/web-streams-polyfill/-/web-streams-polyfill-3.3.3.tgz",
-      "integrity": "sha512-d2JWLCivmZYTSIoge9MsgFCZrt571BikcWGYkjC1khllbTeDlGqZ2D8vD8E/lJa8WGWbb7Plm8/XJYV7IJHZZw==",
-      "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">= 8"
-      }
-    },
     "node_modules/fflate": {
       "version": "0.8.2",
       "resolved": "https://registry.npmjs.org/fflate/-/fflate-0.8.2.tgz",
@@ -11867,6 +11075,28 @@
         "node": "^10.12.0 || >=12.0.0"
       }
     },
+    "node_modules/flat-cache/node_modules/glob": {
+      "version": "7.2.3",
+      "resolved": "https://registry.npmjs.org/glob/-/glob-7.2.3.tgz",
+      "integrity": "sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==",
+      "deprecated": "Glob versions prior to v9 are no longer supported",
+      "dev": true,
+      "license": "ISC",
+      "dependencies": {
+        "fs.realpath": "^1.0.0",
+        "inflight": "^1.0.4",
+        "inherits": "2",
+        "minimatch": "^3.1.1",
+        "once": "^1.3.0",
+        "path-is-absolute": "^1.0.0"
+      },
+      "engines": {
+        "node": "*"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
+      }
+    },
     "node_modules/flat-cache/node_modules/rimraf": {
       "version": "3.0.2",
       "resolved": "https://registry.npmjs.org/rimraf/-/rimraf-3.0.2.tgz",
@@ -11990,6 +11220,15 @@
         "node": ">= 12.20"
       }
     },
+    "node_modules/formdata-node/node_modules/web-streams-polyfill": {
+      "version": "4.0.0-beta.3",
+      "resolved": "https://registry.npmjs.org/web-streams-polyfill/-/web-streams-polyfill-4.0.0-beta.3.tgz",
+      "integrity": "sha512-QW95TCTaHmsYfHDybGMwO5IJIM93I/6vTRk+daHTWFPhwh+C8Cg7j7XyKrwrj8Ib6vYXe0ocYNrmzY4xAAN6ug==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 14"
+      }
+    },
     "node_modules/formdata-polyfill": {
       "version": "4.0.10",
       "resolved": "https://registry.npmjs.org/formdata-polyfill/-/formdata-polyfill-4.0.10.tgz",
@@ -12138,6 +11377,7 @@
       "version": "2.0.5",
       "resolved": "https://registry.npmjs.org/get-caller-file/-/get-caller-file-2.0.5.tgz",
       "integrity": "sha512-DyFP3BM/3YHTQOCUL/w0OZHR0lpKeGrxotcHWcqNEdnltqFwXVfhEBQ94eIo34AfQpo0rGki4cyIiftY06h2Fg==",
+      "dev": true,
       "license": "ISC",
       "engines": {
         "node": "6.* || 8.* || >= 10.*"
@@ -12247,28 +11487,6 @@
         "url": "https://github.com/privatenumber/get-tsconfig?sponsor=1"
       }
     },
-    "node_modules/glob": {
-      "version": "7.2.3",
-      "resolved": "https://registry.npmjs.org/glob/-/glob-7.2.3.tgz",
-      "integrity": "sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==",
-      "deprecated": "Glob versions prior to v9 are no longer supported",
-      "dev": true,
-      "license": "ISC",
-      "dependencies": {
-        "fs.realpath": "^1.0.0",
-        "inflight": "^1.0.4",
-        "inherits": "2",
-        "minimatch": "^3.1.1",
-        "once": "^1.3.0",
-        "path-is-absolute": "^1.0.0"
-      },
-      "engines": {
-        "node": "*"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/isaacs"
-      }
-    },
     "node_modules/glob-parent": {
       "version": "6.0.2",
       "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-6.0.2.tgz",
@@ -12492,29 +11710,6 @@
         "node": ">= 0.4"
       }
     },
-    "node_modules/help-me": {
-      "version": "5.0.0",
-      "resolved": "https://registry.npmjs.org/help-me/-/help-me-5.0.0.tgz",
-      "integrity": "sha512-7xgomUX6ADmcYzFik0HzAxh/73YlKR9bmFzf51CZwR+b6YtzU2m0u49hQCqV6SvlqIqsaxovfwdvbnsw3b/zpg==",
-      "license": "MIT"
-    },
-    "node_modules/hexer": {
-      "version": "1.5.0",
-      "resolved": "https://registry.npmjs.org/hexer/-/hexer-1.5.0.tgz",
-      "integrity": "sha512-dyrPC8KzBzUJ19QTIo1gXNqIISRXQ0NwteW6OeQHRN4ZuZeHkdODfj0zHBdOlHbRY8GqbqK57C9oWSvQZizFsg==",
-      "dependencies": {
-        "ansi-color": "^0.2.1",
-        "minimist": "^1.1.0",
-        "process": "^0.10.0",
-        "xtend": "^4.0.0"
-      },
-      "bin": {
-        "hexer": "cli.js"
-      },
-      "engines": {
-        "node": ">= 0.10.x"
-      }
-    },
     "node_modules/howler": {
       "version": "2.2.4",
       "resolved": "https://registry.npmjs.org/howler/-/howler-2.2.4.tgz",
@@ -12590,18 +11785,28 @@
         "node": ">= 14"
       }
     },
+    "node_modules/http-proxy-agent/node_modules/agent-base": {
+      "version": "7.1.3",
+      "resolved": "https://registry.npmjs.org/agent-base/-/agent-base-7.1.3.tgz",
+      "integrity": "sha512-jRR5wdylq8CkOe6hei19GGZnxM6rBGwFl3Bg0YItGDimvjGtAvdZk4Pu6Cl4u4Igsws4a1fd1Vq3ezrhn4KmFw==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">= 14"
+      }
+    },
     "node_modules/https-proxy-agent": {
-      "version": "7.0.6",
-      "resolved": "https://registry.npmjs.org/https-proxy-agent/-/https-proxy-agent-7.0.6.tgz",
-      "integrity": "sha512-vK9P5/iUfdl95AI+JVyUuIcVtd4ofvtrOr3HNtM2yxC9bnMbEdp3x01OhQNnjb8IJYi38VlTE3mBXwcfvywuSw==",
+      "version": "5.0.1",
+      "resolved": "https://registry.npmjs.org/https-proxy-agent/-/https-proxy-agent-5.0.1.tgz",
+      "integrity": "sha512-dFcAjpTQFgoLMzC2VwU+C/CbS7uRL0lWmxDITmqm7C+7F0Odmj6s9l6alZc6AELXhrnggM2CeWSXHGOdX2YtwA==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
-        "agent-base": "^7.1.2",
+        "agent-base": "6",
         "debug": "4"
       },
       "engines": {
-        "node": ">= 14"
+        "node": ">= 6"
       }
     },
     "node_modules/human-signals": {
@@ -12678,18 +11883,6 @@
         "url": "https://github.com/sponsors/sindresorhus"
       }
     },
-    "node_modules/import-in-the-middle": {
-      "version": "1.13.1",
-      "resolved": "https://registry.npmjs.org/import-in-the-middle/-/import-in-the-middle-1.13.1.tgz",
-      "integrity": "sha512-k2V9wNm9B+ysuelDTHjI9d5KPc4l8zAZTGqj+pcynvWkypZd857ryzN8jNC7Pg2YZXNMJcHRPpaDyCBbNyVRpA==",
-      "license": "Apache-2.0",
-      "dependencies": {
-        "acorn": "^8.14.0",
-        "acorn-import-attributes": "^1.9.5",
-        "cjs-module-lexer": "^1.2.2",
-        "module-details-from-path": "^1.0.3"
-      }
-    },
     "node_modules/import-local": {
       "version": "3.2.0",
       "resolved": "https://registry.npmjs.org/import-local/-/import-local-3.2.0.tgz",
@@ -12889,19 +12082,6 @@
         "semver": "^7.6.3"
       }
     },
-    "node_modules/is-bun-module/node_modules/semver": {
-      "version": "7.7.1",
-      "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.1.tgz",
-      "integrity": "sha512-hlq8tAfn0m/61p4BVRcPzIGr6LKiMwo4VM6dGi6pt4qcRkmNzTcWq6eCEjEh+qXjkMDvPlOFFSGwQjoEa6gyMA==",
-      "dev": true,
-      "license": "ISC",
-      "bin": {
-        "semver": "bin/semver.js"
-      },
-      "engines": {
-        "node": ">=10"
-      }
-    },
     "node_modules/is-callable": {
       "version": "1.2.7",
       "resolved": "https://registry.npmjs.org/is-callable/-/is-callable-1.2.7.tgz",
@@ -12918,6 +12098,7 @@
       "version": "2.16.1",
       "resolved": "https://registry.npmjs.org/is-core-module/-/is-core-module-2.16.1.tgz",
       "integrity": "sha512-UfoeMA6fIJ8wTYFEUjelnaGI67v6+N7qXJEvQuIGa99l4xsCruSYOVSQ0uPANn4dAzm8lkYPaKLrrijLq7x23w==",
+      "dev": true,
       "license": "MIT",
       "dependencies": {
         "hasown": "^2.0.2"
@@ -13371,19 +12552,6 @@
         "node": ">=10"
       }
     },
-    "node_modules/istanbul-lib-instrument/node_modules/semver": {
-      "version": "7.7.1",
-      "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.1.tgz",
-      "integrity": "sha512-hlq8tAfn0m/61p4BVRcPzIGr6LKiMwo4VM6dGi6pt4qcRkmNzTcWq6eCEjEh+qXjkMDvPlOFFSGwQjoEa6gyMA==",
-      "dev": true,
-      "license": "ISC",
-      "bin": {
-        "semver": "bin/semver.js"
-      },
-      "engines": {
-        "node": ">=10"
-      }
-    },
     "node_modules/istanbul-lib-report": {
       "version": "3.0.1",
       "resolved": "https://registry.npmjs.org/istanbul-lib-report/-/istanbul-lib-report-3.0.1.tgz",
@@ -13480,31 +12648,6 @@
         "url": "https://github.com/sponsors/isaacs"
       }
     },
-    "node_modules/jaeger-client": {
-      "version": "3.19.0",
-      "resolved": "https://registry.npmjs.org/jaeger-client/-/jaeger-client-3.19.0.tgz",
-      "integrity": "sha512-M0c7cKHmdyEUtjemnJyx/y9uX16XHocL46yQvyqDlPdvAcwPDbHrIbKjQdBqtiE4apQ/9dmr+ZLJYYPGnurgpw==",
-      "license": "Apache-2.0",
-      "dependencies": {
-        "node-int64": "^0.4.0",
-        "opentracing": "^0.14.4",
-        "thriftrw": "^3.5.0",
-        "uuid": "^8.3.2",
-        "xorshift": "^1.1.1"
-      },
-      "engines": {
-        "node": ">=10"
-      }
-    },
-    "node_modules/jaeger-client/node_modules/uuid": {
-      "version": "8.3.2",
-      "resolved": "https://registry.npmjs.org/uuid/-/uuid-8.3.2.tgz",
-      "integrity": "sha512-+NYs2QeMWy+GWFOEm9xnn6HCDp0l7QBD7ml8zLUmJ+93Q5NF0NocErnwkTkXVFNiX3/fpC6afS8Dhb/gz7R7eg==",
-      "license": "MIT",
-      "bin": {
-        "uuid": "dist/bin/uuid"
-      }
-    },
     "node_modules/jest": {
       "version": "29.7.0",
       "resolved": "https://registry.npmjs.org/jest/-/jest-29.7.0.tgz",
@@ -13780,6 +12923,28 @@
         "url": "https://github.com/chalk/ansi-styles?sponsor=1"
       }
     },
+    "node_modules/jest-config/node_modules/glob": {
+      "version": "7.2.3",
+      "resolved": "https://registry.npmjs.org/glob/-/glob-7.2.3.tgz",
+      "integrity": "sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==",
+      "deprecated": "Glob versions prior to v9 are no longer supported",
+      "dev": true,
+      "license": "ISC",
+      "dependencies": {
+        "fs.realpath": "^1.0.0",
+        "inflight": "^1.0.4",
+        "inherits": "2",
+        "minimatch": "^3.1.1",
+        "once": "^1.3.0",
+        "path-is-absolute": "^1.0.0"
+      },
+      "engines": {
+        "node": "*"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
+      }
+    },
     "node_modules/jest-config/node_modules/pretty-format": {
       "version": "29.7.0",
       "resolved": "https://registry.npmjs.org/pretty-format/-/pretty-format-29.7.0.tgz",
@@ -13986,19 +13151,6 @@
         }
       }
     },
-    "node_modules/jest-environment-jsdom/node_modules/agent-base": {
-      "version": "6.0.2",
-      "resolved": "https://registry.npmjs.org/agent-base/-/agent-base-6.0.2.tgz",
-      "integrity": "sha512-RZNwNclF7+MS/8bDg70amg32dyeZGZxiDuQmZxKLAlQjr3jGyLx+4Kkk58UO7D2QdgFIQCovuSuZESne6RG6XQ==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "debug": "4"
-      },
-      "engines": {
-        "node": ">= 6.0.0"
-      }
-    },
     "node_modules/jest-environment-jsdom/node_modules/cssstyle": {
       "version": "2.3.0",
       "resolved": "https://registry.npmjs.org/cssstyle/-/cssstyle-2.3.0.tgz",
@@ -14062,20 +13214,6 @@
         "node": ">= 6"
       }
     },
-    "node_modules/jest-environment-jsdom/node_modules/https-proxy-agent": {
-      "version": "5.0.1",
-      "resolved": "https://registry.npmjs.org/https-proxy-agent/-/https-proxy-agent-5.0.1.tgz",
-      "integrity": "sha512-dFcAjpTQFgoLMzC2VwU+C/CbS7uRL0lWmxDITmqm7C+7F0Odmj6s9l6alZc6AELXhrnggM2CeWSXHGOdX2YtwA==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "agent-base": "6",
-        "debug": "4"
-      },
-      "engines": {
-        "node": ">= 6"
-      }
-    },
     "node_modules/jest-environment-jsdom/node_modules/iconv-lite": {
       "version": "0.6.3",
       "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.6.3.tgz",
@@ -14705,6 +13843,28 @@
         "url": "https://github.com/chalk/chalk?sponsor=1"
       }
     },
+    "node_modules/jest-runtime/node_modules/glob": {
+      "version": "7.2.3",
+      "resolved": "https://registry.npmjs.org/glob/-/glob-7.2.3.tgz",
+      "integrity": "sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==",
+      "deprecated": "Glob versions prior to v9 are no longer supported",
+      "dev": true,
+      "license": "ISC",
+      "dependencies": {
+        "fs.realpath": "^1.0.0",
+        "inflight": "^1.0.4",
+        "inherits": "2",
+        "minimatch": "^3.1.1",
+        "once": "^1.3.0",
+        "path-is-absolute": "^1.0.0"
+      },
+      "engines": {
+        "node": "*"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
+      }
+    },
     "node_modules/jest-snapshot": {
       "version": "29.7.0",
       "resolved": "https://registry.npmjs.org/jest-snapshot/-/jest-snapshot-29.7.0.tgz",
@@ -14792,19 +13952,6 @@
       "dev": true,
       "license": "MIT"
     },
-    "node_modules/jest-snapshot/node_modules/semver": {
-      "version": "7.7.1",
-      "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.1.tgz",
-      "integrity": "sha512-hlq8tAfn0m/61p4BVRcPzIGr6LKiMwo4VM6dGi6pt4qcRkmNzTcWq6eCEjEh+qXjkMDvPlOFFSGwQjoEa6gyMA==",
-      "dev": true,
-      "license": "ISC",
-      "bin": {
-        "semver": "bin/semver.js"
-      },
-      "engines": {
-        "node": ">=10"
-      }
-    },
     "node_modules/jest-util": {
       "version": "29.7.0",
       "resolved": "https://registry.npmjs.org/jest-util/-/jest-util-29.7.0.tgz",
@@ -14856,6 +14003,19 @@
         "url": "https://github.com/chalk/chalk?sponsor=1"
       }
     },
+    "node_modules/jest-util/node_modules/picomatch": {
+      "version": "2.3.1",
+      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz",
+      "integrity": "sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=8.6"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/jonschlinkert"
+      }
+    },
     "node_modules/jest-validate": {
       "version": "29.7.0",
       "resolved": "https://registry.npmjs.org/jest-validate/-/jest-validate-29.7.0.tgz",
@@ -15024,15 +14184,6 @@
         "jiti": "bin/jiti.js"
       }
     },
-    "node_modules/joycon": {
-      "version": "3.1.1",
-      "resolved": "https://registry.npmjs.org/joycon/-/joycon-3.1.1.tgz",
-      "integrity": "sha512-34wB/Y7MW7bzjKRjUKTa46I2Z7eV62Rkhva+KkopW7Qvv/OSWBqvkSY7vusOPrNuZcUG3tApvdVgNB8POj3SPw==",
-      "license": "MIT",
-      "engines": {
-        "node": ">=10"
-      }
-    },
     "node_modules/js-cookie": {
       "version": "3.0.5",
       "resolved": "https://registry.npmjs.org/js-cookie/-/js-cookie-3.0.5.tgz",
@@ -15112,6 +14263,30 @@
         }
       }
     },
+    "node_modules/jsdom/node_modules/agent-base": {
+      "version": "7.1.3",
+      "resolved": "https://registry.npmjs.org/agent-base/-/agent-base-7.1.3.tgz",
+      "integrity": "sha512-jRR5wdylq8CkOe6hei19GGZnxM6rBGwFl3Bg0YItGDimvjGtAvdZk4Pu6Cl4u4Igsws4a1fd1Vq3ezrhn4KmFw==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">= 14"
+      }
+    },
+    "node_modules/jsdom/node_modules/https-proxy-agent": {
+      "version": "7.0.6",
+      "resolved": "https://registry.npmjs.org/https-proxy-agent/-/https-proxy-agent-7.0.6.tgz",
+      "integrity": "sha512-vK9P5/iUfdl95AI+JVyUuIcVtd4ofvtrOr3HNtM2yxC9bnMbEdp3x01OhQNnjb8IJYi38VlTE3mBXwcfvywuSw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "agent-base": "^7.1.2",
+        "debug": "4"
+      },
+      "engines": {
+        "node": ">= 14"
+      }
+    },
     "node_modules/jsdom/node_modules/tr46": {
       "version": "5.0.0",
       "resolved": "https://registry.npmjs.org/tr46/-/tr46-5.0.0.tgz",
@@ -15541,12 +14716,6 @@
       "dev": true,
       "license": "MIT"
     },
-    "node_modules/lodash.camelcase": {
-      "version": "4.3.0",
-      "resolved": "https://registry.npmjs.org/lodash.camelcase/-/lodash.camelcase-4.3.0.tgz",
-      "integrity": "sha512-TwuEnCnxbc3rAvhf/LbG7tJUDzhqXyFnv3dtzLOPgCG/hODL7WFnsbwktkD7yUV0RrreP/l1PALq/YSg6VvjlA==",
-      "license": "MIT"
-    },
     "node_modules/lodash.debounce": {
       "version": "4.0.8",
       "resolved": "https://registry.npmjs.org/lodash.debounce/-/lodash.debounce-4.0.8.tgz",
@@ -15672,12 +14841,6 @@
         "url": "https://github.com/chalk/strip-ansi?sponsor=1"
       }
     },
-    "node_modules/long": {
-      "version": "5.3.1",
-      "resolved": "https://registry.npmjs.org/long/-/long-5.3.1.tgz",
-      "integrity": "sha512-ka87Jz3gcx/I7Hal94xaN2tZEOPoUOEVftkQqZx2EeQRN7LGdfLlI3FvZ+7WDplm+vK2Urx9ULrvSowtdCieng==",
-      "license": "Apache-2.0"
-    },
     "node_modules/loose-envify": {
       "version": "1.4.0",
       "resolved": "https://registry.npmjs.org/loose-envify/-/loose-envify-1.4.0.tgz",
@@ -15762,26 +14925,6 @@
         "url": "https://github.com/sponsors/sindresorhus"
       }
     },
-    "node_modules/make-dir/node_modules/semver": {
-      "version": "7.7.1",
-      "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.1.tgz",
-      "integrity": "sha512-hlq8tAfn0m/61p4BVRcPzIGr6LKiMwo4VM6dGi6pt4qcRkmNzTcWq6eCEjEh+qXjkMDvPlOFFSGwQjoEa6gyMA==",
-      "dev": true,
-      "license": "ISC",
-      "bin": {
-        "semver": "bin/semver.js"
-      },
-      "engines": {
-        "node": ">=10"
-      }
-    },
-    "node_modules/make-error": {
-      "version": "1.3.6",
-      "resolved": "https://registry.npmjs.org/make-error/-/make-error-1.3.6.tgz",
-      "integrity": "sha512-s8UhlNe7vPKomQhC1qFelMokr/Sc3AgNbso3n74mVPA5LTZwkB9NlXf4XPamLxJE8h0gh73rM94xvwRT2CVInw==",
-      "dev": true,
-      "license": "ISC"
-    },
     "node_modules/makeerror": {
       "version": "1.0.12",
       "resolved": "https://registry.npmjs.org/makeerror/-/makeerror-1.0.12.tgz",
@@ -15878,6 +15021,19 @@
         "node": ">=8.6"
       }
     },
+    "node_modules/micromatch/node_modules/picomatch": {
+      "version": "2.3.1",
+      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz",
+      "integrity": "sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=8.6"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/jonschlinkert"
+      }
+    },
     "node_modules/mime": {
       "version": "1.6.0",
       "resolved": "https://registry.npmjs.org/mime/-/mime-1.6.0.tgz",
@@ -15961,27 +15117,12 @@
       "version": "1.2.8",
       "resolved": "https://registry.npmjs.org/minimist/-/minimist-1.2.8.tgz",
       "integrity": "sha512-2yyAR8qBkN3YuheJanUpWC5U3bb5osDywNB8RzDVlDwDHbocAJveqqj1u8+SVD7jkWT4yvsHCpWqqWqAxb0zCA==",
+      "dev": true,
       "license": "MIT",
       "funding": {
         "url": "https://github.com/sponsors/ljharb"
       }
     },
-    "node_modules/minipass": {
-      "version": "7.1.2",
-      "resolved": "https://registry.npmjs.org/minipass/-/minipass-7.1.2.tgz",
-      "integrity": "sha512-qOOzS1cBTWYF4BH8fVePDBOO9iptMnGUEZwNc/cMWnTV2nVLZ7VoNWEPHkYczZA0pdoA7dl6e7FL659nX9S2aw==",
-      "dev": true,
-      "license": "ISC",
-      "engines": {
-        "node": ">=16 || 14 >=14.17"
-      }
-    },
-    "node_modules/module-details-from-path": {
-      "version": "1.0.3",
-      "resolved": "https://registry.npmjs.org/module-details-from-path/-/module-details-from-path-1.0.3.tgz",
-      "integrity": "sha512-ySViT69/76t8VhE1xXHK6Ch4NcDd26gx0MzKXLO+F7NOtnqH68d9zF94nT8ZWSxXh8ELOERsnJO/sWt1xZYw5A==",
-      "license": "MIT"
-    },
     "node_modules/motion-dom": {
       "version": "11.18.1",
       "resolved": "https://registry.npmjs.org/motion-dom/-/motion-dom-11.18.1.tgz",
@@ -16026,9 +15167,9 @@
       }
     },
     "node_modules/nanoid": {
-      "version": "3.3.9",
-      "resolved": "https://registry.npmjs.org/nanoid/-/nanoid-3.3.9.tgz",
-      "integrity": "sha512-SppoicMGpZvbF1l3z4x7No3OlIjP7QJvC9XR7AhZr1kL133KHnKPztkKDc+Ir4aJ/1VhTySrtKhrsycmrMQfvg==",
+      "version": "3.3.8",
+      "resolved": "https://registry.npmjs.org/nanoid/-/nanoid-3.3.8.tgz",
+      "integrity": "sha512-WNLf5Sd8oZxOm+TzppcYk8gVOgP+l58xNy58D0nbUnOxOWRWvlcCV4kUF7ltmI6PsrLl/BgKEyS4mqsGChFN0w==",
       "funding": [
         {
           "type": "github",
@@ -16200,6 +15341,7 @@
       "version": "0.4.0",
       "resolved": "https://registry.npmjs.org/node-int64/-/node-int64-0.4.0.tgz",
       "integrity": "sha512-O5lz91xSOeoXP6DulyHfllpq+Eg00MWitZIbtPfoSEvqIHdl5gfcY6hYzDWnj0qD5tz52PI08u9qUvSVeUBeHw==",
+      "dev": true,
       "license": "MIT"
     },
     "node_modules/node-releases": {
@@ -16391,15 +15533,6 @@
         "url": "https://github.com/sponsors/ljharb"
       }
     },
-    "node_modules/on-exit-leak-free": {
-      "version": "2.1.2",
-      "resolved": "https://registry.npmjs.org/on-exit-leak-free/-/on-exit-leak-free-2.1.2.tgz",
-      "integrity": "sha512-0eJJY6hXLGf1udHwfNftBqH+g73EU4B504nZeKpz1sYRKafAghwxEJunB2O7rDZkL4PGfsMVnTXZ2EjibbqcsA==",
-      "license": "MIT",
-      "engines": {
-        "node": ">=14.0.0"
-      }
-    },
     "node_modules/on-finished": {
       "version": "2.4.1",
       "resolved": "https://registry.npmjs.org/on-finished/-/on-finished-2.4.1.tgz",
@@ -16438,9 +15571,9 @@
       }
     },
     "node_modules/openai": {
-      "version": "4.86.2",
-      "resolved": "https://registry.npmjs.org/openai/-/openai-4.86.2.tgz",
-      "integrity": "sha512-nvYeFjmjdSu6/msld+22JoUlCICNk/lUFpSMmc6KNhpeNLpqL70TqbD/8Vura/tFmYqHKW0trcjgPwUpKSPwaA==",
+      "version": "4.86.1",
+      "resolved": "https://registry.npmjs.org/openai/-/openai-4.86.1.tgz",
+      "integrity": "sha512-x3iCLyaC3yegFVZaxOmrYJjitKxZ9hpVbLi+ZlT5UHuHTMlEQEbKXkGOM78z9qm2T5GF+XRUZCP2/aV4UPFPJQ==",
       "license": "Apache-2.0",
       "dependencies": {
         "@types/node": "^18.11.18",
@@ -16512,15 +15645,6 @@
         "opener": "bin/opener-bin.js"
       }
     },
-    "node_modules/opentracing": {
-      "version": "0.14.7",
-      "resolved": "https://registry.npmjs.org/opentracing/-/opentracing-0.14.7.tgz",
-      "integrity": "sha512-vz9iS7MJ5+Bp1URw8Khvdyw1H/hGvzHWlKQ7eRrQojSCDL1/SrWfrY9QebLw97n2deyRtzHRC3MkQfVNUCo91Q==",
-      "license": "Apache-2.0",
-      "engines": {
-        "node": ">=0.10"
-      }
-    },
     "node_modules/opossum": {
       "version": "8.4.0",
       "resolved": "https://registry.npmjs.org/opossum/-/opossum-8.4.0.tgz",
@@ -16703,33 +15827,41 @@
       "version": "1.0.7",
       "resolved": "https://registry.npmjs.org/path-parse/-/path-parse-1.0.7.tgz",
       "integrity": "sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw==",
+      "dev": true,
       "license": "MIT"
     },
     "node_modules/path-scurry": {
-      "version": "2.0.0",
-      "resolved": "https://registry.npmjs.org/path-scurry/-/path-scurry-2.0.0.tgz",
-      "integrity": "sha512-ypGJsmGtdXUOeM5u93TyeIEfEhM6s+ljAhrk5vAvSx8uyY/02OvrZnA0YNGUrPXfpJMgI1ODd3nwz8Npx4O4cg==",
+      "version": "1.11.1",
+      "resolved": "https://registry.npmjs.org/path-scurry/-/path-scurry-1.11.1.tgz",
+      "integrity": "sha512-Xa4Nw17FS9ApQFJ9umLiJS4orGjm7ZzwUrwamcGQuHSzDyth9boKDaycYdDcZDuqYATXw4HFXgaqWTctW/v1HA==",
       "dev": true,
       "license": "BlueOak-1.0.0",
       "dependencies": {
-        "lru-cache": "^11.0.0",
-        "minipass": "^7.1.2"
+        "lru-cache": "^10.2.0",
+        "minipass": "^5.0.0 || ^6.0.2 || ^7.0.0"
       },
       "engines": {
-        "node": "20 || >=22"
+        "node": ">=16 || 14 >=14.18"
       },
       "funding": {
         "url": "https://github.com/sponsors/isaacs"
       }
     },
     "node_modules/path-scurry/node_modules/lru-cache": {
-      "version": "11.0.2",
-      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-11.0.2.tgz",
-      "integrity": "sha512-123qHRfJBmo2jXDbo/a5YOQrJoHF/GNQTLzQ5+IdK5pWpceK17yRc6ozlWd25FxvGKQbIUs91fDFkXmDHTKcyA==",
+      "version": "10.4.3",
+      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-10.4.3.tgz",
+      "integrity": "sha512-JNAzZcXrCt42VGLuYz0zfAzDfAvJWW6AfYlDBQyDV5DClI2m5sAmK+OIO7s59XfsRsWHp02jAJrRadPRGTt6SQ==",
+      "dev": true,
+      "license": "ISC"
+    },
+    "node_modules/path-scurry/node_modules/minipass": {
+      "version": "7.1.2",
+      "resolved": "https://registry.npmjs.org/minipass/-/minipass-7.1.2.tgz",
+      "integrity": "sha512-qOOzS1cBTWYF4BH8fVePDBOO9iptMnGUEZwNc/cMWnTV2nVLZ7VoNWEPHkYczZA0pdoA7dl6e7FL659nX9S2aw==",
       "dev": true,
       "license": "ISC",
       "engines": {
-        "node": "20 || >=22"
+        "node": ">=16 || 14 >=14.17"
       }
     },
     "node_modules/path-to-regexp": {
@@ -16772,13 +15904,13 @@
       "license": "ISC"
     },
     "node_modules/picomatch": {
-      "version": "2.3.1",
-      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz",
-      "integrity": "sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==",
+      "version": "4.0.2",
+      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-4.0.2.tgz",
+      "integrity": "sha512-M7BAV6Rlcy5u+m6oPhAPFgJTzAioX/6B0DxyvDlo9l8+T3nLKbrczg2WLUyzd45L8RqfUMyGPzekbMvX2Ldkwg==",
       "dev": true,
       "license": "MIT",
       "engines": {
-        "node": ">=8.6"
+        "node": ">=12"
       },
       "funding": {
         "url": "https://github.com/sponsors/jonschlinkert"
@@ -16807,67 +15939,6 @@
         "node": ">=0.10.0"
       }
     },
-    "node_modules/pino": {
-      "version": "9.6.0",
-      "resolved": "https://registry.npmjs.org/pino/-/pino-9.6.0.tgz",
-      "integrity": "sha512-i85pKRCt4qMjZ1+L7sy2Ag4t1atFcdbEt76+7iRJn1g2BvsnRMGu9p8pivl9fs63M2kF/A0OacFZhTub+m/qMg==",
-      "license": "MIT",
-      "dependencies": {
-        "atomic-sleep": "^1.0.0",
-        "fast-redact": "^3.1.1",
-        "on-exit-leak-free": "^2.1.0",
-        "pino-abstract-transport": "^2.0.0",
-        "pino-std-serializers": "^7.0.0",
-        "process-warning": "^4.0.0",
-        "quick-format-unescaped": "^4.0.3",
-        "real-require": "^0.2.0",
-        "safe-stable-stringify": "^2.3.1",
-        "sonic-boom": "^4.0.1",
-        "thread-stream": "^3.0.0"
-      },
-      "bin": {
-        "pino": "bin.js"
-      }
-    },
-    "node_modules/pino-abstract-transport": {
-      "version": "2.0.0",
-      "resolved": "https://registry.npmjs.org/pino-abstract-transport/-/pino-abstract-transport-2.0.0.tgz",
-      "integrity": "sha512-F63x5tizV6WCh4R6RHyi2Ml+M70DNRXt/+HANowMflpgGFMAym/VKm6G7ZOQRjqN7XbGxK1Lg9t6ZrtzOaivMw==",
-      "license": "MIT",
-      "dependencies": {
-        "split2": "^4.0.0"
-      }
-    },
-    "node_modules/pino-pretty": {
-      "version": "13.0.0",
-      "resolved": "https://registry.npmjs.org/pino-pretty/-/pino-pretty-13.0.0.tgz",
-      "integrity": "sha512-cQBBIVG3YajgoUjo1FdKVRX6t9XPxwB9lcNJVD5GCnNM4Y6T12YYx8c6zEejxQsU0wrg9TwmDulcE9LR7qcJqA==",
-      "license": "MIT",
-      "dependencies": {
-        "colorette": "^2.0.7",
-        "dateformat": "^4.6.3",
-        "fast-copy": "^3.0.2",
-        "fast-safe-stringify": "^2.1.1",
-        "help-me": "^5.0.0",
-        "joycon": "^3.1.1",
-        "minimist": "^1.2.6",
-        "on-exit-leak-free": "^2.1.0",
-        "pino-abstract-transport": "^2.0.0",
-        "pump": "^3.0.0",
-        "secure-json-parse": "^2.4.0",
-        "sonic-boom": "^4.0.1",
-        "strip-json-comments": "^3.1.1"
-      },
-      "bin": {
-        "pino-pretty": "bin.js"
-      }
-    },
-    "node_modules/pino-std-serializers": {
-      "version": "7.0.0",
-      "resolved": "https://registry.npmjs.org/pino-std-serializers/-/pino-std-serializers-7.0.0.tgz",
-      "integrity": "sha512-e906FRY0+tV27iq4juKzSYPbUj2do2X2JX4EzSca1631EB2QJQUqGbDuERal7LCtOpxl6x3+nvo9NPZcmjkiFA==",
-      "license": "MIT"
-    },
     "node_modules/pirates": {
       "version": "4.0.6",
       "resolved": "https://registry.npmjs.org/pirates/-/pirates-4.0.6.tgz",
@@ -17229,29 +16300,13 @@
         "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
       }
     },
-    "node_modules/process": {
-      "version": "0.10.1",
-      "resolved": "https://registry.npmjs.org/process/-/process-0.10.1.tgz",
-      "integrity": "sha512-dyIett8dgGIZ/TXKUzeYExt7WA6ldDzys9vTDU/cCA9L17Ypme+KzS+NjQCjpn9xsvi/shbMC+yP/BcFMBz0NA==",
-      "engines": {
-        "node": ">= 0.6.0"
-      }
-    },
-    "node_modules/process-warning": {
-      "version": "4.0.1",
-      "resolved": "https://registry.npmjs.org/process-warning/-/process-warning-4.0.1.tgz",
-      "integrity": "sha512-3c2LzQ3rY9d0hc1emcsHhfT9Jwz0cChib/QN89oME2R451w5fy3f0afAhERFZAwrbDU43wk12d0ORBpDVME50Q==",
-      "funding": [
-        {
-          "type": "github",
-          "url": "https://github.com/sponsors/fastify"
-        },
-        {
-          "type": "opencollective",
-          "url": "https://opencollective.com/fastify"
-        }
-      ],
-      "license": "MIT"
+    "node_modules/pretty-format/node_modules/react-is": {
+      "version": "17.0.2",
+      "resolved": "https://registry.npmjs.org/react-is/-/react-is-17.0.2.tgz",
+      "integrity": "sha512-w2GsyukL62IJnlaff/nRegPQR94C/XXamvMWmSHRJ4y7Ts/4ocGRmTHvOs8PSE6pB3dWOrD/nueuU5sduBsQ4w==",
+      "dev": true,
+      "license": "MIT",
+      "peer": true
     },
     "node_modules/prompts": {
       "version": "2.4.2",
@@ -17279,37 +16334,6 @@
         "react-is": "^16.13.1"
       }
     },
-    "node_modules/prop-types/node_modules/react-is": {
-      "version": "16.13.1",
-      "resolved": "https://registry.npmjs.org/react-is/-/react-is-16.13.1.tgz",
-      "integrity": "sha512-24e6ynE2H+OKt4kqsOvNd8kBpV65zoxbA4BVsEOB3ARVWQki/DHzaUoC5KuON/BiccDaCCTZBuOcfZs70kR8bQ==",
-      "dev": true,
-      "license": "MIT"
-    },
-    "node_modules/protobufjs": {
-      "version": "7.4.0",
-      "resolved": "https://registry.npmjs.org/protobufjs/-/protobufjs-7.4.0.tgz",
-      "integrity": "sha512-mRUWCc3KUU4w1jU8sGxICXH/gNS94DvI1gxqDvBzhj1JpcsimQkYiOJfwsPUykUI5ZaspFbSgmBLER8IrQ3tqw==",
-      "hasInstallScript": true,
-      "license": "BSD-3-Clause",
-      "dependencies": {
-        "@protobufjs/aspromise": "^1.1.2",
-        "@protobufjs/base64": "^1.1.2",
-        "@protobufjs/codegen": "^2.0.4",
-        "@protobufjs/eventemitter": "^1.1.0",
-        "@protobufjs/fetch": "^1.1.0",
-        "@protobufjs/float": "^1.0.2",
-        "@protobufjs/inquire": "^1.1.0",
-        "@protobufjs/path": "^1.1.2",
-        "@protobufjs/pool": "^1.1.0",
-        "@protobufjs/utf8": "^1.1.0",
-        "@types/node": ">=13.7.0",
-        "long": "^5.0.0"
-      },
-      "engines": {
-        "node": ">=12.0.0"
-      }
-    },
     "node_modules/proxy-addr": {
       "version": "2.0.7",
       "resolved": "https://registry.npmjs.org/proxy-addr/-/proxy-addr-2.0.7.tgz",
@@ -17342,16 +16366,6 @@
         "url": "https://github.com/sponsors/lupomontero"
       }
     },
-    "node_modules/pump": {
-      "version": "3.0.2",
-      "resolved": "https://registry.npmjs.org/pump/-/pump-3.0.2.tgz",
-      "integrity": "sha512-tUPXtzlGM8FE3P0ZL6DVs/3P58k9nk8/jZeQCurTJylQA8qFYzHFfhBJkuqyE0FifOsQ0uKWekiZ5g8wtr28cw==",
-      "license": "MIT",
-      "dependencies": {
-        "end-of-stream": "^1.1.0",
-        "once": "^1.3.1"
-      }
-    },
     "node_modules/punycode": {
       "version": "2.3.1",
       "resolved": "https://registry.npmjs.org/punycode/-/punycode-2.3.1.tgz",
@@ -17421,12 +16435,6 @@
       ],
       "license": "MIT"
     },
-    "node_modules/quick-format-unescaped": {
-      "version": "4.0.4",
-      "resolved": "https://registry.npmjs.org/quick-format-unescaped/-/quick-format-unescaped-4.0.4.tgz",
-      "integrity": "sha512-tYC1Q1hgyRuHgloV/YXs2w15unPVh8qfu/qCTfhTYamaw7fyhumKa2yGpdSo87vY32rIclj+4fWYQXUMs9EHvg==",
-      "license": "MIT"
-    },
     "node_modules/randombytes": {
       "version": "2.1.0",
       "resolved": "https://registry.npmjs.org/randombytes/-/randombytes-2.1.0.tgz",
@@ -17499,12 +16507,11 @@
       }
     },
     "node_modules/react-is": {
-      "version": "17.0.2",
-      "resolved": "https://registry.npmjs.org/react-is/-/react-is-17.0.2.tgz",
-      "integrity": "sha512-w2GsyukL62IJnlaff/nRegPQR94C/XXamvMWmSHRJ4y7Ts/4ocGRmTHvOs8PSE6pB3dWOrD/nueuU5sduBsQ4w==",
+      "version": "16.13.1",
+      "resolved": "https://registry.npmjs.org/react-is/-/react-is-16.13.1.tgz",
+      "integrity": "sha512-24e6ynE2H+OKt4kqsOvNd8kBpV65zoxbA4BVsEOB3ARVWQki/DHzaUoC5KuON/BiccDaCCTZBuOcfZs70kR8bQ==",
       "dev": true,
-      "license": "MIT",
-      "peer": true
+      "license": "MIT"
     },
     "node_modules/react-refresh": {
       "version": "0.14.2",
@@ -17539,21 +16546,25 @@
         "node": ">=8.10.0"
       }
     },
+    "node_modules/readdirp/node_modules/picomatch": {
+      "version": "2.3.1",
+      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz",
+      "integrity": "sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=8.6"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/jonschlinkert"
+      }
+    },
     "node_modules/reading-time": {
       "version": "1.5.0",
       "resolved": "https://registry.npmjs.org/reading-time/-/reading-time-1.5.0.tgz",
       "integrity": "sha512-onYyVhBNr4CmAxFsKS7bz+uTLRakypIe4R+5A824vBSkQy/hB3fZepoVEf8OVAxzLvK+H/jm9TzpI3ETSm64Kg==",
       "license": "MIT"
     },
-    "node_modules/real-require": {
-      "version": "0.2.0",
-      "resolved": "https://registry.npmjs.org/real-require/-/real-require-0.2.0.tgz",
-      "integrity": "sha512-57frrGM/OCTLqLOAh0mhVA9VBMHd+9U7Zb2THMGdBUoZVOtGbJzjxsYGDJ3A9AYYCP4hn6y1TVbaOfzWtm5GFg==",
-      "license": "MIT",
-      "engines": {
-        "node": ">= 12.13.0"
-      }
-    },
     "node_modules/redent": {
       "version": "3.0.0",
       "resolved": "https://registry.npmjs.org/redent/-/redent-3.0.0.tgz",
@@ -17879,6 +16890,7 @@
       "version": "2.1.1",
       "resolved": "https://registry.npmjs.org/require-directory/-/require-directory-2.1.1.tgz",
       "integrity": "sha512-fGxEI7+wsG9xrvdjsrlmL22OMTTiHRwAMroiEeMgq8gzoLC/PQr7RsRDSTLUg/bZAZtF+TVIkHc6/4RIKrui+Q==",
+      "dev": true,
       "license": "MIT",
       "engines": {
         "node": ">=0.10.0"
@@ -17894,20 +16906,6 @@
         "node": ">=0.10.0"
       }
     },
-    "node_modules/require-in-the-middle": {
-      "version": "7.5.2",
-      "resolved": "https://registry.npmjs.org/require-in-the-middle/-/require-in-the-middle-7.5.2.tgz",
-      "integrity": "sha512-gAZ+kLqBdHarXB64XpAe2VCjB7rIRv+mU8tfRWziHRJ5umKsIHN2tLLv6EtMw7WCdP19S0ERVMldNvxYCHnhSQ==",
-      "license": "MIT",
-      "dependencies": {
-        "debug": "^4.3.5",
-        "module-details-from-path": "^1.0.3",
-        "resolve": "^1.22.8"
-      },
-      "engines": {
-        "node": ">=8.6.0"
-      }
-    },
     "node_modules/requires-port": {
       "version": "1.0.0",
       "resolved": "https://registry.npmjs.org/requires-port/-/requires-port-1.0.0.tgz",
@@ -17915,21 +16913,19 @@
       "license": "MIT"
     },
     "node_modules/resolve": {
-      "version": "1.22.10",
-      "resolved": "https://registry.npmjs.org/resolve/-/resolve-1.22.10.tgz",
-      "integrity": "sha512-NPRy+/ncIMeDlTAsuqwKIiferiawhefFJtkNSW0qZJEqMEb+qBt/77B/jGeeek+F0uOeN05CDa6HXbbIgtVX4w==",
+      "version": "1.22.8",
+      "resolved": "https://registry.npmjs.org/resolve/-/resolve-1.22.8.tgz",
+      "integrity": "sha512-oKWePCxqpd6FlLvGV1VU0x7bkPmmCNolxzjMf4NczoDnQcIWrAF+cPtZn5i6n+RfD2d9i0tzpKnG6Yk168yIyw==",
+      "dev": true,
       "license": "MIT",
       "dependencies": {
-        "is-core-module": "^2.16.0",
+        "is-core-module": "^2.13.0",
         "path-parse": "^1.0.7",
         "supports-preserve-symlinks-flag": "^1.0.0"
       },
       "bin": {
         "resolve": "bin/resolve"
       },
-      "engines": {
-        "node": ">= 0.4"
-      },
       "funding": {
         "url": "https://github.com/sponsors/ljharb"
       }
@@ -18105,6 +17101,16 @@
         "url": "https://github.com/sponsors/isaacs"
       }
     },
+    "node_modules/rimraf/node_modules/lru-cache": {
+      "version": "11.0.2",
+      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-11.0.2.tgz",
+      "integrity": "sha512-123qHRfJBmo2jXDbo/a5YOQrJoHF/GNQTLzQ5+IdK5pWpceK17yRc6ozlWd25FxvGKQbIUs91fDFkXmDHTKcyA==",
+      "dev": true,
+      "license": "ISC",
+      "engines": {
+        "node": "20 || >=22"
+      }
+    },
     "node_modules/rimraf/node_modules/minimatch": {
       "version": "10.0.1",
       "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-10.0.1.tgz",
@@ -18121,43 +17127,31 @@
         "url": "https://github.com/sponsors/isaacs"
       }
     },
-    "node_modules/rollup": {
-      "version": "4.34.9",
-      "resolved": "https://registry.npmjs.org/rollup/-/rollup-4.34.9.tgz",
-      "integrity": "sha512-nF5XYqWWp9hx/LrpC8sZvvvmq0TeTjQgaZHYmAgwysT9nh8sWnZhBnM8ZyVbbJFIQBLwHDNoMqsBZBbUo4U8sQ==",
+    "node_modules/rimraf/node_modules/minipass": {
+      "version": "7.1.2",
+      "resolved": "https://registry.npmjs.org/minipass/-/minipass-7.1.2.tgz",
+      "integrity": "sha512-qOOzS1cBTWYF4BH8fVePDBOO9iptMnGUEZwNc/cMWnTV2nVLZ7VoNWEPHkYczZA0pdoA7dl6e7FL659nX9S2aw==",
       "dev": true,
-      "license": "MIT",
+      "license": "ISC",
+      "engines": {
+        "node": ">=16 || 14 >=14.17"
+      }
+    },
+    "node_modules/rimraf/node_modules/path-scurry": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/path-scurry/-/path-scurry-2.0.0.tgz",
+      "integrity": "sha512-ypGJsmGtdXUOeM5u93TyeIEfEhM6s+ljAhrk5vAvSx8uyY/02OvrZnA0YNGUrPXfpJMgI1ODd3nwz8Npx4O4cg==",
+      "dev": true,
+      "license": "BlueOak-1.0.0",
       "dependencies": {
-        "@types/estree": "1.0.6"
-      },
-      "bin": {
-        "rollup": "dist/bin/rollup"
+        "lru-cache": "^11.0.0",
+        "minipass": "^7.1.2"
       },
       "engines": {
-        "node": ">=18.0.0",
-        "npm": ">=8.0.0"
-      },
-      "optionalDependencies": {
-        "@rollup/rollup-android-arm-eabi": "4.34.9",
-        "@rollup/rollup-android-arm64": "4.34.9",
-        "@rollup/rollup-darwin-arm64": "4.34.9",
-        "@rollup/rollup-darwin-x64": "4.34.9",
-        "@rollup/rollup-freebsd-arm64": "4.34.9",
-        "@rollup/rollup-freebsd-x64": "4.34.9",
-        "@rollup/rollup-linux-arm-gnueabihf": "4.34.9",
-        "@rollup/rollup-linux-arm-musleabihf": "4.34.9",
-        "@rollup/rollup-linux-arm64-gnu": "4.34.9",
-        "@rollup/rollup-linux-arm64-musl": "4.34.9",
-        "@rollup/rollup-linux-loongarch64-gnu": "4.34.9",
-        "@rollup/rollup-linux-powerpc64le-gnu": "4.34.9",
-        "@rollup/rollup-linux-riscv64-gnu": "4.34.9",
-        "@rollup/rollup-linux-s390x-gnu": "4.34.9",
-        "@rollup/rollup-linux-x64-gnu": "4.34.9",
-        "@rollup/rollup-linux-x64-musl": "4.34.9",
-        "@rollup/rollup-win32-arm64-msvc": "4.34.9",
-        "@rollup/rollup-win32-ia32-msvc": "4.34.9",
-        "@rollup/rollup-win32-x64-msvc": "4.34.9",
-        "fsevents": "~2.3.2"
+        "node": "20 || >=22"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
       }
     },
     "node_modules/router": {
@@ -18288,15 +17282,6 @@
         "url": "https://github.com/sponsors/ljharb"
       }
     },
-    "node_modules/safe-stable-stringify": {
-      "version": "2.5.0",
-      "resolved": "https://registry.npmjs.org/safe-stable-stringify/-/safe-stable-stringify-2.5.0.tgz",
-      "integrity": "sha512-b3rppTKm9T+PsVCBEOUR46GWI7fdOs00VKZ1+9c1EWDaDMvjQc6tUwuFyIprgGgTcWoVHSKrU8H31ZHA2e0RHA==",
-      "license": "MIT",
-      "engines": {
-        "node": ">=10"
-      }
-    },
     "node_modules/safer-buffer": {
       "version": "2.1.2",
       "resolved": "https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz",
@@ -18382,20 +17367,17 @@
       "dev": true,
       "license": "MIT"
     },
-    "node_modules/secure-json-parse": {
-      "version": "2.7.0",
-      "resolved": "https://registry.npmjs.org/secure-json-parse/-/secure-json-parse-2.7.0.tgz",
-      "integrity": "sha512-6aU+Rwsezw7VR8/nyvKTx8QpWH9FrcYiXXlqC4z5d5XQBDRqtbfsRjnwGyqbi3gddNtWHuEk9OANUotL26qKUw==",
-      "license": "BSD-3-Clause"
-    },
     "node_modules/semver": {
-      "version": "6.3.1",
-      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
-      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
-      "dev": true,
+      "version": "7.7.1",
+      "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.1.tgz",
+      "integrity": "sha512-hlq8tAfn0m/61p4BVRcPzIGr6LKiMwo4VM6dGi6pt4qcRkmNzTcWq6eCEjEh+qXjkMDvPlOFFSGwQjoEa6gyMA==",
+      "devOptional": true,
       "license": "ISC",
       "bin": {
         "semver": "bin/semver.js"
+      },
+      "engines": {
+        "node": ">=10"
       }
     },
     "node_modules/send": {
@@ -18571,19 +17553,6 @@
         "@img/sharp-win32-x64": "0.33.5"
       }
     },
-    "node_modules/sharp/node_modules/semver": {
-      "version": "7.7.1",
-      "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.1.tgz",
-      "integrity": "sha512-hlq8tAfn0m/61p4BVRcPzIGr6LKiMwo4VM6dGi6pt4qcRkmNzTcWq6eCEjEh+qXjkMDvPlOFFSGwQjoEa6gyMA==",
-      "license": "ISC",
-      "optional": true,
-      "bin": {
-        "semver": "bin/semver.js"
-      },
-      "engines": {
-        "node": ">=10"
-      }
-    },
     "node_modules/shebang-command": {
       "version": "2.0.0",
       "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-2.0.0.tgz",
@@ -18607,12 +17576,6 @@
         "node": ">=8"
       }
     },
-    "node_modules/shimmer": {
-      "version": "1.2.1",
-      "resolved": "https://registry.npmjs.org/shimmer/-/shimmer-1.2.1.tgz",
-      "integrity": "sha512-sQTKC1Re/rM6XyFM6fIAGHRPVGvyXfgzIDvzoq608vM+jeyVD0Tu1E6Np0Kc2zAIFWIj963V2800iF/9LPieQw==",
-      "license": "BSD-2-Clause"
-    },
     "node_modules/side-channel": {
       "version": "1.1.0",
       "resolved": "https://registry.npmjs.org/side-channel/-/side-channel-1.1.0.tgz",
@@ -18814,15 +17777,6 @@
         "url": "https://github.com/sponsors/sindresorhus"
       }
     },
-    "node_modules/sonic-boom": {
-      "version": "4.2.0",
-      "resolved": "https://registry.npmjs.org/sonic-boom/-/sonic-boom-4.2.0.tgz",
-      "integrity": "sha512-INb7TM37/mAcsGmc9hyyI6+QR3rR1zVRu36B0NeGXKnOOLiZOfER5SA+N7X7k3yUYRzLWafduTDvJAfDswwEww==",
-      "license": "MIT",
-      "dependencies": {
-        "atomic-sleep": "^1.0.0"
-      }
-    },
     "node_modules/source-map": {
       "version": "0.6.1",
       "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
@@ -18853,15 +17807,6 @@
         "source-map": "^0.6.0"
       }
     },
-    "node_modules/split2": {
-      "version": "4.2.0",
-      "resolved": "https://registry.npmjs.org/split2/-/split2-4.2.0.tgz",
-      "integrity": "sha512-UcjcJOWknrNkF6PLX83qcHM6KHgVKNkV62Y8a5uYDVv9ydGQVwAHMKqHdJje1VTWpljG0WYpCDhrCdAOYH4TWg==",
-      "license": "ISC",
-      "engines": {
-        "node": ">= 10.x"
-      }
-    },
     "node_modules/sprintf-js": {
       "version": "1.0.3",
       "resolved": "https://registry.npmjs.org/sprintf-js/-/sprintf-js-1.0.3.tgz",
@@ -18953,11 +17898,6 @@
         "node": ">=10"
       }
     },
-    "node_modules/string-template": {
-      "version": "0.2.1",
-      "resolved": "https://registry.npmjs.org/string-template/-/string-template-0.2.1.tgz",
-      "integrity": "sha512-Yptehjogou2xm4UJbxJ4CxgZx12HBfeystp0y3x7s4Dj32ltVVG1Gg8YhKjHZkHicuKpZX/ffilA8505VbUbpw=="
-    },
     "node_modules/string-width": {
       "version": "7.2.0",
       "resolved": "https://registry.npmjs.org/string-width/-/string-width-7.2.0.tgz",
@@ -19162,6 +18102,7 @@
       "version": "6.0.1",
       "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
       "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
+      "dev": true,
       "license": "MIT",
       "dependencies": {
         "ansi-regex": "^5.0.1"
@@ -19231,6 +18172,7 @@
       "version": "3.1.1",
       "resolved": "https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-3.1.1.tgz",
       "integrity": "sha512-6fPc+R4ihwqP6N/aIv2f1gMH8lOVtWQHoqC4yK6oSDVVocumAsfCqjkXnqiYMhmMwS/mEHLp7Vehlt3ql6lEig==",
+      "dev": true,
       "license": "MIT",
       "engines": {
         "node": ">=8"
@@ -19365,13 +18307,6 @@
         "@pkgjs/parseargs": "^0.11.0"
       }
     },
-    "node_modules/sucrase/node_modules/lru-cache": {
-      "version": "10.4.3",
-      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-10.4.3.tgz",
-      "integrity": "sha512-JNAzZcXrCt42VGLuYz0zfAzDfAvJWW6AfYlDBQyDV5DClI2m5sAmK+OIO7s59XfsRsWHp02jAJrRadPRGTt6SQ==",
-      "dev": true,
-      "license": "ISC"
-    },
     "node_modules/sucrase/node_modules/minimatch": {
       "version": "9.0.5",
       "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-9.0.5.tgz",
@@ -19388,21 +18323,14 @@
         "url": "https://github.com/sponsors/isaacs"
       }
     },
-    "node_modules/sucrase/node_modules/path-scurry": {
-      "version": "1.11.1",
-      "resolved": "https://registry.npmjs.org/path-scurry/-/path-scurry-1.11.1.tgz",
-      "integrity": "sha512-Xa4Nw17FS9ApQFJ9umLiJS4orGjm7ZzwUrwamcGQuHSzDyth9boKDaycYdDcZDuqYATXw4HFXgaqWTctW/v1HA==",
+    "node_modules/sucrase/node_modules/minipass": {
+      "version": "7.1.2",
+      "resolved": "https://registry.npmjs.org/minipass/-/minipass-7.1.2.tgz",
+      "integrity": "sha512-qOOzS1cBTWYF4BH8fVePDBOO9iptMnGUEZwNc/cMWnTV2nVLZ7VoNWEPHkYczZA0pdoA7dl6e7FL659nX9S2aw==",
       "dev": true,
-      "license": "BlueOak-1.0.0",
-      "dependencies": {
-        "lru-cache": "^10.2.0",
-        "minipass": "^5.0.0 || ^6.0.2 || ^7.0.0"
-      },
+      "license": "ISC",
       "engines": {
-        "node": ">=16 || 14 >=14.18"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/isaacs"
+        "node": ">=16 || 14 >=14.17"
       }
     },
     "node_modules/supports-color": {
@@ -19421,6 +18349,7 @@
       "version": "1.0.0",
       "resolved": "https://registry.npmjs.org/supports-preserve-symlinks-flag/-/supports-preserve-symlinks-flag-1.0.0.tgz",
       "integrity": "sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==",
+      "dev": true,
       "license": "MIT",
       "engines": {
         "node": ">= 0.4"
@@ -19473,9 +18402,9 @@
       }
     },
     "node_modules/svix": {
-      "version": "1.61.3",
-      "resolved": "https://registry.npmjs.org/svix/-/svix-1.61.3.tgz",
-      "integrity": "sha512-epPQhzBxAgKpPbLJbS3ABmOAMtYNKnG8wFxt8r8y9OtVRJ9Z0iJtE93rbOjZxM1tvASdsp9PltDJl6swF7hDpA==",
+      "version": "1.61.2",
+      "resolved": "https://registry.npmjs.org/svix/-/svix-1.61.2.tgz",
+      "integrity": "sha512-F16110fvmGf6+Oj/4UO3vllZn7/d4KeVNOv70irN8XYbMI3R3AMWOTyTli1qauFUud4CWYIMRfhpRxVGxdvcHg==",
       "license": "MIT",
       "dependencies": {
         "@stablelib/base64": "^1.0.0",
@@ -19517,9 +18446,9 @@
       }
     },
     "node_modules/swr": {
-      "version": "2.3.3",
-      "resolved": "https://registry.npmjs.org/swr/-/swr-2.3.3.tgz",
-      "integrity": "sha512-dshNvs3ExOqtZ6kJBaAsabhPdHyeY4P2cKwRCniDVifBMoG/SVI7tfLWqPXriVspf2Rg4tPzXJTnwaihIeFw2A==",
+      "version": "2.3.2",
+      "resolved": "https://registry.npmjs.org/swr/-/swr-2.3.2.tgz",
+      "integrity": "sha512-RosxFpiabojs75IwQ316DGoDRmOqtiAj0tg8wCcbEu4CiLZBs/a9QNtHV7TUfDXmmlgqij/NqzKq/eLelyv9xA==",
       "license": "MIT",
       "dependencies": {
         "dequal": "^2.0.3",
@@ -19682,9 +18611,9 @@
       }
     },
     "node_modules/terser-webpack-plugin": {
-      "version": "5.3.14",
-      "resolved": "https://registry.npmjs.org/terser-webpack-plugin/-/terser-webpack-plugin-5.3.14.tgz",
-      "integrity": "sha512-vkZjpUjb6OMS7dhV+tILUW6BhpDR7P2L/aQSAv+Uwk+m8KATX9EccViHTJR2qDtACKPIYndLGCyl3FMo+r2LMw==",
+      "version": "5.3.12",
+      "resolved": "https://registry.npmjs.org/terser-webpack-plugin/-/terser-webpack-plugin-5.3.12.tgz",
+      "integrity": "sha512-jDLYqo7oF8tJIttjXO6jBY5Hk8p3A8W4ttih7cCEq64fQFWmgJ4VqAQjKr7WwIDlmXKEc6QeoRb5ecjZ+2afcg==",
       "dev": true,
       "license": "MIT",
       "peer": true,
@@ -19785,6 +18714,28 @@
         "node": ">=8"
       }
     },
+    "node_modules/test-exclude/node_modules/glob": {
+      "version": "7.2.3",
+      "resolved": "https://registry.npmjs.org/glob/-/glob-7.2.3.tgz",
+      "integrity": "sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==",
+      "deprecated": "Glob versions prior to v9 are no longer supported",
+      "dev": true,
+      "license": "ISC",
+      "dependencies": {
+        "fs.realpath": "^1.0.0",
+        "inflight": "^1.0.4",
+        "inherits": "2",
+        "minimatch": "^3.1.1",
+        "once": "^1.3.0",
+        "path-is-absolute": "^1.0.0"
+      },
+      "engines": {
+        "node": "*"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
+      }
+    },
     "node_modules/text-table": {
       "version": "0.2.0",
       "resolved": "https://registry.npmjs.org/text-table/-/text-table-0.2.0.tgz",
@@ -19831,40 +18782,6 @@
         "node": ">=0.8"
       }
     },
-    "node_modules/thread-stream": {
-      "version": "3.1.0",
-      "resolved": "https://registry.npmjs.org/thread-stream/-/thread-stream-3.1.0.tgz",
-      "integrity": "sha512-OqyPZ9u96VohAyMfJykzmivOrY2wfMSf3C5TtFJVgN+Hm6aj+voFhlK+kZEIv2FBh1X6Xp3DlnCOfEQ3B2J86A==",
-      "license": "MIT",
-      "dependencies": {
-        "real-require": "^0.2.0"
-      }
-    },
-    "node_modules/thriftrw": {
-      "version": "3.11.4",
-      "resolved": "https://registry.npmjs.org/thriftrw/-/thriftrw-3.11.4.tgz",
-      "integrity": "sha512-UcuBd3eanB3T10nXWRRMwfwoaC6VMk7qe3/5YIWP2Jtw+EbHqJ0p1/K3x8ixiR5dozKSSfcg1W+0e33G1Di3XA==",
-      "dependencies": {
-        "bufrw": "^1.2.1",
-        "error": "7.0.2",
-        "long": "^2.4.0"
-      },
-      "bin": {
-        "thrift2json": "thrift2json.js"
-      },
-      "engines": {
-        "node": ">= 0.10.x"
-      }
-    },
-    "node_modules/thriftrw/node_modules/long": {
-      "version": "2.4.0",
-      "resolved": "https://registry.npmjs.org/long/-/long-2.4.0.tgz",
-      "integrity": "sha512-ijUtjmO/n2A5PaosNG9ZGDsQ3vxJg7ZW8vsY8Kp0f2yIZWhSJvjmegV7t+9RPQKxKrvj8yKGehhS+po14hPLGQ==",
-      "license": "Apache-2.0",
-      "engines": {
-        "node": ">=0.6"
-      }
-    },
     "node_modules/tiktoken": {
       "version": "1.0.20",
       "resolved": "https://registry.npmjs.org/tiktoken/-/tiktoken-1.0.20.tgz",
@@ -19902,34 +18819,6 @@
         "url": "https://github.com/sponsors/SuperchupuDev"
       }
     },
-    "node_modules/tinyglobby/node_modules/fdir": {
-      "version": "6.4.3",
-      "resolved": "https://registry.npmjs.org/fdir/-/fdir-6.4.3.tgz",
-      "integrity": "sha512-PMXmW2y1hDDfTSRc9gaXIuCCRpuoz3Kaz8cUelp3smouvfT632ozg2vrT6lJsHKKOF59YLbOGfAWGUcKEfRMQw==",
-      "dev": true,
-      "license": "MIT",
-      "peerDependencies": {
-        "picomatch": "^3 || ^4"
-      },
-      "peerDependenciesMeta": {
-        "picomatch": {
-          "optional": true
-        }
-      }
-    },
-    "node_modules/tinyglobby/node_modules/picomatch": {
-      "version": "4.0.2",
-      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-4.0.2.tgz",
-      "integrity": "sha512-M7BAV6Rlcy5u+m6oPhAPFgJTzAioX/6B0DxyvDlo9l8+T3nLKbrczg2WLUyzd45L8RqfUMyGPzekbMvX2Ldkwg==",
-      "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=12"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/jonschlinkert"
-      }
-    },
     "node_modules/tinypool": {
       "version": "1.0.2",
       "resolved": "https://registry.npmjs.org/tinypool/-/tinypool-1.0.2.tgz",
@@ -19961,22 +18850,22 @@
       }
     },
     "node_modules/tldts": {
-      "version": "6.1.83",
-      "resolved": "https://registry.npmjs.org/tldts/-/tldts-6.1.83.tgz",
-      "integrity": "sha512-FHxxNJJ0WNsEBPHyC1oesQb3rRoxpuho/z2g3zIIAhw1WHJeQsUzK1jYK8TI1/iClaa4fS3Z2TCA9mtxXsENSg==",
+      "version": "6.1.82",
+      "resolved": "https://registry.npmjs.org/tldts/-/tldts-6.1.82.tgz",
+      "integrity": "sha512-KCTjNL9F7j8MzxgfTgjT+v21oYH38OidFty7dH00maWANAI2IsLw2AnThtTJi9HKALHZKQQWnNebYheadacD+g==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
-        "tldts-core": "^6.1.83"
+        "tldts-core": "^6.1.82"
       },
       "bin": {
         "tldts": "bin/cli.js"
       }
     },
     "node_modules/tldts-core": {
-      "version": "6.1.83",
-      "resolved": "https://registry.npmjs.org/tldts-core/-/tldts-core-6.1.83.tgz",
-      "integrity": "sha512-I2wb9OJc6rXyh9d4aInhSNWChNI+ra6qDnFEGEwe9OoA68lE4Temw29bOkf1Uvwt8VZS079t1BFZdXVBmmB4dw==",
+      "version": "6.1.82",
+      "resolved": "https://registry.npmjs.org/tldts-core/-/tldts-core-6.1.82.tgz",
+      "integrity": "sha512-Jabl32m21tt/d/PbDO88R43F8aY98Piiz6BVH9ShUlOAiiAELhEqwrAmBocjAqnCfoUeIsRU+h3IEzZd318F3w==",
       "dev": true,
       "license": "MIT"
     },
@@ -20058,70 +18947,30 @@
       "dev": true,
       "license": "Apache-2.0"
     },
-    "node_modules/ts-node": {
-      "version": "10.9.2",
-      "resolved": "https://registry.npmjs.org/ts-node/-/ts-node-10.9.2.tgz",
-      "integrity": "sha512-f0FFpIdcHgn8zcPSbf1dRevwt047YMnaiJM3u2w2RewrB+fob/zePZcrOyQoLMMO7aBIddLcQIEK5dYjkLnGrQ==",
+    "node_modules/tsconfig-paths": {
+      "version": "3.15.0",
+      "resolved": "https://registry.npmjs.org/tsconfig-paths/-/tsconfig-paths-3.15.0.tgz",
+      "integrity": "sha512-2Ac2RgzDe/cn48GvOe3M+o82pEFewD3UPbyoUHHdKasHwJKjds4fLXWf/Ux5kATBKN20oaFGu+jbElp1pos0mg==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
-        "@cspotcode/source-map-support": "^0.8.0",
-        "@tsconfig/node10": "^1.0.7",
-        "@tsconfig/node12": "^1.0.7",
-        "@tsconfig/node14": "^1.0.0",
-        "@tsconfig/node16": "^1.0.2",
-        "acorn": "^8.4.1",
-        "acorn-walk": "^8.1.1",
-        "arg": "^4.1.0",
-        "create-require": "^1.1.0",
-        "diff": "^4.0.1",
-        "make-error": "^1.1.1",
-        "v8-compile-cache-lib": "^3.0.1",
-        "yn": "3.1.1"
-      },
-      "bin": {
-        "ts-node": "dist/bin.js",
-        "ts-node-cwd": "dist/bin-cwd.js",
-        "ts-node-esm": "dist/bin-esm.js",
-        "ts-node-script": "dist/bin-script.js",
-        "ts-node-transpile-only": "dist/bin-transpile.js",
-        "ts-script": "dist/bin-script-deprecated.js"
-      },
-      "peerDependencies": {
-        "@swc/core": ">=1.2.50",
-        "@swc/wasm": ">=1.2.50",
-        "@types/node": "*",
-        "typescript": ">=2.7"
-      },
-      "peerDependenciesMeta": {
-        "@swc/core": {
-          "optional": true
-        },
-        "@swc/wasm": {
-          "optional": true
-        }
+        "@types/json5": "^0.0.29",
+        "json5": "^1.0.2",
+        "minimist": "^1.2.6",
+        "strip-bom": "^3.0.0"
       }
     },
-    "node_modules/ts-node/node_modules/arg": {
-      "version": "4.1.3",
-      "resolved": "https://registry.npmjs.org/arg/-/arg-4.1.3.tgz",
-      "integrity": "sha512-58S9QDqG0Xx27YwPSt9fJxivjYl432YCwfDMfZ+71RAqUrZef7LrKQZ3LHLOwCS4FLNBplP533Zx895SeOCHvA==",
-      "dev": true,
-      "license": "MIT"
-    },
-    "node_modules/tsconfig-paths": {
-      "version": "4.2.0",
-      "resolved": "https://registry.npmjs.org/tsconfig-paths/-/tsconfig-paths-4.2.0.tgz",
-      "integrity": "sha512-NoZ4roiN7LnbKn9QqE1amc9DJfzvZXxF4xDavcOWt1BPkdx+m+0gJuPM+S0vCe7zTJMYUP0R8pO2XMr+Y8oLIg==",
+    "node_modules/tsconfig-paths/node_modules/json5": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/json5/-/json5-1.0.2.tgz",
+      "integrity": "sha512-g1MWMLBiz8FKi1e4w0UyVL3w+iJceWAFBAaBnnGKOpNa5f8TLktkbre1+s6oICydWAm+HRUGTmI+//xv2hvXYA==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
-        "json5": "^2.2.2",
-        "minimist": "^1.2.6",
-        "strip-bom": "^3.0.0"
+        "minimist": "^1.2.0"
       },
-      "engines": {
-        "node": ">=6"
+      "bin": {
+        "json5": "lib/cli.js"
       }
     },
     "node_modules/tsconfig-paths/node_modules/strip-bom": {
@@ -20544,13 +19393,6 @@
         "uuid": "dist/esm/bin/uuid"
       }
     },
-    "node_modules/v8-compile-cache-lib": {
-      "version": "3.0.1",
-      "resolved": "https://registry.npmjs.org/v8-compile-cache-lib/-/v8-compile-cache-lib-3.0.1.tgz",
-      "integrity": "sha512-wa7YjyUGfNZngI/vtK0UHAN+lgDCxBPCylVXGp0zu59Fz5aiGtNXaq3DhIov063MorB+VfufLh3JlF2KdTK3xg==",
-      "dev": true,
-      "license": "MIT"
-    },
     "node_modules/v8-to-istanbul": {
       "version": "9.3.0",
       "resolved": "https://registry.npmjs.org/v8-to-istanbul/-/v8-to-istanbul-9.3.0.tgz",
@@ -20589,9 +19431,9 @@
       }
     },
     "node_modules/vite": {
-      "version": "6.2.1",
-      "resolved": "https://registry.npmjs.org/vite/-/vite-6.2.1.tgz",
-      "integrity": "sha512-n2GnqDb6XPhlt9B8olZPrgMD/es/Nd1RdChF6CBD/fHW6pUyUTt2sQW2fPRX5GiD9XEa6+8A6A4f2vT6pSsE7Q==",
+      "version": "6.2.0",
+      "resolved": "https://registry.npmjs.org/vite/-/vite-6.2.0.tgz",
+      "integrity": "sha512-7dPxoo+WsT/64rDcwoOjk76XHj+TqNTIvHKcuMQ1k4/SeHDaQt5GFAeLYzrimZrMpn/O6DtdI03WUjdxuPM0oQ==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
@@ -20661,9 +19503,9 @@
       }
     },
     "node_modules/vite-node": {
-      "version": "3.0.8",
-      "resolved": "https://registry.npmjs.org/vite-node/-/vite-node-3.0.8.tgz",
-      "integrity": "sha512-6PhR4H9VGlcwXZ+KWCdMqbtG649xCPZqfI9j2PsK1FcXgEzro5bGHcVKFCTqPLaNKZES8Evqv4LwvZARsq5qlg==",
+      "version": "3.0.7",
+      "resolved": "https://registry.npmjs.org/vite-node/-/vite-node-3.0.7.tgz",
+      "integrity": "sha512-2fX0QwX4GkkkpULXdT1Pf4q0tC1i1lFOyseKoonavXUNlQ77KpW2XqBGGNIm/J4Ows4KxgGJzDguYVPKwG/n5A==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
@@ -20683,20 +19525,59 @@
         "url": "https://opencollective.com/vitest"
       }
     },
+    "node_modules/vite/node_modules/rollup": {
+      "version": "4.34.9",
+      "resolved": "https://registry.npmjs.org/rollup/-/rollup-4.34.9.tgz",
+      "integrity": "sha512-nF5XYqWWp9hx/LrpC8sZvvvmq0TeTjQgaZHYmAgwysT9nh8sWnZhBnM8ZyVbbJFIQBLwHDNoMqsBZBbUo4U8sQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@types/estree": "1.0.6"
+      },
+      "bin": {
+        "rollup": "dist/bin/rollup"
+      },
+      "engines": {
+        "node": ">=18.0.0",
+        "npm": ">=8.0.0"
+      },
+      "optionalDependencies": {
+        "@rollup/rollup-android-arm-eabi": "4.34.9",
+        "@rollup/rollup-android-arm64": "4.34.9",
+        "@rollup/rollup-darwin-arm64": "4.34.9",
+        "@rollup/rollup-darwin-x64": "4.34.9",
+        "@rollup/rollup-freebsd-arm64": "4.34.9",
+        "@rollup/rollup-freebsd-x64": "4.34.9",
+        "@rollup/rollup-linux-arm-gnueabihf": "4.34.9",
+        "@rollup/rollup-linux-arm-musleabihf": "4.34.9",
+        "@rollup/rollup-linux-arm64-gnu": "4.34.9",
+        "@rollup/rollup-linux-arm64-musl": "4.34.9",
+        "@rollup/rollup-linux-loongarch64-gnu": "4.34.9",
+        "@rollup/rollup-linux-powerpc64le-gnu": "4.34.9",
+        "@rollup/rollup-linux-riscv64-gnu": "4.34.9",
+        "@rollup/rollup-linux-s390x-gnu": "4.34.9",
+        "@rollup/rollup-linux-x64-gnu": "4.34.9",
+        "@rollup/rollup-linux-x64-musl": "4.34.9",
+        "@rollup/rollup-win32-arm64-msvc": "4.34.9",
+        "@rollup/rollup-win32-ia32-msvc": "4.34.9",
+        "@rollup/rollup-win32-x64-msvc": "4.34.9",
+        "fsevents": "~2.3.2"
+      }
+    },
     "node_modules/vitest": {
-      "version": "3.0.8",
-      "resolved": "https://registry.npmjs.org/vitest/-/vitest-3.0.8.tgz",
-      "integrity": "sha512-dfqAsNqRGUc8hB9OVR2P0w8PZPEckti2+5rdZip0WIz9WW0MnImJ8XiR61QhqLa92EQzKP2uPkzenKOAHyEIbA==",
+      "version": "3.0.7",
+      "resolved": "https://registry.npmjs.org/vitest/-/vitest-3.0.7.tgz",
+      "integrity": "sha512-IP7gPK3LS3Fvn44x30X1dM9vtawm0aesAa2yBIZ9vQf+qB69NXC5776+Qmcr7ohUXIQuLhk7xQR0aSUIDPqavg==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
-        "@vitest/expect": "3.0.8",
-        "@vitest/mocker": "3.0.8",
-        "@vitest/pretty-format": "^3.0.8",
-        "@vitest/runner": "3.0.8",
-        "@vitest/snapshot": "3.0.8",
-        "@vitest/spy": "3.0.8",
-        "@vitest/utils": "3.0.8",
+        "@vitest/expect": "3.0.7",
+        "@vitest/mocker": "3.0.7",
+        "@vitest/pretty-format": "^3.0.7",
+        "@vitest/runner": "3.0.7",
+        "@vitest/snapshot": "3.0.7",
+        "@vitest/spy": "3.0.7",
+        "@vitest/utils": "3.0.7",
         "chai": "^5.2.0",
         "debug": "^4.4.0",
         "expect-type": "^1.1.0",
@@ -20708,7 +19589,7 @@
         "tinypool": "^1.0.2",
         "tinyrainbow": "^2.0.0",
         "vite": "^5.0.0 || ^6.0.0",
-        "vite-node": "3.0.8",
+        "vite-node": "3.0.7",
         "why-is-node-running": "^2.3.0"
       },
       "bin": {
@@ -20724,8 +19605,8 @@
         "@edge-runtime/vm": "*",
         "@types/debug": "^4.1.12",
         "@types/node": "^18.0.0 || ^20.0.0 || >=22.0.0",
-        "@vitest/browser": "3.0.8",
-        "@vitest/ui": "3.0.8",
+        "@vitest/browser": "3.0.7",
+        "@vitest/ui": "3.0.7",
         "happy-dom": "*",
         "jsdom": "*"
       },
@@ -20792,12 +19673,13 @@
       }
     },
     "node_modules/web-streams-polyfill": {
-      "version": "4.0.0-beta.3",
-      "resolved": "https://registry.npmjs.org/web-streams-polyfill/-/web-streams-polyfill-4.0.0-beta.3.tgz",
-      "integrity": "sha512-QW95TCTaHmsYfHDybGMwO5IJIM93I/6vTRk+daHTWFPhwh+C8Cg7j7XyKrwrj8Ib6vYXe0ocYNrmzY4xAAN6ug==",
+      "version": "3.3.3",
+      "resolved": "https://registry.npmjs.org/web-streams-polyfill/-/web-streams-polyfill-3.3.3.tgz",
+      "integrity": "sha512-d2JWLCivmZYTSIoge9MsgFCZrt571BikcWGYkjC1khllbTeDlGqZ2D8vD8E/lJa8WGWbb7Plm8/XJYV7IJHZZw==",
+      "dev": true,
       "license": "MIT",
       "engines": {
-        "node": ">= 14"
+        "node": ">= 8"
       }
     },
     "node_modules/web-vitals": {
@@ -21355,25 +20237,11 @@
       "dev": true,
       "license": "MIT"
     },
-    "node_modules/xorshift": {
-      "version": "1.2.0",
-      "resolved": "https://registry.npmjs.org/xorshift/-/xorshift-1.2.0.tgz",
-      "integrity": "sha512-iYgNnGyeeJ4t6U11NpA/QiKy+PXn5Aa3Azg5qkwIFz1tBLllQrjjsk9yzD7IAK0naNU4JxdeDgqW9ov4u/hc4g==",
-      "license": "MIT"
-    },
-    "node_modules/xtend": {
-      "version": "4.0.2",
-      "resolved": "https://registry.npmjs.org/xtend/-/xtend-4.0.2.tgz",
-      "integrity": "sha512-LKYU1iAXJXUgAXn9URjiu+MWhyUXHsvfp7mcuYm9dSUKK0/CjtrUwFAxD82/mCWbtLsGjFIad0wIsod4zrTAEQ==",
-      "license": "MIT",
-      "engines": {
-        "node": ">=0.4"
-      }
-    },
     "node_modules/y18n": {
       "version": "5.0.8",
       "resolved": "https://registry.npmjs.org/y18n/-/y18n-5.0.8.tgz",
       "integrity": "sha512-0pfFzegeDWJHJIAmTLRP2DwHjdF5s7jo9tuztdQxAhINCdvS+3nGINqPd00AphqJR/0LhANUS6/+7SCb98YOfA==",
+      "dev": true,
       "license": "ISC",
       "engines": {
         "node": ">=10"
@@ -21403,6 +20271,7 @@
       "version": "17.7.2",
       "resolved": "https://registry.npmjs.org/yargs/-/yargs-17.7.2.tgz",
       "integrity": "sha512-7dSzzRQ++CKnNI/krKnYRV7JKKPUXMEh61soaHKg9mrWEhzFWhFnxPxGl+69cD1Ou63C13NUPCnmIcrvqCuM6w==",
+      "dev": true,
       "license": "MIT",
       "dependencies": {
         "cliui": "^8.0.1",
@@ -21421,6 +20290,7 @@
       "version": "21.1.1",
       "resolved": "https://registry.npmjs.org/yargs-parser/-/yargs-parser-21.1.1.tgz",
       "integrity": "sha512-tVpsJW7DdjecAiFpbIB1e3qxIQsE6NoPc5/eTdrbbIC4h0LVsWhnoa3g+m2HclBIujHzsxZ4VJVA+GUuc2/LBw==",
+      "dev": true,
       "license": "ISC",
       "engines": {
         "node": ">=12"
@@ -21430,12 +20300,14 @@
       "version": "8.0.0",
       "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
       "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
+      "dev": true,
       "license": "MIT"
     },
     "node_modules/yargs/node_modules/is-fullwidth-code-point": {
       "version": "3.0.0",
       "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
       "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
+      "dev": true,
       "license": "MIT",
       "engines": {
         "node": ">=8"
@@ -21445,6 +20317,7 @@
       "version": "4.2.3",
       "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
       "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
+      "dev": true,
       "license": "MIT",
       "dependencies": {
         "emoji-regex": "^8.0.0",
@@ -21455,16 +20328,6 @@
         "node": ">=8"
       }
     },
-    "node_modules/yn": {
-      "version": "3.1.1",
-      "resolved": "https://registry.npmjs.org/yn/-/yn-3.1.1.tgz",
-      "integrity": "sha512-Ux4ygGWsu2c7isFWe8Yu1YluJmqVhxqK2cLXNQA5AcC3QfbGNpM7fu0Y8b/z16pXLnFxZYvWhd3fhBY9DLmC6Q==",
-      "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=6"
-      }
-    },
     "node_modules/yocto-queue": {
       "version": "0.1.0",
       "resolved": "https://registry.npmjs.org/yocto-queue/-/yocto-queue-0.1.0.tgz",
diff --git a/package.json b/package.json
index 7793a9a6..d72fbed8 100644
--- a/package.json
+++ b/package.json
@@ -49,13 +49,6 @@
     "@clerk/nextjs": "^6.12.2",
     "@emotion/is-prop-valid": "^1.3.1",
     "@google/generative-ai": "^0.23.0",
-    "@opentelemetry/api": "^1.9.0",
-    "@opentelemetry/exporter-jaeger": "^1.30.1",
-    "@opentelemetry/instrumentation": "^0.57.2",
-    "@opentelemetry/resources": "^1.30.1",
-    "@opentelemetry/sdk-node": "^0.57.2",
-    "@opentelemetry/sdk-trace-node": "^1.30.1",
-    "@opentelemetry/semantic-conventions": "^1.30.0",
     "@radix-ui/react-slot": "^1.1.2",
     "@supabase/ssr": "^0.5.2",
     "@supabase/supabase-js": "^2.49.1",
@@ -69,6 +62,7 @@
     "clsx": "^2.1.1",
     "cookie": "^1.0.2",
     "critters": "^0.0.23",
+    "dotenv": "^16.0.3",
     "framer-motion": "^11.18.2",
     "is-arguments": "^1.2.0",
     "is-generator-function": "^1.1.0",
@@ -77,8 +71,6 @@
     "next": "^15.1.7",
     "openai": "^4.29.2",
     "opossum": "^8.4.0",
-    "pino": "^9.6.0",
-    "pino-pretty": "^13.0.0",
     "playwright": "^1.50.1",
     "react": "^18.2.0",
     "react-dom": "^18.2.0",
@@ -95,12 +87,11 @@
   "devDependencies": {
     "@eslint/eslintrc": "^3.2.0",
     "@eslint/js": "^9.0.0",
-    "@rollup/rollup-win32-x64-msvc": "^4.34.9",
     "@svgr/webpack": "^8.1.0",
     "@testing-library/jest-dom": "^6.6.3",
     "@testing-library/react": "^16.2.0",
     "@types/jest": "^29.5.14",
-    "@types/node": "^22.13.8",
+    "@types/node": "22.13.8",
     "@types/opossum": "^8.1.8",
     "@types/react": "19.0.10",
     "@typescript-eslint/eslint-plugin": "^7.1.1",
@@ -111,7 +102,6 @@
     "compression-webpack-plugin": "^11.1.0",
     "cross-env": "^7.0.3",
     "cursor-tools": "latest",
-    "dotenv": "^16.4.7",
     "eslint": "^8.57.0",
     "eslint-config-next": "^15.1.7",
     "eslint-config-prettier": "^9.1.0",
@@ -129,8 +119,6 @@
     "prettier": "^3.2.5",
     "rimraf": "^6.0.1",
     "tailwindcss": "^3.4.17",
-    "ts-node": "^10.9.2",
-    "tsconfig-paths": "^4.2.0",
     "typescript": "5.8.2",
     "url-loader": "^4.1.1",
     "vitest": "^3.0.7",
diff --git a/postcss.config.js b/postcss.config.js
new file mode 100644
index 00000000..12a703d9
--- /dev/null
+++ b/postcss.config.js
@@ -0,0 +1,6 @@
+module.exports = {
+  plugins: {
+    tailwindcss: {},
+    autoprefixer: {},
+  },
+};
diff --git a/previous_page.txt b/previous_page.txt
new file mode 100644
index 00000000..ee2b9846
--- /dev/null
+++ b/previous_page.txt
@@ -0,0 +1,1135 @@
+'use client';
+
+import { Button } from '@/components/ui/button';
+import { Card } from '@/components/ui/card';
+import { Input } from '@/components/ui/input';
+import Link from 'next/link';
+import Image from 'next/image';
+import React, { useState, useEffect, useRef, useMemo, useCallback, Suspense } from 'react';
+import { ChevronLeft, ChevronRight, Menu, X, Moon, Sun } from 'lucide-react';
+import { motion, AnimatePresence } from 'framer-motion';
+import StoryBookIcon from '@/components/StoryBookIcon';
+import StorybookSvg from '@/components/StorybookSvg';
+import dynamic from 'next/dynamic';
+import ThemeToggleWrapper from '@/components/ThemeToggleWrapper';
+import { TypedText } from '@/components/TypedText';
+
+// Dynamically import components that are below the fold
+const StoryFeatureGrid = dynamic(
+  () => import('@/components/StoryFeatureCard').then((mod) => mod.StoryFeatureGrid),
+  {
+    loading: () => (
+      <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8 animate-pulse">
+        {[1, 2, 3, 4, 5, 6].map((i) => (
+          <div key={i} className="bg-lavender/20 dark:bg-lavender/10 h-64 rounded-lg"></div>
+        ))}
+      </div>
+    ),
+    ssr: false,
+  }
+);
+
+// Dynamically import the FAQ section
+const FaqSection = dynamic(() => import('../components/FaqSection'), {
+  loading: () => (
+    <div className="space-y-4 animate-pulse">
+      {[1, 2, 3, 4].map((i) => (
+        <div key={i} className="bg-lavender/20 dark:bg-lavender/10 h-20 rounded-lg"></div>
+      ))}
+    </div>
+  ),
+  ssr: false,
+});
+
+// Dynamically import the footer
+const Footer = dynamic(() => import('../components/Footer'), {
+  loading: () => (
+    <div className="h-40 bg-lavender/10 dark:bg-midnight/30 animate-pulse rounded-t-lg"></div>
+  ),
+  ssr: false,
+});
+
+// Custom hook for Intersection Observer
+function useIntersectionObserver(options = {}) {
+  const [isIntersecting, setIsIntersecting] = useState(false);
+  const ref = useRef<HTMLDivElement>(null);
+
+  useEffect(() => {
+    if (!ref.current) return;
+
+    const observer = new IntersectionObserver(([entry]) => {
+      setIsIntersecting(entry.isIntersecting);
+    }, options);
+
+    observer.observe(ref.current);
+
+    return () => {
+      if (ref.current) {
+        observer.unobserve(ref.current);
+      }
+    };
+  }, [options]);
+
+  return { ref, isIntersecting };
+}
+
+interface FaqAccordionItemProps {
+  question: string;
+  answer: string;
+}
+
+function FaqAccordionItem({ question, answer }: FaqAccordionItemProps) {
+  const [isOpen, setIsOpen] = useState(false);
+  const { ref, isIntersecting } = useIntersectionObserver({
+    threshold: 0.1,
+    rootMargin: '100px',
+  });
+
+  return (
+    <div
+      ref={ref}
+      className={`border border-lavender/30 dark:border-lavender/10 rounded-lg overflow-hidden transition-opacity duration-500 ${
+        isIntersecting ? 'opacity-100' : 'opacity-0'
+      }`}
+    >
+      <button
+        className="w-full p-4 flex justify-between items-center bg-dreamy-light/50 dark:bg-midnight hover:bg-dreamy-light dark:hover:bg-midnight-light transition-colors text-left"
+        onClick={() => setIsOpen(!isOpen)}
+        aria-expanded={isOpen}
+      >
+        <h3 className="text-primary text-lg font-medium">{question}</h3>
+        <div
+          className={`transform transition-transform duration-200 ${isOpen ? 'rotate-180' : ''}`}
+        >
+          <svg
+            xmlns="http://www.w3.org/2000/svg"
+            width="20"
+            height="20"
+            viewBox="0 0 24 24"
+            fill="none"
+            stroke="currentColor"
+            strokeWidth="2"
+            strokeLinecap="round"
+            strokeLinejoin="round"
+          >
+            <polyline points="6 9 12 15 18 9"></polyline>
+          </svg>
+        </div>
+      </button>
+
+      <div
+        className={`overflow-hidden transition-all duration-300 ease-in-out ${isOpen ? 'max-h-96' : 'max-h-0'}`}
+      >
+        <div className="p-4 bg-white/50 dark:bg-midnight-light/10">
+          <p className="text-text-secondary dark:text-text-primary/80">{answer}</p>
+        </div>
+      </div>
+    </div>
+  );
+}
+
+export default function Home() {
+  const [activeStoryIndex, setActiveStoryIndex] = useState(0);
+  const [childName, setChildName] = useState('Emma');
+  const [showPreview, setShowPreview] = useState(false);
+  const [refreshKey, setRefreshKey] = useState(0); // Used to force re-render of typing animations
+  const [isScrolled, setIsScrolled] = useState(false);
+  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);
+  const [scrollProgress, setScrollProgress] = useState(0);
+  const [isCarouselPaused, setIsCarouselPaused] = useState(false);
+  const [selectedTheme, setSelectedTheme] = useState('fantasy'); // Default theme
+  const carouselRef = useRef<HTMLDivElement>(null);
+
+  // Handle scroll events for sticky header and progress bar
+  useEffect(() => {
+    // Avoid memory leaks by using a ref to track if component is mounted
+    const isMounted = { current: true };
+
+    const handleScroll = () => {
+      if (!isMounted.current) return;
+
+      // For sticky header
+      const scrollPosition = window.scrollY;
+      setIsScrolled(scrollPosition > 50);
+
+      // For progress indicator
+      const windowHeight = document.documentElement.scrollHeight - window.innerHeight;
+      const scrolled = (scrollPosition / windowHeight) * 100;
+      setScrollProgress(scrolled);
+    };
+
+    window.addEventListener('scroll', handleScroll);
+    handleScroll();
+
+    return () => {
+      isMounted.current = false;
+      window.removeEventListener('scroll', handleScroll);
+    };
+  }, []);
+
+  const sampleStories = useMemo(
+    () => [
+      {
+        title: "Ava's Adventure in Dreamland",
+        excerpt:
+          'Once upon a time, in a magical dreamland filled with cotton candy clouds and rainbow rivers, there lived a brave girl named Ava...',
+        image: '/images/illustrations/book-magic.svg',
+      },
+      {
+        title: 'Leo and the Space Dragons',
+        excerpt:
+          'Far beyond the stars, in a galaxy of wonders, a curious boy named Leo discovered a mysterious map that led to the legendary Space Dragons...',
+        image: '/images/illustrations/space-rocket.svg',
+      },
+      {
+        title: "Maya's Underwater Kingdom",
+        excerpt:
+          'Deep beneath the ocean waves, where sunlight danced on coral reefs, Maya discovered a hidden entrance to an underwater kingdom...',
+        image: '/images/illustrations/storybook.svg',
+      },
+    ],
+    []
+  );
+
+  // Auto-rotate carousel unless paused
+  useEffect(() => {
+    if (!isCarouselPaused && carouselRef.current) {
+      const interval = setInterval(() => {
+        setActiveStoryIndex((prevIndex) => (prevIndex + 1) % sampleStories.length);
+      }, 5000);
+
+      return () => clearInterval(interval);
+    }
+  }, [isCarouselPaused, sampleStories.length]);
+
+  const faqs = useMemo(
+    () => [
+      {
+        question: 'How much does it cost?',
+        answer:
+          'We offer a free tier with 3 stories per month. Our premium plan at $4.99/month gives you unlimited stories, more themes, and the ability to save and print your creations.',
+      },
+      {
+        question: 'Can I edit my stories?',
+        answer:
+          'Yes! All stories can be edited after generation. Premium users get access to advanced editing features including custom illustrations.',
+      },
+      {
+        question: 'What age group is this for?',
+        answer:
+          "Our stories are designed for children ages 2-10. You can select the appropriate reading level during story creation to match your child's abilities.",
+      },
+      {
+        question: 'Can I print the stories?',
+        answer:
+          'Absolutely! All stories can be downloaded as PDFs for easy printing. Premium users get access to special formatting options and illustration quality.',
+      },
+    ],
+    []
+  );
+
+  // Function to navigate to the next story with circular navigation
+  const goToNextStory = useCallback(() => {
+    setActiveStoryIndex((prev) => (prev === sampleStories.length - 1 ? 0 : prev + 1));
+    setRefreshKey((prev) => prev + 1); // Force re-render of typing animations
+  }, [sampleStories.length]);
+
+  // Function to navigate to the previous story with circular navigation
+  const goToPrevStory = useCallback(() => {
+    setActiveStoryIndex((prev) => (prev === 0 ? sampleStories.length - 1 : prev - 1));
+    setRefreshKey((prev) => prev + 1); // Force re-render of typing animations
+  }, [sampleStories.length]);
+
+  // Sample story preview text that uses the child's name
+  const getStoryPreview = (name: string) => {
+    return [
+      `Once upon a time, in a magical forest filled with talking animals and whispering trees, there lived a brave child named ${name}.`,
+      `${name} had always dreamed of adventure, and today was the day their wish would come true.`,
+      `As ${name} was exploring near the old oak tree, a tiny woodland fairy with shimmering wings appeared...`,
+    ];
+  };
+
+  // Theme-specific story previews
+  const getThemePreview = (theme: string, name: string) => {
+    switch (theme) {
+      case 'space':
+        return [
+          `Far beyond the stars, in a galaxy of wonders, a brave space explorer named ${name} piloted their shimmering starship.`,
+          `${name} had always dreamed of discovering new planets, and today was the day their wish would come true.`,
+          `As ${name} approached the mysterious nebula, the ship's sensors detected something extraordinary...`,
+        ];
+      case 'pirates':
+        return [
+          `Across the seven seas, aboard the mighty ship "The Golden Adventure," sailed the courageous Captain ${name}.`,
+          `${name} had always dreamed of finding hidden treasure, and today was the day their map would lead to fortune.`,
+          `As ${name} followed the ancient map to the mysterious island, strange birds with colorful feathers guided the way...`,
+        ];
+      case 'fantasy':
+      default:
+        return [
+          `Once upon a time, in a magical kingdom filled with enchanted creatures and whispering trees, there lived a brave hero named ${name}.`,
+          `${name} had always dreamed of magical adventures, and today was the day their wish would come true.`,
+          `As ${name} was exploring near the ancient castle, a tiny dragon with shimmering scales appeared...`,
+        ];
+    }
+  };
+
+  // Get the appropriate story preview based on the selected theme
+  const getActiveStoryPreview = (name: string) => {
+    return getThemePreview(selectedTheme, name).join('\n\n');
+  };
+
+  // Toggle carousel pause state
+  const toggleCarouselPause = useCallback(() => {
+    setIsCarouselPaused((prev) => !prev);
+  }, []);
+
+  // Handle carousel dot navigation
+  const goToStory = useCallback((index: number) => {
+    setActiveStoryIndex(index);
+    setRefreshKey((prev) => prev + 1);
+  }, []);
+
+  // Handle carousel mouse events
+  const handleCarouselMouseEnter = useCallback(() => {
+    setIsCarouselPaused(true);
+  }, []);
+
+  const handleCarouselMouseLeave = useCallback(() => {
+    setIsCarouselPaused(false);
+  }, []);
+
+  // Memoize the carousel items to prevent unnecessary re-renders
+  const carouselItems = useMemo(() => {
+    return sampleStories.map((story, index) => (
+      <div
+        key={index}
+        className={`carousel-item absolute inset-0 transition-opacity duration-500 ${
+          index === activeStoryIndex ? 'opacity-100 z-10' : 'opacity-0 z-0'
+        }`}
+      >
+        <Card className="h-full overflow-hidden shadow-dreamy border-none">
+          <div className="p-6 h-full flex flex-col">
+            <h3 className="text-xl font-bold text-primary mb-2">{story.title}</h3>
+            <p className="text-text-secondary dark:text-text-primary/80 flex-1">{story.excerpt}</p>
+            <div className="mt-4 flex justify-between items-center">
+              <span className="text-sm text-lavender">Fantasy</span>
+              <span className="text-sm text-golden">5-8 years</span>
+            </div>
+          </div>
+        </Card>
+      </div>
+    ));
+  }, [sampleStories, activeStoryIndex]);
+
+  return (
+    <main className="min-h-screen bg-gradient-to-b from-cloud to-sky-50 dark:from-midnight dark:to-teal-900">
+      {/* Sticky Navigation */}
+      <div
+        className={`fixed top-0 left-0 right-0 z-50 transition-all duration-300 ${isScrolled ? 'bg-white/90 dark:bg-midnight/90 shadow-md backdrop-blur-sm' : 'bg-transparent'}`}
+      >
+        <div className="max-w-5xl mx-auto px-4 sm:px-6 lg:px-8">
+          <div className="flex items-center justify-between h-16">
+            {/* Logo */}
+            <div className="flex items-center">
+              <Link href="/" className="flex items-center">
+                <Image
+                  src="/images/illustrations/book-magic.svg"
+                  alt="Step Into Story Time"
+                  width={32}
+                  height={32}
+                  className="mr-2"
+                />
+                <span
+                  className={`font-bold text-lg ${isScrolled ? 'text-primary' : 'text-midnight dark:text-text-primary'}`}
+                >
+                  Step Into Story Time
+                </span>
+              </Link>
+            </div>
+
+            {/* Desktop Navigation */}
+            <div className="hidden md:flex items-center space-x-4">
+              <a
+                href="#how-it-works"
+                className={`px-3 py-2 rounded-md text-sm font-medium transition-colors ${isScrolled ? 'text-text-secondary hover:text-primary dark:text-text-primary/70 dark:hover:text-primary' : 'text-text-secondary dark:text-text-primary/70 hover:text-primary dark:hover:text-primary'}`}
+              >
+                How It Works
+              </a>
+              <a
+                href="#features"
+                className={`px-3 py-2 rounded-md text-sm font-medium transition-colors ${isScrolled ? 'text-text-secondary hover:text-primary dark:text-text-primary/70 dark:hover:text-primary' : 'text-text-secondary dark:text-text-primary/70 hover:text-primary dark:hover:text-primary'}`}
+              >
+                Features
+              </a>
+              <a
+                href="#pricing"
+                className={`px-3 py-2 rounded-md text-sm font-medium transition-colors ${isScrolled ? 'text-text-secondary hover:text-primary dark:text-text-primary/70 dark:hover:text-primary' : 'text-text-secondary dark:text-text-primary/70 hover:text-primary dark:hover:text-primary'}`}
+              >
+                Pricing
+              </a>
+              <ThemeToggleWrapper />
+              <Link href="/story">
+                <Button size="sm" className="ml-4">
+                  Start Your Story
+                </Button>
+              </Link>
+            </div>
+
+            {/* Mobile menu button */}
+            <div className="md:hidden flex items-center">
+              <button
+                onClick={() => setMobileMenuOpen(!mobileMenuOpen)}
+                className={`p-2 rounded-md ${isScrolled ? 'text-primary' : 'text-midnight dark:text-text-primary'}`}
+                aria-label="Open main menu"
+              >
+                <Menu className="h-6 w-6" />
+              </button>
+            </div>
+          </div>
+
+          {/* Progress bar */}
+          <div className="h-1 w-full bg-lavender/10 dark:bg-lavender/20">
+            <div
+              className="h-1 bg-gradient-to-r from-primary to-golden transition-all duration-300 ease-out"
+              style={{ width: `${scrollProgress}%` }}
+            ></div>
+          </div>
+        </div>
+      </div>
+
+      {/* Mobile menu, show/hide based on menu state */}
+      <AnimatePresence>
+        {mobileMenuOpen && (
+          <motion.div
+            className="fixed inset-0 z-50 md:hidden"
+            initial={{ opacity: 0 }}
+            animate={{ opacity: 1 }}
+            exit={{ opacity: 0 }}
+            transition={{ duration: 0.2 }}
+          >
+            <div
+              className="fixed inset-0 bg-black/25 backdrop-blur-sm"
+              onClick={() => setMobileMenuOpen(false)}
+            ></div>
+            <motion.div
+              className="fixed top-0 right-0 bottom-0 w-64 bg-white dark:bg-midnight p-6 shadow-xl"
+              initial={{ x: '100%' }}
+              animate={{ x: 0 }}
+              exit={{ x: '100%' }}
+              transition={{ duration: 0.3, ease: 'easeInOut' }}
+            >
+              <div className="flex items-center justify-between mb-8">
+                <h2 className="text-lg font-bold text-primary">Menu</h2>
+                <button
+                  onClick={() => setMobileMenuOpen(false)}
+                  className="p-2 rounded-md text-text-secondary"
+                  aria-label="Close menu"
+                >
+                  <X className="h-6 w-6" />
+                </button>
+              </div>
+              <nav className="flex flex-col space-y-4">
+                <a
+                  href="#how-it-works"
+                  className="px-3 py-2 rounded-md text-base font-medium text-text-secondary dark:text-text-primary/70 hover:text-primary dark:hover:text-primary"
+                  onClick={() => setMobileMenuOpen(false)}
+                >
+                  How It Works
+                </a>
+                <a
+                  href="#features"
+                  className="px-3 py-2 rounded-md text-base font-medium text-text-secondary dark:text-text-primary/70 hover:text-primary dark:hover:text-primary"
+                  onClick={() => setMobileMenuOpen(false)}
+                >
+                  Features
+                </a>
+                <a
+                  href="#pricing"
+                  className="px-3 py-2 rounded-md text-base font-medium text-text-secondary dark:text-text-primary/70 hover:text-primary dark:hover:text-primary"
+                  onClick={() => setMobileMenuOpen(false)}
+                >
+                  Pricing
+                </a>
+                <div className="flex justify-center my-2">
+                  <ThemeToggleWrapper />
+                </div>
+                <Link href="/story" className="mt-4" onClick={() => setMobileMenuOpen(false)}>
+                  <Button fullWidth>Start Your Story</Button>
+                </Link>
+              </nav>
+            </motion.div>
+          </motion.div>
+        )}
+      </AnimatePresence>
+
+      {/* Quick Action Buttons (Floating) */}
+      <div className="fixed bottom-6 right-6 z-40 flex flex-col gap-3">
+        <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>
+          <Link href="/story">
+            <Button size="icon" className="rounded-full w-12 h-12 shadow-dreamy">
+              <span className="sr-only">Start Your Story</span>
+              <Image
+                src="/images/illustrations/book-magic.svg"
+                alt="Create Story"
+                width={24}
+                height={24}
+              />
+            </Button>
+          </Link>
+        </motion.div>
+      </div>
+
+      {/* Hero Section */}
+      <section className="relative py-20 px-8 overflow-hidden">
+        <div className="absolute inset-0 z-0 opacity-10">
+          <div className="absolute top-10 left-10 w-20 h-20 rounded-full bg-dreamy animate-float"></div>
+          <div className="absolute top-40 right-20 w-16 h-16 rounded-full bg-golden animate-float delay-150"></div>
+          <div className="absolute bottom-20 left-1/4 w-24 h-24 rounded-full bg-primary animate-float delay-300"></div>
+          <div className="absolute bottom-40 right-1/3 w-12 h-12 rounded-full bg-sky animate-float delay-200"></div>
+        </div>
+
+        <div className="max-w-5xl mx-auto relative z-10 flex flex-col md:flex-row items-center gap-12">
+          <div className="md:w-1/2 text-center md:text-left space-y-6">
+            <h1 className="text-midnight dark:text-text-primary leading-tight">
+              Step Into Story Time, <span className="text-primary">Instantly!</span>
+            </h1>
+            <p className="text-xl text-text-secondary dark:text-text-primary/80">
+              Personalized, AI-powered bedtime stories for your child—crafted in seconds.
+            </p>
+            <div className="flex flex-col sm:flex-row gap-4 justify-center md:justify-start">
+              <Link href="/story">
+                <Button size="lg" className="animate-float delay-300 w-full sm:w-auto">
+                  Start Your Story
+                </Button>
+              </Link>
+              <Button
+                variant="outline"
+                size="lg"
+                className="w-full sm:w-auto"
+                onClick={() => {
+                  document.getElementById('how-it-works')?.scrollIntoView({ behavior: 'smooth' });
+                }}
+              >
+                See How It Works
+              </Button>
+            </div>
+          </div>
+
+          <div className="md:w-1/2 relative">
+            <div className="relative w-full h-[300px] md:h-[400px]">
+              {/* Interactive Story Preview */}
+              <div className="absolute inset-0 bg-gradient-to-r from-primary/20 to-golden/20 rounded-2xl flex items-center justify-center overflow-hidden">
+                <div className="w-full h-full flex flex-col">
+                  {/* Preview Header */}
+                  <div className="bg-primary/30 dark:bg-primary/50 p-3 flex justify-between items-center">
+                    <div className="flex items-center gap-2">
+                      <div className="w-3 h-3 rounded-full bg-golden"></div>
+                      <div className="w-3 h-3 rounded-full bg-dreamy"></div>
+                      <div className="w-3 h-3 rounded-full bg-teal"></div>
+                    </div>
+                    <span className="text-sm font-medium">
+                      {childName}&apos;s Magical Adventure
+                    </span>
+                    <div className="flex items-center gap-1">
+                      <span className="twinkling-star text-sm">✨</span>
+                    </div>
+                  </div>
+
+                  {/* Preview Content */}
+                  <div className="flex-1 bg-white/90 dark:bg-midnight-light/90 p-4 overflow-hidden relative">
+                    {showPreview ? (
+                      <div className="h-full overflow-y-auto story-text pr-2">
+                        <TypedText
+                          key={`story-preview-${refreshKey}`}
+                          text={getStoryPreview(childName).join('\n\n')}
+                          className="whitespace-pre-line"
+                          onComplete={() => {
+                            /* Story preview complete */
+                          }}
+                        />
+                      </div>
+                    ) : (
+                      <div className="h-full flex flex-col items-center justify-center text-center gap-4">
+                        <Image
+                          src="/images/illustrations/book-magic.svg"
+                          alt="Magical storybook"
+                          width={100}
+                          height={100}
+                          className="object-contain"
+                          priority
+                          loading="eager"
+                          sizes="(max-width: 768px) 100px, 100px"
+                          quality={90}
+                        />
+                        <p className="text-text-secondary dark:text-text-primary/80">
+                          See a personalized story preview!
+                        </p>
+                      </div>
+                    )}
+
+                    {/* Personalization Input */}
+                    <div className="absolute bottom-0 left-0 right-0 p-3 bg-white/80 dark:bg-midnight/80 backdrop-blur-sm border-t border-lavender/20">
+                      <div className="flex gap-2">
+                        <Input
+                          placeholder="Child's name"
+                          value={childName}
+                          onChange={(e) => setChildName(e.target.value)}
+                          className="text-sm"
+                        />
+                        <Button
+                          size="sm"
+                          onClick={() => {
+                            setShowPreview(true);
+                            setRefreshKey((prev) => prev + 1); // Force re-render of typing animations
+                          }}
+                          className="whitespace-nowrap"
+                        >
+                          {showPreview ? 'Refresh Preview' : 'Show Preview'}
+                        </Button>
+                      </div>
+                    </div>
+                  </div>
+                </div>
+              </div>
+            </div>
+
+            {/* Social Proof */}
+            <div className="mt-4 bg-white/80 dark:bg-midnight/80 backdrop-blur-sm rounded-lg p-3 flex justify-around items-center shadow-dreamy">
+              <div className="text-center">
+                <p className="font-bold text-primary text-xl">10,000+</p>
+                <p className="text-xs text-text-secondary dark:text-text-primary/70">
+                  Stories Created
+                </p>
+              </div>
+              <div className="h-10 border-r border-lavender/30"></div>
+              <div className="text-center">
+                <p className="font-bold text-primary text-xl">4.9/5</p>
+                <p className="text-xs text-text-secondary dark:text-text-primary/70">
+                  Parent Rating
+                </p>
+              </div>
+              <div className="h-10 border-r border-lavender/30"></div>
+              <div className="text-center">
+                <p className="font-bold text-primary text-xl">5,000+</p>
+                <p className="text-xs text-text-secondary dark:text-text-primary/70">
+                  Happy Families
+                </p>
+              </div>
+            </div>
+          </div>
+        </div>
+      </section>
+
+      {/* How It Works */}
+      <section
+        id="how-it-works"
+        className="py-20 px-8 bg-white dark:bg-midnight-dark relative overflow-hidden"
+      >
+        {/* Background decorative elements */}
+        <div className="absolute inset-0 z-0 opacity-5">
+          <div className="absolute top-20 left-10 w-40 h-40 rounded-full bg-primary"></div>
+          <div className="absolute bottom-10 right-10 w-60 h-60 rounded-full bg-golden"></div>
+        </div>
+
+        <div className="max-w-5xl mx-auto relative z-10">
+          <div className="text-center mb-16">
+            <h2 className="text-primary text-center mb-4">The Magic Behind Your Stories</h2>
+            <p className="text-lg text-text-secondary dark:text-text-primary/80 max-w-2xl mx-auto">
+              Creating personalized stories for your child is simple and magical. Just follow these
+              three easy steps to bring imagination to life.
+            </p>
+          </div>
+
+          <div className="relative">
+            {/* Connection line between steps */}
+            <div className="hidden md:block absolute top-1/2 left-0 right-0 h-1 bg-gradient-to-r from-lavender via-primary to-golden transform -translate-y-1/2 z-0"></div>
+
+            <div className="grid md:grid-cols-3 gap-12 relative z-10">
+              {/* Step 1 */}
+              <div className="flex flex-col items-center">
+                <div className="w-20 h-20 bg-gradient-to-br from-lavender to-primary rounded-full flex items-center justify-center mb-6 shadow-dreamy">
+                  <span className="text-2xl text-white font-bold">1</span>
+                </div>
+                <Card
+                  hover
+                  className="w-full space-y-4 text-center p-6 bg-sky-50 dark:bg-midnight border-t-4 border-lavender"
+                >
+                  <h3 className="text-primary">Choose Your Adventure</h3>
+                  <p className="text-text-secondary dark:text-text-primary/80">
+                    Select from magical worlds like enchanted forests, space odysseys, or underwater
+                    kingdoms.
+                  </p>
+                  <div className="flex gap-2 flex-wrap mt-4 justify-center">
+                    <Button
+                      variant={selectedTheme === 'space' ? 'primary' : 'outline'}
+                      size="sm"
+                      onClick={() => setSelectedTheme('space')}
+                      className={selectedTheme === 'space' ? 'bg-primary' : ''}
+                    >
+                      <Image
+                        src="/images/illustrations/space-rocket.svg"
+                        alt="Space"
+                        width={20}
+                        height={20}
+                        className="mr-1"
+                      />
+                      Space
+                    </Button>
+                    <Button
+                      variant={selectedTheme === 'fantasy' ? 'primary' : 'outline'}
+                      size="sm"
+                      onClick={() => setSelectedTheme('fantasy')}
+                      className={selectedTheme === 'fantasy' ? 'bg-primary' : ''}
+                    >
+                      <Image
+                        src="/images/illustrations/fairy.svg"
+                        alt="Fantasy"
+                        width={20}
+                        height={20}
+                        className="mr-1"
+                      />
+                      Fantasy
+                    </Button>
+                    <Button
+                      variant={selectedTheme === 'pirates' ? 'primary' : 'outline'}
+                      size="sm"
+                      onClick={() => setSelectedTheme('pirates')}
+                      className={selectedTheme === 'pirates' ? 'bg-primary' : ''}
+                    >
+                      <Image
+                        src="/images/illustrations/pirate.svg"
+                        alt="Pirates"
+                        width={20}
+                        height={20}
+                        className="mr-1"
+                      />
+                      Pirates
+                    </Button>
+                  </div>
+                </Card>
+              </div>
+
+              {/* Step 2 */}
+              <div className="flex flex-col items-center md:mt-12">
+                <div className="w-20 h-20 bg-gradient-to-br from-primary to-dreamy rounded-full flex items-center justify-center mb-6 shadow-dreamy">
+                  <span className="text-2xl text-white font-bold">2</span>
+                </div>
+                <Card
+                  hover
+                  className="w-full space-y-4 text-center p-6 bg-sky-50 dark:bg-midnight border-t-4 border-dreamy"
+                >
+                  <h3 className="text-primary">Create Your Hero</h3>
+                  <p className="text-text-secondary dark:text-text-primary/80">
+                    Personalize with your child&apos;s name, age, and favorite things to make them
+                    the star.
+                  </p>
+                  <div className="flex flex-col gap-2 mt-4">
+                    <Input
+                      placeholder="Child's name"
+                      className="text-center"
+                      value={childName}
+                      onChange={(e) => setChildName(e.target.value)}
+                    />
+                    <div className="flex gap-2 justify-center mt-2">
+                      <Button variant="outline" size="sm">
+                        <Image
+                          src="/images/illustrations/superhero.svg"
+                          alt="Brave"
+                          width={20}
+                          height={20}
+                          className="mr-1"
+                        />
+                        Brave
+                      </Button>
+                      <Button variant="outline" size="sm">
+                        <Image
+                          src="/images/illustrations/brain.svg"
+                          alt="Clever"
+                          width={20}
+                          height={20}
+                          className="mr-1"
+                        />
+                        Clever
+                      </Button>
+                    </div>
+                  </div>
+                </Card>
+              </div>
+
+              {/* Step 3 */}
+              <div className="flex flex-col items-center">
+                <div className="w-20 h-20 bg-gradient-to-br from-dreamy to-golden rounded-full flex items-center justify-center mb-6 shadow-dreamy">
+                  <span className="text-2xl text-white font-bold">3</span>
+                </div>
+                <Card
+                  hover
+                  className="w-full space-y-4 text-center p-6 bg-sky-50 dark:bg-midnight border-t-4 border-golden"
+                >
+                  <h3 className="text-primary">Watch the Magic Happen</h3>
+                  <p className="text-text-secondary dark:text-text-primary/80">
+                    Our AI crafts a unique tale in seconds. Save, print, or read it together at
+                    bedtime.
+                  </p>
+                  <div className="relative h-48 mt-4 overflow-hidden rounded-lg bg-white/50 dark:bg-midnight-light/50 shadow-sm">
+                    {/* Story Generation Process - Interactive Preview */}
+                    <div className="h-full flex items-center justify-center">
+                      <div className="text-center px-4 w-full">
+                        {/* Theme-specific icon */}
+                        <Image
+                          src={
+                            selectedTheme === 'space'
+                              ? '/images/illustrations/space-rocket.svg'
+                              : selectedTheme === 'pirates'
+                                ? '/images/illustrations/pirate.svg'
+                                : '/images/illustrations/fairy.svg'
+                          }
+                          alt="Story theme"
+                          width={60}
+                          height={60}
+                          className="object-contain mx-auto mb-3"
+                        />
+                        <h4 className="text-primary font-medium text-sm mb-2">
+                          {childName}&apos;s{' '}
+                          {selectedTheme === 'space'
+                            ? 'Space Adventure'
+                            : selectedTheme === 'pirates'
+                              ? 'Pirate Quest'
+                              : 'Magical Journey'}
+                        </h4>
+
+                        <div className="h-20 overflow-y-auto text-xs text-text-secondary dark:text-text-primary/70 max-w-xs mx-auto text-left story-text">
+                          <TypedText
+                            key={`theme-preview-${selectedTheme}-${childName}-${refreshKey}`}
+                            text={getActiveStoryPreview(childName)}
+                            className="whitespace-pre-line"
+                            delay={300}
+                          />
+                        </div>
+                      </div>
+                    </div>
+                  </div>
+                </Card>
+              </div>
+            </div>
+          </div>
+
+          <div className="text-center mt-16">
+            <p className="text-text-secondary dark:text-text-primary/80 mb-6 italic">
+              &quot;From theme selection to story creation in less than a minute!&quot;
+            </p>
+            <Link href="/story">
+              <Button size="lg" className="px-8">
+                Create Your First Story
+              </Button>
+            </Link>
+          </div>
+        </div>
+      </section>
+
+      {/* Why Parents Love It */}
+      <section className="py-16 px-8 bg-gradient-to-r from-teal-50 to-sky-50 dark:from-teal-900 dark:to-sky-900">
+        <div className="max-w-5xl mx-auto">
+          <h2 className="text-primary text-center mb-12">Why Parents Love It</h2>
+
+          <StoryFeatureGrid />
+
+          {/* Testimonial */}
+          <Card
+            variant="magical"
+            className="mt-12 p-8 text-center bg-white/80 dark:bg-midnight/80 backdrop-blur-sm"
+          >
+            <div className="flex flex-col items-center">
+              <div className="w-16 h-16 bg-lavender rounded-full mb-4"></div>
+              <p className="text-lg italic mb-4">
+                &quot;My daughter asks for a new story every night! It&apos;s become our special
+                bedtime ritual, and I love how each story incorporates her interests.&quot;
+              </p>
+              <p className="font-bold">Sarah T., Parent of 6-year-old</p>
+              <div className="flex mt-2">
+                {[1, 2, 3, 4, 5].map((star) => (
+                  <span key={star} className="text-golden text-xl">
+                    ★
+                  </span>
+                ))}
+              </div>
+            </div>
+          </Card>
+        </div>
+      </section>
+
+      {/* Story Carousel */}
+      <section className="py-16 px-8 bg-gradient-to-r from-teal-50 to-sky-50 dark:from-teal-900 dark:to-sky-900">
+        <div className="max-w-5xl mx-auto">
+          <h2 className="text-primary text-center mb-12">Story Previews</h2>
+
+          <div ref={carouselRef} className="relative h-[300px] mt-12">
+            {carouselItems}
+
+            {/* Carousel Controls */}
+            <div className="absolute -bottom-12 left-0 right-0 flex justify-center gap-2 mt-4">
+              {sampleStories.map((_, index) => (
+                <button
+                  key={index}
+                  className={`w-3 h-3 rounded-full transition-colors ${
+                    index === activeStoryIndex
+                      ? 'bg-primary'
+                      : 'bg-lavender/30 hover:bg-lavender/50'
+                  }`}
+                  onClick={() => setActiveStoryIndex(index)}
+                  aria-label={`Go to story ${index + 1}`}
+                />
+              ))}
+            </div>
+          </div>
+        </div>
+      </section>
+
+      {/* Subscription Section */}
+      <section className="py-20 px-8 bg-gradient-to-b from-cloud to-sky-50 dark:from-midnight dark:to-teal-900 relative overflow-hidden">
+        {/* Decorative elements */}
+        <div className="absolute top-0 left-0 w-full h-full overflow-hidden opacity-20 pointer-events-none">
+          <div className="absolute top-10 left-1/4 w-16 h-16 rounded-full bg-teal animate-float"></div>
+          <div className="absolute top-40 right-1/3 w-12 h-12 rounded-full bg-golden animate-float delay-150"></div>
+          <div className="absolute bottom-20 left-1/5 w-20 h-20 rounded-full bg-dreamy animate-float delay-300"></div>
+        </div>
+
+        <div className="max-w-5xl mx-auto relative z-10">
+          <div className="text-center mb-16">
+            <h2 className="text-primary text-center mb-4">Start Your Story Journey</h2>
+            <p className="text-center text-lg mb-6 max-w-2xl mx-auto">
+              Begin creating magical stories for your little ones today. No credit card needed to
+              get started!
+            </p>
+            <div className="w-24 h-1 bg-gradient-to-r from-primary to-golden mx-auto rounded-full"></div>
+          </div>
+
+          <div className="grid md:grid-cols-2 gap-10">
+            {/* Free Plan Card */}
+            <Card
+              variant="outline"
+              hover={true}
+              className="p-8 space-y-6 bg-white/90 dark:bg-midnight/90 backdrop-blur-sm border-2 border-lavender/30 relative overflow-hidden"
+            >
+              {/* Decorative corner */}
+              <div className="absolute -top-10 -left-10 w-20 h-20 bg-lavender/20 rounded-full"></div>
+
+              <div className="relative">
+                <h3 className="text-primary text-center mb-2">Free Plan</h3>
+                <div className="text-center mb-6">
+                  <span className="text-4xl font-bold">$0</span>
+                  <span className="text-text-secondary dark:text-text-primary/80 ml-1">/month</span>
+                </div>
+
+                <div className="bg-lavender/10 dark:bg-lavender/20 rounded-xl p-5 mb-6">
+                  <ul className="space-y-4">
+                    <li className="flex items-center gap-3">
+                      <span className="flex-shrink-0 w-6 h-6 rounded-full bg-teal/20 flex items-center justify-center">
+                        <span className="text-teal-500">✓</span>
+                      </span>
+                      <span>3 stories per month</span>
+                    </li>
+                    <li className="flex items-center gap-3">
+                      <span className="flex-shrink-0 w-6 h-6 rounded-full bg-teal/20 flex items-center justify-center">
+                        <span className="text-teal-500">✓</span>
+                      </span>
+                      <span>5 basic themes</span>
+                    </li>
+                    <li className="flex items-center gap-3">
+                      <span className="flex-shrink-0 w-6 h-6 rounded-full bg-teal/20 flex items-center justify-center">
+                        <span className="text-teal-500">✓</span>
+                      </span>
+                      <span>Basic customization</span>
+                    </li>
+                    <li className="flex items-center gap-3">
+                      <span className="flex-shrink-0 w-6 h-6 rounded-full bg-teal/20 flex items-center justify-center">
+                        <span className="text-teal-500">✓</span>
+                      </span>
+                      <span>PDF downloads</span>
+                    </li>
+                  </ul>
+                </div>
+
+                <Link href="/story">
+                  <Button variant="outline" fullWidth className="group relative overflow-hidden">
+                    <span className="relative z-10">Start for Free</span>
+                    <span className="absolute inset-0 bg-primary scale-x-0 group-hover:scale-x-100 origin-left transition-transform duration-300 opacity-20"></span>
+                  </Button>
+                </Link>
+              </div>
+            </Card>
+
+            {/* Premium Plan Card */}
+            <Card
+              variant="magical"
+              hover={true}
+              className="p-8 pt-14 space-y-6 relative overflow-hidden bg-gradient-to-br from-white to-dreamy-light dark:from-midnight dark:to-teal-800 border-2 border-golden/30 shadow-glow"
+            >
+              {/* Popular badge - woodland themed with leaf */}
+              <div className="absolute top-0 left-0 right-0 bg-teal-500/90 text-text-primary font-medium py-2 px-4 text-center shadow-md">
+                <div className="flex items-center justify-center gap-2">
+                  <svg
+                    className="w-5 h-5"
+                    viewBox="0 0 24 24"
+                    fill="none"
+                    xmlns="http://www.w3.org/2000/svg"
+                  >
+                    <path
+                      d="M6.5 12.5C8.5 10.5 12 10 15.5 12.5C19 15 20.5 19 20.5 19C20.5 19 18.5 18.5 16.5 18.5C14.5 18.5 12 19 9.5 21.5C7 24 4 24 4 24C4 24 4 21.5 6 18.5C8 15.5 9.5 14 9.5 14"
+                      stroke="currentColor"
+                      strokeWidth="2"
+                      strokeLinecap="round"
+                      strokeLinejoin="round"
+                    />
+                    <path
+                      d="M11 12.5C11 12.5 13.5 11 15 8.5C16.5 6 16 3 16 3C16 3 13 3.5 11.5 5.5C10 7.5 9 10 9 12.5C9 15 11 17.5 11 17.5"
+                      stroke="currentColor"
+                      strokeWidth="2"
+                      strokeLinecap="round"
+                      strokeLinejoin="round"
+                    />
+                  </svg>
+                  <span>Popular Choice</span>
+                </div>
+              </div>
+
+              {/* Decorative elements */}
+              <div className="absolute -bottom-10 -right-10 w-20 h-20 bg-golden/20 rounded-full"></div>
+
+              <div className="relative">
+                <h3 className="text-primary text-center mb-2">Premium Plan</h3>
+                <div className="text-center mb-6">
+                  <span className="text-4xl font-bold">$4.99</span>
+                  <span className="text-text-secondary dark:text-text-primary/80 ml-1">/month</span>
+                </div>
+
+                <div className="bg-golden/10 dark:bg-golden/20 rounded-xl p-5 mb-6">
+                  <ul className="space-y-4">
+                    <li className="flex items-center gap-3">
+                      <span className="flex-shrink-0 w-6 h-6 rounded-full bg-teal/20 flex items-center justify-center">
+                        <span className="text-teal-500">✓</span>
+                      </span>
+                      <span>Unlimited stories</span>
+                    </li>
+                    <li className="flex items-center gap-3">
+                      <span className="flex-shrink-0 w-6 h-6 rounded-full bg-teal/20 flex items-center justify-center">
+                        <span className="text-teal-500">✓</span>
+                      </span>
+                      <span>20+ premium themes</span>
+                    </li>
+                    <li className="flex items-center gap-3">
+                      <span className="flex-shrink-0 w-6 h-6 rounded-full bg-teal/20 flex items-center justify-center">
+                        <span className="text-teal-500">✓</span>
+                      </span>
+                      <span>Advanced customization</span>
+                    </li>
+                    <li className="flex items-center gap-3">
+                      <span className="flex-shrink-0 w-6 h-6 rounded-full bg-teal/20 flex items-center justify-center">
+                        <span className="text-teal-500">✓</span>
+                      </span>
+                      <span>PDF downloads with illustrations</span>
+                    </li>
+                    <li className="flex items-center gap-3">
+                      <span className="flex-shrink-0 w-6 h-6 rounded-full bg-teal/20 flex items-center justify-center">
+                        <span className="text-teal-500">✓</span>
+                      </span>
+                      <span>Save & edit stories</span>
+                    </li>
+                  </ul>
+                </div>
+
+                <Link href="/story?plan=premium">
+                  <Button fullWidth className="group relative overflow-hidden">
+                    <span className="relative z-10">Get Premium</span>
+                    <span className="absolute inset-0 bg-white scale-x-0 group-hover:scale-x-100 origin-left transition-transform duration-300 opacity-20"></span>
+                  </Button>
+                </Link>
+              </div>
+            </Card>
+          </div>
+
+          {/* Additional info */}
+          <div className="mt-12 text-center">
+            <p className="text-sm text-text-secondary dark:text-text-primary/60 italic">
+              All plans include a 7-day satisfaction guarantee. No questions asked.
+            </p>
+          </div>
+        </div>
+      </section>
+
+      {/* FAQ Section */}
+      <section className="py-16 px-8 bg-white dark:bg-midnight-dark">
+        <div className="max-w-3xl mx-auto">
+          <h2 className="text-primary text-center mb-6">Frequently Asked Questions</h2>
+          <p className="text-center text-text-secondary dark:text-text-primary/80 mb-12 max-w-xl mx-auto">
+            Find answers to common questions about our service, pricing, and features.
+          </p>
+
+          {/* FAQ Search */}
+          <div className="mb-8 relative">
+            <Input
+              placeholder="Search FAQs..."
+              className="pl-10"
+              onChange={(e) => {
+                // This would be implemented with actual filtering logic
+                // console.log('Searching for:', e.target.value);
+              }}
+            />
+            <div className="absolute left-3 top-1/2 transform -translate-y-1/2 text-text-secondary">
+              <svg
+                xmlns="http://www.w3.org/2000/svg"
+                width="18"
+                height="18"
+                viewBox="0 0 24 24"
+                fill="none"
+                stroke="currentColor"
+                strokeWidth="2"
+                strokeLinecap="round"
+                strokeLinejoin="round"
+              >
+                <circle cx="11" cy="11" r="8"></circle>
+                <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
+              </svg>
+            </div>
+          </div>
+
+          {/* FAQ Categories */}
+          <div className="flex justify-center mb-8 gap-2 flex-wrap">
+            <Button variant="outline" size="sm" className="rounded-full">
+              All
+            </Button>
+            <Button variant="outline" size="sm" className="rounded-full">
+              Pricing
+            </Button>
+            <Button variant="outline" size="sm" className="rounded-full">
+              Features
+            </Button>
+            <Button variant="outline" size="sm" className="rounded-full">
+              Technical
+            </Button>
+          </div>
+
+          {/* FAQ Accordion */}
+          <div className="space-y-4">
+            {faqs.map((faq, index) => (
+              <FaqAccordionItem key={index} question={faq.question} answer={faq.answer} />
+            ))}
+          </div>
+
+          {/* Additional Help */}
+          <div className="mt-12 text-center">
+            <p className="text-text-secondary dark:text-text-primary/80 mb-4">
+              Still have questions? We&apos;re here to help!
+            </p>
+            <Link href="/contact">
+              <Button variant="outline">Contact Support</Button>
+            </Link>
+          </div>
+        </div>
+      </section>
+
+      {/* Footer */}
+      <Footer />
+    </main>
+  );
+}
diff --git a/simple-rls-test.js b/simple-rls-test.js
new file mode 100644
index 00000000..4eed3250
--- /dev/null
+++ b/simple-rls-test.js
@@ -0,0 +1,64 @@
+require('dotenv').config({ path: '.env.local' });
+const { createClient } = require('@supabase/supabase-js');
+
+// Create a Supabase client with the URL and anon key
+const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
+const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;
+
+async function testRls() {
+  console.log('Simple RLS Test...');
+
+  if (!supabaseUrl || !supabaseAnonKey) {
+    console.error('Error: Supabase URL or Anon Key is missing in environment variables');
+    return;
+  }
+
+  try {
+    // Create an unauthenticated client
+    const supabase = createClient(supabaseUrl, supabaseAnonKey);
+
+    // Test insert into users table (should be denied)
+    console.log('\nTesting insert into users table:');
+    const { data: insertData, error: insertError } = await supabase
+      .from('users')
+      .insert([{ auth_id: 'test-auth-id', email: 'test@example.com' }]);
+
+    if (insertError) {
+      console.log('✅ RLS working: Cannot insert into users table');
+      console.log(`Error: ${insertError.message}`);
+    } else {
+      console.warn('⚠️ RLS not working: Inserted into users table without authentication!');
+    }
+
+    // Test select from users table (should be denied)
+    console.log('\nTesting select from users table:');
+    const { data: selectData, error: selectError } = await supabase.from('users').select('*');
+
+    if (selectError) {
+      console.log('✅ RLS working: Cannot select from users table');
+      console.log(`Error: ${selectError.message}`);
+    } else if (selectData.length === 0) {
+      console.log('⚠️ RLS partially working: Empty result returned instead of permission denied');
+    } else {
+      console.warn('⚠️ RLS not working: Retrieved data from users table without authentication!');
+    }
+
+    // Test select from stories table (should be denied)
+    console.log('\nTesting select from stories table:');
+    const { data: storiesData, error: storiesError } = await supabase.from('stories').select('*');
+
+    if (storiesError) {
+      console.log('✅ RLS working: Cannot select from stories table');
+      console.log(`Error: ${storiesError.message}`);
+    } else if (storiesData.length === 0) {
+      console.log('⚠️ RLS partially working: Empty result returned instead of permission denied');
+    } else {
+      console.warn('⚠️ RLS not working: Retrieved data from stories table without authentication!');
+    }
+  } catch (error) {
+    console.error('Error testing RLS:', error);
+  }
+}
+
+// Run the test
+testRls();
diff --git a/src/__tests__/api/ApiErrorHandler.test.ts b/src/__tests__/api/ApiErrorHandler.test.ts
deleted file mode 100644
index 4e4aec2e..00000000
--- a/src/__tests__/api/ApiErrorHandler.test.ts
+++ /dev/null
@@ -1,151 +0,0 @@
-import { ApiErrorHandler, ErrorCode } from '@/lib/api/ApiErrorHandler';
-import { NextResponse } from 'next/server';
-
-// Mock the logger
-jest.mock('@/utils/logger', () => ({
-  logger: {
-    error: jest.fn(),
-    warn: jest.fn(),
-    info: jest.fn(),
-  },
-}));
-
-// Mock NextResponse
-jest.mock('next/server', () => ({
-  NextResponse: {
-    json: jest.fn().mockImplementation((body, init) => ({
-      ...new Response(),
-      ...init,
-      json: () => Promise.resolve(body),
-      status: init?.status || 200,
-    })),
-  },
-}));
-
-describe('ApiErrorHandler', () => {
-  describe('handleError', () => {
-    it('should handle validation errors', async () => {
-      const error = new Error('validation failed');
-      const response = ApiErrorHandler.handleError(error);
-
-      expect(response).toBeDefined();
-      expect(response.status).toBe(400);
-
-      const body = await response.json();
-      expect(body.code).toBe(ErrorCode.VALIDATION_ERROR);
-      expect(body.error).toBe('validation failed');
-    });
-
-    it('should handle authentication errors', async () => {
-      const error = new Error('not authenticated');
-      const response = ApiErrorHandler.handleError(error);
-
-      expect(response.status).toBe(401);
-      const body = await response.json();
-      expect(body.code).toBe(ErrorCode.AUTHENTICATION_ERROR);
-      expect(body.error).toBe('Authentication required');
-    });
-
-    it('should handle authorization errors', async () => {
-      const error = new Error('not authorized');
-      const response = ApiErrorHandler.handleError(error);
-
-      expect(response.status).toBe(403);
-      const body = await response.json();
-      expect(body.code).toBe(ErrorCode.AUTHORIZATION_ERROR);
-      expect(body.error).toBe('Not authorized to perform this action');
-    });
-
-    it('should handle rate limit errors', async () => {
-      const error = new Error('rate limit exceeded');
-      const response = ApiErrorHandler.handleError(error);
-
-      expect(response.status).toBe(429);
-      const body = await response.json();
-      expect(body.code).toBe(ErrorCode.RATE_LIMIT_ERROR);
-      expect(body.error).toBe('Rate limit exceeded');
-    });
-
-    it('should handle circuit breaker errors', async () => {
-      const error = new Error('circuit breaker is open');
-      const response = ApiErrorHandler.handleError(error);
-
-      expect(response.status).toBe(503);
-      const body = await response.json();
-      expect(body.code).toBe(ErrorCode.CIRCUIT_BREAKER_ERROR);
-      expect(body.error).toBe('Service temporarily unavailable');
-    });
-
-    it('should handle database errors', async () => {
-      const error = new Error('database connection failed');
-      const response = ApiErrorHandler.handleError(error);
-
-      expect(response.status).toBe(500);
-      const body = await response.json();
-      expect(body.code).toBe(ErrorCode.DATABASE_ERROR);
-      expect(body.error).toBe('Database operation failed');
-    });
-
-    it('should handle cache errors', async () => {
-      const error = new Error('cache operation failed');
-      const response = ApiErrorHandler.handleError(error);
-
-      expect(response.status).toBe(500);
-      const body = await response.json();
-      expect(body.code).toBe(ErrorCode.CACHE_ERROR);
-      expect(body.error).toBe('Cache operation failed');
-    });
-
-    it('should handle unknown errors', async () => {
-      const error = new Error('some unknown error');
-      const response = ApiErrorHandler.handleError(error);
-
-      expect(response.status).toBe(500);
-      const body = await response.json();
-      expect(body.code).toBe(ErrorCode.UNKNOWN_ERROR);
-      expect(body.error).toBe('some unknown error');
-    });
-
-    it('should handle non-Error objects', async () => {
-      const error = { message: 'custom error object' };
-      const response = ApiErrorHandler.handleError(error);
-
-      expect(response.status).toBe(500);
-      const body = await response.json();
-      expect(body.code).toBe(ErrorCode.UNKNOWN_ERROR);
-      expect(body.error).toBe('An unexpected error occurred');
-    });
-  });
-
-  describe('createValidationError', () => {
-    it('should create validation error with errors array', () => {
-      const errors = ['Field 1 is required', 'Field 2 is invalid'];
-      const error = ApiErrorHandler.createValidationError(errors);
-
-      expect(error.code).toBe(ErrorCode.VALIDATION_ERROR);
-      expect(error.statusCode).toBe(400);
-      expect(error.message).toBe('Validation failed');
-      expect(error.details?.errors).toEqual(errors);
-    });
-  });
-
-  describe('createAuthenticationError', () => {
-    it('should create authentication error', () => {
-      const error = ApiErrorHandler.createAuthenticationError();
-
-      expect(error.code).toBe(ErrorCode.AUTHENTICATION_ERROR);
-      expect(error.statusCode).toBe(401);
-      expect(error.message).toBe('Authentication required');
-    });
-  });
-
-  describe('createAuthorizationError', () => {
-    it('should create authorization error', () => {
-      const error = ApiErrorHandler.createAuthorizationError();
-
-      expect(error.code).toBe(ErrorCode.AUTHORIZATION_ERROR);
-      expect(error.statusCode).toBe(403);
-      expect(error.message).toBe('Not authorized to perform this action');
-    });
-  });
-});
diff --git a/src/__tests__/circuit-breaker.test.ts b/src/__tests__/circuit-breaker.test.ts
new file mode 100644
index 00000000..16a4e494
--- /dev/null
+++ b/src/__tests__/circuit-breaker.test.ts
@@ -0,0 +1,181 @@
+import { jest } from '@jest/globals';
+import CircuitBreaker from 'opossum';
+import { openAICircuitBreaker, serializeError } from '@/utils/error-handlers';
+
+// Mock the logger
+jest.mock('@/utils/logger', () => ({
+  logger: {
+    debug: jest.fn(),
+    info: jest.fn(),
+    warn: jest.fn(),
+    error: jest.fn(),
+  },
+}));
+
+describe('CircuitBreaker', () => {
+  let circuitBreaker: CircuitBreaker<any>;
+
+  // Mock functions for testing
+  const successFn = jest.fn().mockResolvedValue('success');
+  const failureFn = jest.fn().mockRejectedValue(new Error('test error'));
+  const fallbackFn = jest.fn().mockReturnValue('fallback');
+
+  beforeEach(() => {
+    jest.clearAllMocks();
+    // Create a new circuit breaker for each test
+    circuitBreaker = new CircuitBreaker(async () => await successFn(), {
+      failureThreshold: 2,
+      resetTimeout: 1000, // 1 second
+      timeout: 3000, // 3 seconds
+    });
+
+    // Add fallback
+    circuitBreaker.fallback(() => fallbackFn());
+  });
+
+  test('should execute function successfully when circuit is closed', async () => {
+    const result = await circuitBreaker.fire();
+    expect(result).toBe('success');
+    expect(successFn).toHaveBeenCalledTimes(1);
+    expect(fallbackFn).not.toHaveBeenCalled();
+  });
+
+  test('should use fallback when function fails', async () => {
+    // Override the circuit breaker to use the failure function
+    circuitBreaker = new CircuitBreaker(async () => await failureFn(), {
+      failureThreshold: 2,
+      resetTimeout: 1000,
+      timeout: 3000,
+    });
+
+    // Add fallback
+    circuitBreaker.fallback(() => fallbackFn());
+
+    const result = await circuitBreaker.fire();
+    expect(result).toBe('fallback');
+    expect(failureFn).toHaveBeenCalledTimes(1);
+    expect(fallbackFn).toHaveBeenCalledTimes(1);
+  });
+
+  test('should open circuit after threshold failures', async () => {
+    // Override the circuit breaker to use the failure function
+    circuitBreaker = new CircuitBreaker(async () => await failureFn(), {
+      failureThreshold: 2,
+      resetTimeout: 1000,
+      timeout: 3000,
+    });
+
+    // Add fallback
+    circuitBreaker.fallback(() => fallbackFn());
+
+    // Spy on the 'open' event
+    const openSpy = jest.fn();
+    circuitBreaker.on('open', openSpy);
+
+    // First failure
+    await circuitBreaker.fire();
+    expect(failureFn).toHaveBeenCalledTimes(1);
+    expect(openSpy).not.toHaveBeenCalled();
+
+    // Second failure should open the circuit
+    await circuitBreaker.fire();
+    expect(failureFn).toHaveBeenCalledTimes(2);
+    expect(openSpy).toHaveBeenCalledTimes(1);
+
+    // Third call should use fallback without calling the function
+    failureFn.mockClear();
+    await circuitBreaker.fire();
+    expect(failureFn).not.toHaveBeenCalled();
+    expect(fallbackFn).toHaveBeenCalledTimes(3);
+  });
+
+  test('should close circuit after reset timeout', async () => {
+    // Override the circuit breaker to use the failure function initially
+    circuitBreaker = new CircuitBreaker(async () => await failureFn(), {
+      failureThreshold: 2,
+      resetTimeout: 100, // Very short timeout for testing
+      timeout: 3000,
+    });
+
+    // Add fallback
+    circuitBreaker.fallback(() => fallbackFn());
+
+    // Spy on the events
+    const openSpy = jest.fn();
+    const closeSpy = jest.fn();
+    const halfOpenSpy = jest.fn();
+
+    circuitBreaker.on('open', openSpy);
+    circuitBreaker.on('close', closeSpy);
+    circuitBreaker.on('halfOpen', halfOpenSpy);
+
+    // Trigger failures to open the circuit
+    await circuitBreaker.fire();
+    await circuitBreaker.fire();
+    expect(openSpy).toHaveBeenCalledTimes(1);
+
+    // Wait for the circuit to go half-open
+    await new Promise((resolve) => setTimeout(resolve, 150));
+
+    // Now switch to success function for the next call
+    circuitBreaker = new CircuitBreaker(async () => await successFn(), {
+      failureThreshold: 2,
+      resetTimeout: 100,
+      timeout: 3000,
+    });
+
+    // Add event listeners again
+    circuitBreaker.on('open', openSpy);
+    circuitBreaker.on('close', closeSpy);
+    circuitBreaker.on('halfOpen', halfOpenSpy);
+
+    // Add fallback
+    circuitBreaker.fallback(() => fallbackFn());
+
+    // This should close the circuit
+    await circuitBreaker.fire();
+    expect(successFn).toHaveBeenCalledTimes(1);
+    expect(closeSpy).toHaveBeenCalledTimes(1);
+  });
+});
+
+describe('openAICircuitBreaker', () => {
+  test('should be properly configured', () => {
+    expect(openAICircuitBreaker).toBeInstanceOf(CircuitBreaker);
+  });
+
+  test('should have event handlers registered', () => {
+    // This is a bit of a hack to check if event handlers are registered
+    // Opossum doesn't expose a way to check registered listeners directly
+    const listeners = (openAICircuitBreaker as any)._events;
+    expect(listeners).toBeDefined();
+    expect(Object.keys(listeners).length).toBeGreaterThan(0);
+  });
+});
+
+describe('serializeError', () => {
+  test('should serialize Error objects', () => {
+    const error = new Error('test error');
+    const serialized = serializeError(error);
+    expect(serialized.name).toBe('Error');
+    expect(serialized.message).toBe('test error');
+    expect(serialized.stack).toBeDefined();
+  });
+
+  test('should handle non-Error objects', () => {
+    const obj = { foo: 'bar' };
+    const serialized = serializeError(obj);
+    expect(serialized).toEqual(obj);
+  });
+
+  test('should handle primitive values', () => {
+    const serialized = serializeError('test');
+    expect(serialized.message).toBe('test');
+    expect(serialized.type).toBe('string');
+  });
+
+  test('should handle null/undefined', () => {
+    const serialized = serializeError(null);
+    expect(serialized.message).toBe('Unknown error (null or undefined)');
+  });
+});
diff --git a/src/__tests__/circuit-breaker/CircuitBreaker.test.ts b/src/__tests__/circuit-breaker/CircuitBreaker.test.ts
deleted file mode 100644
index 7356150e..00000000
--- a/src/__tests__/circuit-breaker/CircuitBreaker.test.ts
+++ /dev/null
@@ -1,119 +0,0 @@
-import { CircuitBreaker, CircuitState } from '@/lib/circuit-breaker/CircuitBreaker';
-
-// Mock the logger
-jest.mock('@/utils/logger', () => ({
-  logger: {
-    error: jest.fn(),
-    warn: jest.fn(),
-    info: jest.fn(),
-  },
-}));
-
-describe('CircuitBreaker', () => {
-  let circuitBreaker: CircuitBreaker;
-  const successOperation = jest.fn().mockResolvedValue('success');
-  const failureOperation = jest.fn().mockRejectedValue(new Error('operation failed'));
-  const fallbackOperation = jest.fn().mockResolvedValue('fallback');
-
-  beforeEach(() => {
-    jest.clearAllMocks();
-    circuitBreaker = new CircuitBreaker({
-      failureThreshold: 2,
-      resetTimeout: 1000,
-      name: 'test-breaker',
-    });
-  });
-
-  describe('execute', () => {
-    it('should execute successful operation', async () => {
-      const result = await circuitBreaker.execute(successOperation);
-      expect(result).toBe('success');
-      expect(successOperation).toHaveBeenCalledTimes(1);
-      expect(circuitBreaker.getState()).toBe(CircuitState.CLOSED);
-      expect(circuitBreaker.getFailureCount()).toBe(0);
-    });
-
-    it('should use fallback when operation fails', async () => {
-      const result = await circuitBreaker.execute(failureOperation, fallbackOperation);
-      expect(result).toBe('fallback');
-      expect(failureOperation).toHaveBeenCalledTimes(1);
-      expect(fallbackOperation).toHaveBeenCalledTimes(1);
-      expect(circuitBreaker.getFailureCount()).toBe(1);
-    });
-
-    it('should trip breaker after failure threshold', async () => {
-      // First failure
-      await circuitBreaker.execute(failureOperation, fallbackOperation);
-      expect(circuitBreaker.getState()).toBe(CircuitState.CLOSED);
-      expect(circuitBreaker.getFailureCount()).toBe(1);
-
-      // Second failure - should trip breaker
-      await circuitBreaker.execute(failureOperation, fallbackOperation);
-      expect(circuitBreaker.getState()).toBe(CircuitState.OPEN);
-      expect(circuitBreaker.getFailureCount()).toBe(2);
-
-      // Should immediately use fallback when open
-      const result = await circuitBreaker.execute(successOperation, fallbackOperation);
-      expect(result).toBe('fallback');
-      expect(successOperation).not.toHaveBeenCalled();
-    });
-
-    it('should attempt reset after timeout', async () => {
-      // Trip the breaker
-      await circuitBreaker.execute(failureOperation, fallbackOperation);
-      await circuitBreaker.execute(failureOperation, fallbackOperation);
-      expect(circuitBreaker.getState()).toBe(CircuitState.OPEN);
-
-      // Wait for reset timeout
-      await new Promise((resolve) => setTimeout(resolve, 1100));
-
-      // Should enter half-open state and try operation
-      const result = await circuitBreaker.execute(successOperation, fallbackOperation);
-      expect(result).toBe('success');
-      expect(circuitBreaker.getState()).toBe(CircuitState.CLOSED);
-    });
-
-    it('should remain open if reset attempt fails', async () => {
-      // Trip the breaker
-      await circuitBreaker.execute(failureOperation, fallbackOperation);
-      await circuitBreaker.execute(failureOperation, fallbackOperation);
-      expect(circuitBreaker.getState()).toBe(CircuitState.OPEN);
-
-      // Wait for reset timeout
-      await new Promise((resolve) => setTimeout(resolve, 1100));
-
-      // Should enter half-open state but fail again
-      await circuitBreaker.execute(failureOperation, fallbackOperation);
-      expect(circuitBreaker.getState()).toBe(CircuitState.OPEN);
-    });
-  });
-
-  describe('reset', () => {
-    it('should manually reset the circuit breaker', async () => {
-      // Trip the breaker
-      await circuitBreaker.execute(failureOperation, fallbackOperation);
-      await circuitBreaker.execute(failureOperation, fallbackOperation);
-      expect(circuitBreaker.getState()).toBe(CircuitState.OPEN);
-
-      // Manual reset
-      circuitBreaker.reset();
-      expect(circuitBreaker.getState()).toBe(CircuitState.CLOSED);
-      expect(circuitBreaker.getFailureCount()).toBe(0);
-
-      // Should execute normally
-      const result = await circuitBreaker.execute(successOperation);
-      expect(result).toBe('success');
-    });
-  });
-
-  describe('error handling', () => {
-    it('should throw error when no fallback provided', async () => {
-      await expect(circuitBreaker.execute(failureOperation)).rejects.toThrow('operation failed');
-    });
-
-    it('should handle non-Error rejections', async () => {
-      const nonErrorOperation = jest.fn().mockRejectedValue('string error');
-      await expect(circuitBreaker.execute(nonErrorOperation)).rejects.toBe('string error');
-    });
-  });
-});
diff --git a/src/__tests__/services/UserPersonalizationEngine.test.ts b/src/__tests__/services/UserPersonalizationEngine.test.ts
deleted file mode 100644
index 621e069f..00000000
--- a/src/__tests__/services/UserPersonalizationEngine.test.ts
+++ /dev/null
@@ -1,145 +0,0 @@
-import { vi } from 'vitest';
-
-// Mock the environment module
-jest.mock('../../config/env', () => ({
-  env: {
-    NODE_ENV: 'test',
-    LOG_LEVEL: 'error',
-    GEMINI_API_KEY: 'test-key',
-    NEXT_PUBLIC_API_URL: 'http://localhost:3000',
-    KV_URL: 'test-url',
-    UPSTASH_REDIS_REST_URL: 'https://test-url.upstash.io',
-    UPSTASH_REDIS_REST_TOKEN: 'test-token',
-    KV_REST_API_READ_ONLY_TOKEN: 'test-readonly-token',
-  },
-  default: {
-    NODE_ENV: 'test',
-    LOG_LEVEL: 'error',
-    GEMINI_API_KEY: 'test-key',
-    NEXT_PUBLIC_API_URL: 'http://localhost:3000',
-    KV_URL: 'test-url',
-    UPSTASH_REDIS_REST_URL: 'https://test-url.upstash.io',
-    UPSTASH_REDIS_REST_TOKEN: 'test-token',
-    KV_REST_API_READ_ONLY_TOKEN: 'test-readonly-token',
-  },
-}));
-
-import { UserPersonalizationEngine } from '../../services/personalizationEngine';
-import { StoryInput, StoryTheme, StoryGender } from '../../types/story';
-import { kv } from '@vercel/kv';
-import { geminiCircuitBreaker } from '../../utils/error-handlers';
-
-// Mock @vercel/kv
-jest.mock('@vercel/kv', () => ({
-  kv: {
-    get: jest.fn(),
-    set: jest.fn(),
-    hgetall: jest.fn(),
-    hset: jest.fn(),
-  },
-}));
-
-// Mock the fetch function
-global.fetch = vi.fn();
-
-describe('UserPersonalizationEngine', () => {
-  let engine: UserPersonalizationEngine;
-  const mockUserId = 'test-user-123';
-  const mockStoryInput: StoryInput = {
-    childName: 'Test Child',
-    gender: 'neutral' as StoryGender,
-    theme: 'adventure' as StoryTheme,
-    interests: ['space', 'dinosaurs'],
-    favoriteCharacters: ['dragon', 'unicorn'],
-  };
-
-  beforeEach(() => {
-    engine = new UserPersonalizationEngine(mockUserId);
-    vi.clearAllMocks();
-  });
-
-  describe('generatePersonalizedStory', () => {
-    it('should generate a new story when no cached version exists', async () => {
-      // Mock KV cache miss
-      (kv.get as jest.Mock).mockResolvedValue(null);
-
-      // Mock successful API response
-      (global.fetch as jest.Mock).mockResolvedValue({
-        ok: true,
-        json: () =>
-          Promise.resolve({
-            content: '# Test Story\nThis is a test story content.',
-            model: 'gemini-pro',
-          }),
-      });
-
-      const story = await engine.generatePersonalizedStory(mockStoryInput);
-
-      expect(story).toBeDefined();
-      expect(story.title).toBe('Test Story');
-      expect(story.content).toBe('This is a test story content.');
-      expect(story.theme).toBe(mockStoryInput.theme);
-      expect(story.input).toEqual(mockStoryInput);
-      expect(story.metadata.fallback).toBeUndefined();
-    });
-
-    it('should return cached story when available', async () => {
-      const cachedContent = '# Cached Story\nThis is a cached story.';
-      (kv.get as jest.Mock).mockResolvedValue(cachedContent);
-
-      const story = await engine.generatePersonalizedStory(mockStoryInput);
-
-      expect(story).toBeDefined();
-      expect(story.title).toBe('Cached Story');
-      expect(story.content).toBe('This is a cached story.');
-      expect(global.fetch).not.toHaveBeenCalled();
-    });
-
-    it('should use fallback when API fails', async () => {
-      (kv.get as jest.Mock).mockResolvedValue(null);
-      (global.fetch as jest.Mock).mockRejectedValue(new Error('API Error'));
-
-      const story = await engine.generatePersonalizedStory(mockStoryInput);
-
-      expect(story).toBeDefined();
-      expect(story.metadata.fallback).toBe(true);
-      expect(story.metadata.error).toBe('API Error');
-    });
-
-    it('should handle circuit breaker events', async () => {
-      (kv.get as jest.Mock).mockResolvedValue(null);
-
-      // Simulate circuit breaker opening
-      geminiCircuitBreaker.open();
-
-      const story = await engine.generatePersonalizedStory(mockStoryInput);
-
-      expect(story).toBeDefined();
-      expect(story.metadata.fallback).toBe(true);
-      expect(story.metadata.error).toContain('Circuit Breaker is open');
-    });
-  });
-
-  describe('getPronouns', () => {
-    it.each([
-      ['female', { subject: 'she', possessive: 'her' }],
-      ['male', { subject: 'he', possessive: 'him' }],
-      ['neutral', { subject: 'they', possessive: 'them' }],
-    ])('should return correct pronouns for %s gender', (gender, expected) => {
-      const pronouns = engine['getPronouns'](gender as StoryGender);
-      expect(pronouns).toEqual(expected);
-    });
-  });
-
-  describe('suggestCharacterTraits', () => {
-    it('should return appropriate traits for each theme', () => {
-      const themes: StoryTheme[] = ['adventure', 'fantasy', 'mystery', 'science', 'nature'];
-
-      themes.forEach((theme) => {
-        const traits = engine.suggestCharacterTraits(theme);
-        expect(traits).toHaveLength(2);
-        expect(traits.every((trait) => typeof trait === 'string')).toBe(true);
-      });
-    });
-  });
-});
diff --git a/src/__tests__/setup.ts b/src/__tests__/setup.ts
deleted file mode 100644
index bc50ea92..00000000
--- a/src/__tests__/setup.ts
+++ /dev/null
@@ -1,41 +0,0 @@
-import '@testing-library/jest-dom';
-import { vi } from 'vitest';
-
-// Mock OpenTelemetry
-vi.mock('@opentelemetry/api', () => ({
-  trace: {
-    getTracer: () => ({
-      startSpan: () => ({
-        end: () => {},
-      }),
-    }),
-  },
-}));
-
-// Mock window.fetch
-global.fetch = vi.fn();
-
-// Mock localStorage
-const localStorageMock = {
-  getItem: vi.fn(),
-  setItem: vi.fn(),
-  clear: vi.fn(),
-  removeItem: vi.fn(),
-  length: 0,
-  key: vi.fn(),
-};
-
-global.localStorage = localStorageMock;
-
-// Mock window.location
-Object.defineProperty(window, 'location', {
-  value: {
-    origin: 'http://localhost:3000',
-  },
-  writable: true,
-});
-
-// Reset all mocks before each test
-beforeEach(() => {
-  vi.clearAllMocks();
-});
diff --git a/src/__tests__/story-generators/BaseStoryGenerator.test.ts b/src/__tests__/story-generators/BaseStoryGenerator.test.ts
deleted file mode 100644
index be488252..00000000
--- a/src/__tests__/story-generators/BaseStoryGenerator.test.ts
+++ /dev/null
@@ -1,145 +0,0 @@
-import { StoryRequest, StoryGender, StoryTheme, StoryMood, ReadingLevel } from '@/types/story';
-import { CircuitBreaker } from '@/lib/circuit-breaker/CircuitBreaker';
-import { logger } from '@/utils/logger';
-
-// Mock the CircuitBreaker
-jest.mock('@/lib/circuit-breaker/CircuitBreaker');
-jest.mock('@/utils/logger');
-
-abstract class BaseStoryGenerator {
-  protected abstract generateStoryImpl(request: StoryRequest): Promise<string>;
-
-  protected async generateFallbackStory(request: StoryRequest): Promise<string> {
-    return `A simple story about ${request.childName}'s ${request.theme} adventure.`;
-  }
-
-  public async generateStory(request: StoryRequest): Promise<string> {
-    const circuitBreaker = new CircuitBreaker({
-      failureThreshold: 2,
-      resetTimeout: 1000,
-      name: 'story-generator',
-    });
-
-    return circuitBreaker.execute(
-      () => this.generateStoryImpl(request),
-      () => this.generateFallbackStory(request)
-    );
-  }
-}
-
-class TestStoryGenerator extends BaseStoryGenerator {
-  protected async generateStoryImpl(request: StoryRequest): Promise<string> {
-    return 'test story';
-  }
-}
-
-describe('BaseStoryGenerator', () => {
-  let storyGenerator: TestStoryGenerator;
-  let mockCircuitBreaker: jest.Mocked<CircuitBreaker>;
-
-  const mockRequest: StoryRequest = {
-    childName: 'Test Child',
-    gender: 'boy' as StoryGender,
-    theme: 'adventure' as StoryTheme,
-    interests: ['space', 'dinosaurs'],
-    favoriteCharacters: ['astronaut', 't-rex'],
-    traits: ['brave', 'curious'],
-    mood: 'happy' as StoryMood,
-    readingLevel: 'beginner' as ReadingLevel,
-  };
-
-  beforeEach(() => {
-    jest.clearAllMocks();
-    mockCircuitBreaker = new CircuitBreaker({
-      failureThreshold: 2,
-      resetTimeout: 1000,
-      name: 'test-breaker',
-    }) as jest.Mocked<CircuitBreaker>;
-    storyGenerator = new TestStoryGenerator();
-  });
-
-  describe('generateStory', () => {
-    it('should successfully generate a story', async () => {
-      const expectedStory = 'test story';
-      mockCircuitBreaker.execute.mockImplementation(async (fn) => {
-        return fn();
-      });
-
-      const story = await storyGenerator.generateStory(mockRequest);
-      expect(story).toBe(expectedStory);
-      expect(mockCircuitBreaker.execute).toHaveBeenCalledTimes(1);
-    });
-
-    it('should use fallback when primary generation fails', async () => {
-      const fallbackStory = 'fallback story';
-      mockCircuitBreaker.execute.mockImplementation(async (fn, fallback) => {
-        try {
-          await fn();
-        } catch {
-          return fallback ? fallback() : undefined;
-        }
-      });
-
-      // Mock the primary generation to fail
-      jest
-        .spyOn(storyGenerator as any, 'generateStoryImpl')
-        .mockRejectedValueOnce(new Error('Generation failed'));
-
-      // Mock the fallback generation to succeed
-      jest
-        .spyOn(storyGenerator as any, 'generateFallbackStory')
-        .mockResolvedValueOnce(fallbackStory);
-
-      const story = await storyGenerator.generateStory(mockRequest);
-      expect(story).toBe(fallbackStory);
-      expect(mockCircuitBreaker.execute).toHaveBeenCalledTimes(1);
-      expect(logger.error).toHaveBeenCalledWith(
-        expect.stringContaining('Failed to generate story'),
-        expect.any(Error)
-      );
-    });
-
-    it('should throw error when both primary and fallback fail', async () => {
-      mockCircuitBreaker.execute.mockImplementation(async (fn, fallback) => {
-        try {
-          await fn();
-        } catch {
-          if (fallback) {
-            return fallback();
-          }
-          throw new Error('Both operations failed');
-        }
-      });
-
-      // Mock both primary and fallback to fail
-      jest
-        .spyOn(storyGenerator as any, 'generateStoryImpl')
-        .mockRejectedValueOnce(new Error('Primary failed'));
-      jest
-        .spyOn(storyGenerator as any, 'generateFallbackStory')
-        .mockRejectedValueOnce(new Error('Fallback failed'));
-
-      await expect(storyGenerator.generateStory(mockRequest)).rejects.toThrow(
-        'Both operations failed'
-      );
-      expect(mockCircuitBreaker.execute).toHaveBeenCalledTimes(1);
-      expect(logger.error).toHaveBeenCalledTimes(2);
-    });
-
-    it('should handle non-Error rejections', async () => {
-      mockCircuitBreaker.execute.mockRejectedValueOnce('String error');
-
-      await expect(storyGenerator.generateStory(mockRequest)).rejects.toBe('String error');
-      expect(mockCircuitBreaker.execute).toHaveBeenCalledTimes(1);
-    });
-  });
-
-  describe('generateFallbackStory', () => {
-    it('should generate a simple fallback story', async () => {
-      const fallbackStory = await (storyGenerator as any).generateFallbackStory(mockRequest);
-      expect(typeof fallbackStory).toBe('string');
-      expect(fallbackStory).toContain(mockRequest.childName);
-      expect(fallbackStory).toContain(mockRequest.theme);
-    });
-  });
-});
diff --git a/src/__tests__/validators/StoryRequestValidator.test.ts b/src/__tests__/validators/StoryRequestValidator.test.ts
deleted file mode 100644
index dafa59b9..00000000
--- a/src/__tests__/validators/StoryRequestValidator.test.ts
+++ /dev/null
@@ -1,151 +0,0 @@
-import { StoryRequestValidator } from '@/lib/validators/StoryRequestValidator';
-import { StoryInput } from '@/types/story';
-
-describe('StoryRequestValidator', () => {
-  describe('validateStoryInput', () => {
-    const validInput: StoryInput = {
-      childName: 'John',
-      gender: 'boy',
-      theme: 'adventure',
-      mood: 'happy',
-      readingLevel: 'intermediate',
-      interests: ['space', 'dinosaurs'],
-      favoriteCharacters: ['dragon', 'unicorn'],
-      traits: ['brave', 'curious'],
-    };
-
-    it('should accept valid input', () => {
-      const result = StoryRequestValidator.validateStoryInput(validInput);
-      expect(result.isValid).toBe(true);
-      expect(result.errors).toHaveLength(0);
-    });
-
-    it('should accept minimal valid input', () => {
-      const minimalInput = {
-        childName: 'John',
-        gender: 'boy',
-        theme: 'adventure',
-      } as StoryInput;
-      const result = StoryRequestValidator.validateStoryInput(minimalInput);
-      expect(result.isValid).toBe(true);
-      expect(result.errors).toHaveLength(0);
-    });
-
-    describe('Required Fields', () => {
-      it('should require childName', () => {
-        const input = { ...validInput, childName: undefined };
-        const result = StoryRequestValidator.validateStoryInput(input);
-        expect(result.isValid).toBe(false);
-        expect(result.errors).toContain('Child name is required');
-      });
-
-      it('should require gender', () => {
-        const input = { ...validInput, gender: undefined };
-        const result = StoryRequestValidator.validateStoryInput(input);
-        expect(result.isValid).toBe(false);
-        expect(result.errors).toContain('Gender is required');
-      });
-
-      it('should require theme', () => {
-        const input = { ...validInput, theme: undefined };
-        const result = StoryRequestValidator.validateStoryInput(input);
-        expect(result.isValid).toBe(false);
-        expect(result.errors).toContain('Theme is required');
-      });
-    });
-
-    describe('Field Validation', () => {
-      it('should validate childName length', () => {
-        const input = { ...validInput, childName: 'a'.repeat(51) };
-        const result = StoryRequestValidator.validateStoryInput(input);
-        expect(result.isValid).toBe(false);
-        expect(result.errors).toContain('Child name must be less than 50 characters');
-      });
-
-      it('should validate gender values', () => {
-        const input = { ...validInput, gender: 'invalid' as any };
-        const result = StoryRequestValidator.validateStoryInput(input);
-        expect(result.isValid).toBe(false);
-        expect(result.errors).toContain('Invalid gender value');
-      });
-
-      it('should validate theme values', () => {
-        const input = { ...validInput, theme: 'invalid' as any };
-        const result = StoryRequestValidator.validateStoryInput(input);
-        expect(result.isValid).toBe(false);
-        expect(result.errors).toContain('Invalid theme value');
-      });
-
-      it('should validate mood values', () => {
-        const input = { ...validInput, mood: 'invalid' as any };
-        const result = StoryRequestValidator.validateStoryInput(input);
-        expect(result.isValid).toBe(false);
-        expect(result.errors).toContain('Invalid mood value');
-      });
-
-      it('should validate reading level values', () => {
-        const input = { ...validInput, readingLevel: 'invalid' as any };
-        const result = StoryRequestValidator.validateStoryInput(input);
-        expect(result.isValid).toBe(false);
-        expect(result.errors).toContain('Invalid reading level');
-      });
-    });
-
-    describe('Array Length Validation', () => {
-      it('should validate interests length', () => {
-        const input = { ...validInput, interests: Array(11).fill('interest') };
-        const result = StoryRequestValidator.validateStoryInput(input);
-        expect(result.isValid).toBe(false);
-        expect(result.errors).toContain('Maximum 10 interests allowed');
-      });
-
-      it('should validate favorite characters length', () => {
-        const input = { ...validInput, favoriteCharacters: Array(11).fill('character') };
-        const result = StoryRequestValidator.validateStoryInput(input);
-        expect(result.isValid).toBe(false);
-        expect(result.errors).toContain('Maximum 10 favorite characters allowed');
-      });
-
-      it('should validate traits length', () => {
-        const input = { ...validInput, traits: Array(11).fill('trait') };
-        const result = StoryRequestValidator.validateStoryInput(input);
-        expect(result.isValid).toBe(false);
-        expect(result.errors).toContain('Maximum 10 traits allowed');
-      });
-    });
-
-    describe('String Sanitization', () => {
-      it('should sanitize childName', () => {
-        const input = { ...validInput, childName: ' John <script>alert(1)</script> ' };
-        const result = StoryRequestValidator.validateStoryInput(input);
-        expect(result.isValid).toBe(true);
-        expect(input.childName).toBe('John alert(1)');
-      });
-
-      it('should sanitize arrays of strings', () => {
-        const input = {
-          ...validInput,
-          interests: [' space <b>rocks</b> ', ' <i>cool</i> dinosaurs '],
-        };
-        const result = StoryRequestValidator.validateStoryInput(input);
-        expect(result.isValid).toBe(true);
-        expect(input.interests).toEqual(['space rocks', 'cool dinosaurs']);
-      });
-    });
-
-    describe('Multiple Errors', () => {
-      it('should return multiple validation errors', () => {
-        const input = {
-          childName: 'a'.repeat(51),
-          gender: 'invalid' as any,
-          theme: 'invalid' as any,
-          mood: 'invalid' as any,
-          interests: Array(11).fill('interest'),
-        };
-        const result = StoryRequestValidator.validateStoryInput(input);
-        expect(result.isValid).toBe(false);
-        expect(result.errors).toHaveLength(5);
-      });
-    });
-  });
-});
diff --git a/src/app/api/generateStory/route.ts b/src/app/api/generateStory/route.ts
index 7479025f..0842b279 100644
--- a/src/app/api/generateStory/route.ts
+++ b/src/app/api/generateStory/route.ts
@@ -35,9 +35,9 @@ interface ApiError {
 /**
  * Checks if caching is available based on environment variables
  */
-function isCachingEnabled(): boolean {
-  return env.ENABLE_CACHING && !!env.UPSTASH_REDIS_REST_URL && !!env.UPSTASH_REDIS_REST_TOKEN;
-}
+const isCachingEnabled = (): boolean => {
+  return env.ENABLE_CACHING && !!env.KV_REST_API_URL && !!env.KV_REST_API_TOKEN;
+};
 
 /**
  * Type guard to check if an error is an API quota error
diff --git a/src/app/api/openai/route.ts b/src/app/api/openai/route.ts
index ba730fb9..c728a2b1 100644
--- a/src/app/api/openai/route.ts
+++ b/src/app/api/openai/route.ts
@@ -1,5 +1,4 @@
 import { NextRequest, NextResponse } from 'next/server';
-import OpenAI from 'openai';
 import { getAuth } from '@clerk/nextjs/server';
 import { logger } from '@/utils/logger';
 import {
@@ -10,31 +9,95 @@ import {
   type OpenAIErrorResponse,
 } from '@/utils/error-handlers';
 
-// Initialize OpenAI client with better error handling
-let openai: OpenAI;
-try {
-  const apiKey = process.env.OPENAI_API_KEY;
-  if (!apiKey) {
-    logger.error('OpenAI API key is not defined in environment variables');
-  } else {
-    // Log API key format (safely) for debugging
-    const keyType = apiKey.startsWith('sk-proj-') ? 'project' : 'standard';
-    logger.info(`Initializing OpenAI client with ${keyType} API key format`);
-
-    openai = new OpenAI({
-      apiKey: apiKey,
-      dangerouslyAllowBrowser: false,
-      timeout: 30000, // 30 second timeout (increased from 15s)
-      maxRetries: 2,
+// OpenAI API configuration
+const OPENAI_API_URL = 'https://api.openai.com/v1/chat/completions';
+const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
+
+// Log API key format for debugging (safely)
+if (OPENAI_API_KEY) {
+  const keyType = OPENAI_API_KEY.startsWith('sk-proj-') ? 'project' : 'standard';
+  const maskedKey =
+    OPENAI_API_KEY.substring(0, 7) + '...' + OPENAI_API_KEY.substring(OPENAI_API_KEY.length - 3);
+  logger.info(`OpenAI API key format: ${keyType}`, { keyFormat: maskedKey });
+} else {
+  logger.error('OpenAI API key is not defined in environment variables');
+}
+
+/**
+ * Direct call to OpenAI API using fetch instead of the client library
+ */
+async function callOpenAIDirectly(messages: any[], model: string = 'gpt-3.5-turbo') {
+  if (!OPENAI_API_KEY) {
+    throw new Error('OpenAI API key is not configured');
+  }
+
+  try {
+    logger.debug('Making direct OpenAI API call', { model });
+
+    const response = await fetch(OPENAI_API_URL, {
+      method: 'POST',
+      headers: {
+        'Content-Type': 'application/json',
+        Authorization: `Bearer ${OPENAI_API_KEY}`,
+      },
+      body: JSON.stringify({
+        model,
+        messages,
+        temperature: 0.7,
+        max_tokens: 1000,
+      }),
     });
 
-    const maskedKey = apiKey.substring(0, 7) + '...' + apiKey.substring(apiKey.length - 3);
-    logger.info('OpenAI client initialized successfully', {
-      keyFormat: maskedKey,
+    if (!response.ok) {
+      const errorData = await response
+        .json()
+        .catch(() => ({ error: 'Failed to parse error response' }));
+
+      // Log detailed information about the error
+      logger.error('Direct OpenAI API call failed', {
+        status: response.status,
+        statusText: response.statusText,
+        error: errorData,
+        url: OPENAI_API_URL,
+        headers: {
+          'Content-Type': 'application/json',
+          // Don't log the full Authorization header for security reasons
+          Authorization: 'Bearer sk-***',
+        },
+      });
+
+      // Check for specific OpenAI server errors
+      if (response.status === 500) {
+        logger.warn('OpenAI server error detected (500)', {
+          message: "This is an issue on OpenAI's servers, not with our code.",
+        });
+        throw new Error(
+          'OpenAI server error: The server had an error while processing your request.'
+        );
+      }
+
+      throw new Error(
+        `OpenAI API returned ${response.status}: ${errorData.error || response.statusText}`
+      );
+    }
+
+    const data = await response.json();
+    logger.info('Direct OpenAI API call successful', {
+      model: data.model,
+      usage: data.usage,
     });
+
+    return data;
+  } catch (error) {
+    // Check if it's a network error (like CORS, timeout, etc.)
+    if (error instanceof TypeError && error.message.includes('fetch')) {
+      logger.error('Network error when calling OpenAI API', { error: error.message });
+      throw new Error('Network error when calling OpenAI API: ' + error.message);
+    }
+
+    logger.error('Error in direct OpenAI API call', serializeError(error));
+    throw error;
   }
-} catch (error) {
-  logger.error('Failed to initialize OpenAI client', serializeError(error));
 }
 
 /**
@@ -51,7 +114,7 @@ async function handleGenerateStory(params: any, userId: string) {
     }
 
     // Validate API key
-    if (!validateApiKey(process.env.OPENAI_API_KEY)) {
+    if (!validateApiKey(OPENAI_API_KEY)) {
       return NextResponse.json(
         { error: 'API configuration error', message: 'OpenAI API key is not configured' },
         { status: 500 }
@@ -67,31 +130,6 @@ async function handleGenerateStory(params: any, userId: string) {
       interests: params.interests || [],
     });
 
-    // Make sure OpenAI client is initialized
-    if (!openai) {
-      logger.error('OpenAI client is not initialized, initializing now');
-      try {
-        const apiKey = process.env.OPENAI_API_KEY;
-        if (!apiKey) {
-          throw new Error('OpenAI API key is not defined in environment variables');
-        }
-
-        openai = new OpenAI({
-          apiKey: apiKey,
-          dangerouslyAllowBrowser: false,
-          timeout: 30000,
-          maxRetries: 3,
-        });
-        logger.info('Successfully initialized OpenAI client');
-      } catch (initError) {
-        logger.error('Failed to initialize OpenAI client', serializeError(initError));
-        throw new Error(
-          'Could not initialize OpenAI client: ' +
-            (initError instanceof Error ? initError.message : 'Unknown error')
-        );
-      }
-    }
-
     // Prepare the prompt
     const prompt = `
       Create a short bedtime story for a child named ${params.childName}.
@@ -102,30 +140,87 @@ async function handleGenerateStory(params: any, userId: string) {
       Keep it under 500 words.
     `;
 
-    // Call OpenAI API with timeout and retry logic
-    let response;
+    // Call OpenAI API directly with timeout and retry logic
     try {
-      logger.debug('Calling OpenAI API with timeout');
-
-      // Use Promise.race to implement a timeout
-      response = (await Promise.race([
-        openai.chat.completions.create({
-          model: 'gpt-3.5-turbo',
-          messages: [
-            { role: 'system', content: "You are a creative children's storyteller." },
-            { role: 'user', content: prompt },
-          ],
-          temperature: 0.7,
-          max_tokens: 1000,
-        }),
-        // Add a timeout to prevent hanging requests
-        new Promise((_, reject) =>
-          setTimeout(() => reject(new Error('OpenAI API request timeout')), 30000)
-        ),
-      ])) as OpenAI.Chat.Completions.ChatCompletion;
+      const messages = [
+        { role: 'system', content: "You are a creative children's storyteller." },
+        { role: 'user', content: prompt },
+      ];
+
+      // Implement retry logic for OpenAI server errors
+      let retryCount = 0;
+      const maxRetries = 2;
+      let lastError: Error | null = null;
+
+      while (retryCount <= maxRetries) {
+        try {
+          // Use AbortController for timeout
+          const controller = new AbortController();
+          const timeoutId = setTimeout(() => {
+            controller.abort();
+            logger.warn('Aborting direct OpenAI API call due to timeout');
+          }, 45000); // 45 second timeout
+
+          // Make the API call with timeout
+          const fetchPromise = callOpenAIDirectly(messages);
+          const response = await Promise.race([
+            fetchPromise,
+            new Promise((_, reject) =>
+              setTimeout(() => reject(new Error('OpenAI API request timeout')), 45000)
+            ),
+          ]);
+
+          clearTimeout(timeoutId);
+
+          // Extract and return the story content
+          const content =
+            response.choices[0]?.message?.content || generateFallbackStoryUtil(params);
+
+          logger.info('Story generated successfully', {
+            userId,
+            contentLength: content.length,
+            model: response.model,
+            usage: response.usage,
+          });
+
+          return NextResponse.json({
+            content,
+            model: response.model,
+            usage: response.usage,
+          });
+        } catch (error) {
+          lastError = error instanceof Error ? error : new Error(String(error));
+
+          // Only retry on server errors (500)
+          if (lastError.message.includes('500') || lastError.message.includes('server error')) {
+            retryCount++;
+            const retryDelay = retryCount * 1000; // Exponential backoff
+
+            logger.warn(`OpenAI server error, retrying (${retryCount}/${maxRetries})`, {
+              error: lastError.message,
+              retryDelay,
+            });
+
+            // Wait before retrying
+            await new Promise((resolve) => setTimeout(resolve, retryDelay));
+          } else {
+            // For other errors, don't retry
+            throw lastError;
+          }
+        }
+      }
+
+      // If we've exhausted retries, throw the last error
+      if (lastError) {
+        logger.error('Exhausted retries for OpenAI API call', {
+          error: lastError.message,
+          retries: maxRetries,
+        });
+        throw lastError;
+      }
     } catch (apiError) {
       // Log the specific API error
-      logger.error('OpenAI API call failed', serializeError(apiError));
+      logger.error('OpenAI API call failed after retries', serializeError(apiError));
 
       // Generate fallback content
       const fallbackContent = generateFallbackStoryUtil(params);
@@ -141,22 +236,6 @@ async function handleGenerateStory(params: any, userId: string) {
         { status: 503 }
       ); // Service Unavailable
     }
-
-    // Extract and return the story content
-    const content = response.choices[0]?.message?.content || generateFallbackStoryUtil(params);
-
-    logger.info('Story generated successfully', {
-      userId,
-      contentLength: content.length,
-      model: response.model,
-      usage: response.usage,
-    });
-
-    return NextResponse.json({
-      content,
-      model: response.model,
-      usage: response.usage,
-    });
   } catch (error) {
     // Handle OpenAI API errors
     const errorResponse = handleOpenAIError(error);
@@ -196,7 +275,7 @@ async function handleChatCompletion(params: any, userId: string) {
     }
 
     // Validate API key
-    if (!validateApiKey(process.env.OPENAI_API_KEY)) {
+    if (!validateApiKey(OPENAI_API_KEY)) {
       return NextResponse.json(
         { error: 'API configuration error', message: 'OpenAI API key is not configured' },
         { status: 500 }
@@ -209,29 +288,38 @@ async function handleChatCompletion(params: any, userId: string) {
       messageCount: params.messages.length,
     });
 
-    // Call OpenAI API
-    const response = await openai.chat.completions.create({
-      model: params.model || 'gpt-3.5-turbo',
-      messages: params.messages,
-      temperature: params.temperature || 0.7,
-      max_tokens: params.maxTokens || 500,
-    });
-
-    // Extract and return the content
-    const content = response.choices[0]?.message?.content || '';
-
-    logger.info('Chat completion generated successfully', {
-      userId,
-      contentLength: content.length,
-      model: response.model,
-      usage: response.usage,
-    });
+    // Call OpenAI API directly
+    try {
+      const response = await callOpenAIDirectly(params.messages, params.model || 'gpt-3.5-turbo');
+
+      // Extract and return the content
+      const content = response.choices[0]?.message?.content || '';
+
+      logger.info('Chat completion generated successfully', {
+        userId,
+        contentLength: content.length,
+        model: response.model,
+        usage: response.usage,
+      });
+
+      return NextResponse.json({
+        content,
+        model: response.model,
+        usage: response.usage,
+      });
+    } catch (apiError) {
+      // Log the specific API error
+      logger.error('OpenAI API call failed', serializeError(apiError));
 
-    return NextResponse.json({
-      content,
-      model: response.model,
-      usage: response.usage,
-    });
+      // Return error
+      return NextResponse.json(
+        {
+          error: 'OpenAI API error',
+          message: apiError instanceof Error ? apiError.message : 'Unknown error occurred',
+        },
+        { status: 503 }
+      ); // Service Unavailable
+    }
   } catch (error) {
     // Handle OpenAI API errors
     const errorResponse = handleOpenAIError(error);
diff --git a/src/app/api/story/generate/route.ts b/src/app/api/story/generate/route.ts
index 0c84a746..ed80b52e 100644
--- a/src/app/api/story/generate/route.ts
+++ b/src/app/api/story/generate/route.ts
@@ -1,11 +1,22 @@
 import { NextRequest, NextResponse } from 'next/server';
-import { getAuth } from '@clerk/nextjs/server';
-import { StoryGeneratorFactory, StoryGeneratorType } from '@/lib/generators/StoryGeneratorFactory';
+import { serverUserPersonalizationEngine } from '@/services/serverPersonalizationEngine';
+import { StoryInput } from '@/types/story';
+import { generateStory } from '@/lib/storyGenerator';
 import { logger } from '@/utils/logger';
-import { userPersonalizationEngine } from '@/services/personalizationEngine';
-import { addCorsHeaders } from '@/utils/cors';
-import { StoryRequestValidator } from '@/lib/validators/StoryRequestValidator';
-import { ApiErrorHandler } from '@/lib/api/ApiErrorHandler';
+import { env } from '@/lib/env';
+import { devAuthMiddleware } from '@/middleware/devAuth';
+import { createSupabaseClient } from '@/lib/supabase';
+
+// Add CORS headers to all responses
+function addCorsHeaders(response: NextResponse): NextResponse {
+  response.headers.set('Access-Control-Allow-Origin', '*');
+  response.headers.set('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
+  response.headers.set(
+    'Access-Control-Allow-Headers',
+    'Content-Type, Authorization, x-clerk-auth-token'
+  );
+  return response;
+}
 
 // Handle OPTIONS requests for CORS preflight
 export async function OPTIONS() {
@@ -17,39 +28,146 @@ export async function OPTIONS() {
 }
 
 export async function POST(req: NextRequest) {
+  logger.info('Story Generation Route: Received Request');
+  logger.info('Request Headers:', Object.fromEntries(req.headers));
+  logger.info('Environment:', { environment: env.NODE_ENV });
+
   try {
-    const { userId } = getAuth(req);
-    const { input } = await req.json();
-
-    // Get user preferences
-    const userPrefs = await userPersonalizationEngine.getUserPreferences();
-
-    // Generate story using the appropriate generator
-    const generatorType =
-      (process.env.NEXT_PUBLIC_DEFAULT_AI_MODEL as StoryGeneratorType) || 'gemini';
-    const generator = StoryGeneratorFactory.create(generatorType, userId || undefined);
-
-    // Enhance input with user preferences
-    const enhancedInput = {
-      ...input,
-      readingLevel:
-        userPrefs?.ageGroup === '3-5'
-          ? 'beginner'
-          : userPrefs?.ageGroup === '9-12'
-            ? 'advanced'
-            : 'intermediate',
-      interests: userPrefs?.learningInterests || input.interests || [],
-    };
-
-    const story = await generator.generateStory(enhancedInput);
-
-    // Update user stats
-    await userPersonalizationEngine.incrementGeneratedStories();
-    await userPersonalizationEngine.saveStoryToHistory(story);
-
-    return NextResponse.json(story);
+    // Get user ID from request headers (set by middleware)
+    let userId = req.headers.get('x-clerk-auth-user-id') || 'anonymous-user';
+    logger.info('User ID for story generation', { userId });
+
+    let input: StoryInput;
+    try {
+      const jsonData = await req.json();
+      input = jsonData as StoryInput;
+    } catch (jsonError) {
+      logger.error('JSON Parsing Error:', { error: jsonError });
+
+      return addCorsHeaders(
+        NextResponse.json(
+          {
+            message: 'Invalid input',
+            error: 'Failed to parse request body',
+            ...(env.NODE_ENV === 'development' && {
+              fullError: jsonError instanceof Error ? jsonError.stack : 'No stack trace',
+            }),
+          } as { message: string; error: string; fullError?: string },
+          { status: 400 }
+        )
+      );
+    }
+
+    // Initialize engine with user ID
+    serverUserPersonalizationEngine.init(userId);
+
+    // Attempt personalized story generation
+    let story;
+    try {
+      logger.info('Attempting personalized story generation...');
+      story = await serverUserPersonalizationEngine.generatePersonalizedStory(input);
+      logger.info('Personalized Story Generated:', { success: !!story });
+    } catch (personalizationError) {
+      logger.error('Personalization Error:', { error: personalizationError });
+      story = null;
+    }
+
+    // If personalization fails, use fallback generation
+    if (!story) {
+      logger.info('Falling back to basic story generation...');
+      try {
+        story = await generateStory(input, userId);
+        logger.info('Fallback Story Generated:', { success: !!story });
+      } catch (fallbackError) {
+        logger.error('Fallback Generation Error:', { error: fallbackError });
+
+        return addCorsHeaders(
+          NextResponse.json(
+            {
+              message: 'Failed to generate story after multiple attempts',
+              error: fallbackError instanceof Error ? fallbackError.message : 'Unknown error',
+              ...(env.NODE_ENV === 'development' && {
+                fullError: fallbackError instanceof Error ? fallbackError.stack : 'No stack trace',
+                input: JSON.stringify(input),
+                userId,
+              }),
+            } as {
+              message: string;
+              error: string;
+              fullError?: string;
+              input?: string;
+              userId?: string;
+            },
+            { status: 500 }
+          )
+        );
+      }
+    }
+
+    // Ensure story is valid
+    if (!story) {
+      logger.error('No story generated after all attempts');
+
+      return addCorsHeaders(
+        NextResponse.json(
+          {
+            message: 'Unable to generate a story',
+            ...(env.NODE_ENV === 'development' && {
+              input: JSON.stringify(input),
+              userId,
+            }),
+          } as { message: string; input?: string; userId?: string },
+          { status: 500 }
+        )
+      );
+    }
+
+    // Store the generated story temporarily in Supabase
+    try {
+      if (userId !== 'anonymous-user') {
+        const supabase = createSupabaseClient();
+
+        // Check if user exists in our database
+        const { data: userData } = await supabase
+          .from('users')
+          .select('id')
+          .eq('auth_id', userId)
+          .single();
+
+        if (userData) {
+          // Store the story with temporary flag
+          await supabase.from('stories').insert({
+            title: story.title || 'Untitled Story',
+            content: JSON.stringify(story),
+            user_id: userData.id,
+            // Add any additional metadata as needed
+          });
+
+          logger.info('Story stored in Supabase', { userId });
+        } else {
+          logger.warn('User not found in database, skipping story storage', { userId });
+        }
+      }
+    } catch (storageError) {
+      // Don't fail the request if storage fails
+      logger.error('Error storing story in Supabase:', { error: storageError });
+    }
+
+    return addCorsHeaders(NextResponse.json(story));
   } catch (error) {
-    logger.error('Error in story generation API:', { error });
-    return NextResponse.json({ error: 'Failed to generate story' }, { status: 500 });
+    logger.error('Unexpected Error:', { error });
+
+    return addCorsHeaders(
+      NextResponse.json(
+        {
+          message: error instanceof Error ? error.message : 'Unexpected error generating story',
+          error: error instanceof Error ? error.toString() : 'Unknown error',
+          ...(env.NODE_ENV === 'development' && {
+            fullError: error instanceof Error ? error.stack : 'No stack trace',
+          }),
+        } as { message: string; error: string; fullError?: string },
+        { status: 500 }
+      )
+    );
   }
 }
diff --git a/src/app/auth-test/page.tsx b/src/app/auth-test/page.tsx
new file mode 100644
index 00000000..ac1cabf4
--- /dev/null
+++ b/src/app/auth-test/page.tsx
@@ -0,0 +1,70 @@
+'use client';
+
+import { useAuth, useUser } from '@clerk/nextjs';
+import { useEffect, useState } from 'react';
+
+export default function AuthTestPage() {
+  const { isLoaded: authLoaded, isSignedIn, userId } = useAuth();
+  const { isLoaded: userLoaded, user } = useUser();
+  const [serverCheck, setServerCheck] = useState<string>('Checking...');
+
+  useEffect(() => {
+    // Check server-side auth state
+    const checkServerAuth = async () => {
+      try {
+        const response = await fetch('/api/auth-check');
+        const data = await response.json();
+        setServerCheck(JSON.stringify(data, null, 2));
+      } catch (error) {
+        setServerCheck(
+          `Error checking server auth: ${error instanceof Error ? error.message : String(error)}`
+        );
+      }
+    };
+
+    if (authLoaded) {
+      checkServerAuth();
+    }
+  }, [authLoaded]);
+
+  if (!authLoaded || !userLoaded) {
+    return <div className="p-4">Loading authentication state...</div>;
+  }
+
+  return (
+    <div className="container mx-auto p-4">
+      <h1 className="text-2xl font-bold mb-4">Authentication Test Page</h1>
+
+      <div className="bg-gray-100 p-4 rounded-lg mb-4">
+        <h2 className="text-xl font-semibold mb-2">Client-Side Auth State</h2>
+        <pre className="bg-white p-2 rounded overflow-auto">
+          {JSON.stringify(
+            {
+              isSignedIn,
+              userId,
+              userEmail: user?.emailAddresses?.[0]?.emailAddress,
+              firstName: user?.firstName,
+              lastName: user?.lastName,
+            },
+            null,
+            2
+          )}
+        </pre>
+      </div>
+
+      <div className="bg-gray-100 p-4 rounded-lg">
+        <h2 className="text-xl font-semibold mb-2">Server-Side Auth State</h2>
+        <pre className="bg-white p-2 rounded overflow-auto">{serverCheck}</pre>
+      </div>
+
+      <div className="mt-4">
+        <a href="/dashboard" className="text-blue-500 underline mr-4">
+          Try Dashboard
+        </a>
+        <a href="/sign-in" className="text-blue-500 underline">
+          Go to Sign In
+        </a>
+      </div>
+    </div>
+  );
+}
diff --git a/src/app/error.tsx b/src/app/error.tsx
deleted file mode 100644
index c671fc4f..00000000
--- a/src/app/error.tsx
+++ /dev/null
@@ -1,32 +0,0 @@
-'use client';
-
-import { useEffect } from 'react';
-import { Button } from '@/components/ui/button';
-
-export default function Error({
-  error,
-  reset,
-}: {
-  error: Error & { digest?: string };
-  reset: () => void;
-}) {
-  useEffect(() => {
-    console.error('Page error:', error);
-  }, [error]);
-
-  return (
-    <div className="min-h-[50vh] flex flex-col items-center justify-center p-4">
-      <div className="max-w-md w-full space-y-8">
-        <div className="text-center">
-          <h2 className="text-2xl font-bold mb-2">Something went wrong</h2>
-          <p className="text-text-secondary dark:text-text-primary/80 mb-6">
-            {error.message || 'An unexpected error occurred'}
-          </p>
-          <Button onClick={reset} variant="outline">
-            Try again
-          </Button>
-        </div>
-      </div>
-    </div>
-  );
-}
diff --git a/src/app/global-error.tsx b/src/app/global-error.tsx
index fc7cd011..2a6a115f 100644
--- a/src/app/global-error.tsx
+++ b/src/app/global-error.tsx
@@ -1,25 +1,19 @@
 'use client';
 
+import NextError from 'next/error';
 import { useEffect } from 'react';
 
-export default function GlobalError({
-  error,
-  reset,
-}: {
-  error: Error & { digest?: string };
-  reset: () => void;
-}) {
-  useEffect(() => {
-    console.error('Global error:', error);
-  }, [error]);
+export default function GlobalError({ error }: { error: Error & { digest?: string } }) {
+  useEffect(() => {}, [error]);
 
   return (
-    <html lang="en">
+    <html>
       <body>
-        <div style={{ padding: '2rem', textAlign: 'center' }}>
-          <h2>Something went wrong!</h2>
-          <button onClick={reset}>Try again</button>
-        </div>
+        {/* `NextError` is the default Next.js error page component. Its type
+        definition requires a `statusCode` prop. However, since the App Router
+        does not expose status codes for errors, we simply pass 0 to render a
+        generic error message. */}
+        <NextError statusCode={0} />
       </body>
     </html>
   );
diff --git a/src/app/global-error.tsx.bak b/src/app/global-error.tsx.bak
deleted file mode 100644
index c6baaba3..00000000
--- a/src/app/global-error.tsx.bak
+++ /dev/null
@@ -1,43 +0,0 @@
-'use client';
-
-import { useEffect } from 'react';
-
-export default function GlobalError({
-  error,
-  reset,
-}: {
-  error: Error & { digest?: string };
-  reset: () => void;
-}) {
-  useEffect(() => {
-    // Log the error to an error reporting service
-    console.error('Global error:', error);
-  }, [error]);
-
-  return (
-    <html>
-      <body>
-        <div className="min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
-          <div className="max-w-md w-full space-y-8">
-            <div>
-              <h2 className="mt-6 text-center text-3xl font-extrabold text-gray-900">
-                Something went wrong!
-              </h2>
-              <p className="mt-2 text-center text-sm text-gray-600">
-                {error.message || 'An unexpected error occurred'}
-              </p>
-            </div>
-            <div className="mt-8 space-y-6">
-              <button
-                onClick={reset}
-                className="group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
-              >
-                Try again
-              </button>
-            </div>
-          </div>
-        </div>
-      </body>
-    </html>
-  );
-}
diff --git a/src/app/hydration-test/page.tsx b/src/app/hydration-test/page.tsx
new file mode 100644
index 00000000..1ce489ec
--- /dev/null
+++ b/src/app/hydration-test/page.tsx
@@ -0,0 +1,27 @@
+'use client';
+
+import React, { useEffect, useState } from 'react';
+
+export default function HydrationTestPage() {
+  const [isClient, setIsClient] = useState(false);
+
+  useEffect(() => {
+    setIsClient(true);
+  }, []);
+
+  return (
+    <div className="min-h-screen bg-gradient-to-b from-blue-50 to-white py-12">
+      <div className="container mx-auto px-4">
+        <h1 className="text-3xl font-bold text-center text-gray-900 mb-8">Hydration Test Page</h1>
+        <div className="bg-white p-6 rounded-lg shadow-md">
+          <p className="text-lg mb-4">
+            This page is used to test if hydration issues have been resolved.
+          </p>
+          <div className="p-4 border rounded">
+            <p>Client-side rendering status: {isClient ? 'Active' : 'Not active yet'}</p>
+          </div>
+        </div>
+      </div>
+    </div>
+  );
+}
diff --git a/src/app/layout.tsx b/src/app/layout.tsx
index a8c6fcc5..2cda6c7b 100644
--- a/src/app/layout.tsx
+++ b/src/app/layout.tsx
@@ -2,6 +2,9 @@ import React from 'react';
 import Script from 'next/script';
 import type { Metadata, Viewport } from 'next';
 import { Inter } from 'next/font/google';
+// Import these after installing the packages
+// import { SpeedInsights } from '@vercel/speed-insights/react';
+// import { Analytics } from '@vercel/analytics/react';
 import './globals.css';
 import { Providers } from '@/providers/Providers';
 import { ClerkProvider } from '@clerk/nextjs';
@@ -41,10 +44,8 @@ interface RootLayoutProps {
 }
 
 export default function RootLayout({ children }: RootLayoutProps): React.JSX.Element {
-  console.log('Initializing ClerkProvider');
-  console.log('ClerkProvider publishableKey:', process.env.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY);
   return (
-    <ClerkProvider publishableKey={process.env.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY}>
+    <ClerkProvider>
       <html lang="en" suppressHydrationWarning className={inter.variable}>
         <head>
           <PreloadResources />
@@ -59,6 +60,8 @@ export default function RootLayout({ children }: RootLayoutProps): React.JSX.Ele
           >
             <Providers>
               {children}
+              {/* <SpeedInsights />
+              <Analytics /> */}
               <ScriptOptimizer />
             </Providers>
           </ErrorBoundary>
diff --git a/src/app/middleware-test/page.tsx b/src/app/middleware-test/page.tsx
new file mode 100644
index 00000000..c8fc1723
--- /dev/null
+++ b/src/app/middleware-test/page.tsx
@@ -0,0 +1,15 @@
+'use client';
+
+import { useUser } from '@clerk/nextjs';
+
+export default function MiddlewareTestPage() {
+  const { user, isLoaded } = useUser();
+
+  return (
+    <div className="container mx-auto p-4">
+      <h1 className="text-2xl font-bold mb-4">Middleware Test Page</h1>
+      {isLoaded ? <p>User ID: {user?.id || 'Not authenticated'}</p> : <p>Loading...</p>}
+      <p>If you can see this page without errors, the middleware is working correctly!</p>
+    </div>
+  );
+}
diff --git a/src/app/page.tsx b/src/app/page.tsx
index a22a053a..aa216b4a 100644
--- a/src/app/page.tsx
+++ b/src/app/page.tsx
@@ -5,16 +5,40 @@ import { Card } from '@/components/ui/card';
 import { Input } from '@/components/ui/input';
 import Link from 'next/link';
 import Image from 'next/image';
-import React, { useState, useEffect, useRef, useMemo, useCallback, Suspense } from 'react';
+import React, { useState, useEffect, useRef, useMemo, useCallback } from 'react';
 import { Menu, X, ChevronRight, Moon, Sun } from 'lucide-react';
 import { motion, AnimatePresence } from 'framer-motion';
+import dynamic from 'next/dynamic';
 import ThemeToggleWrapper from '@/components/ThemeToggleWrapper';
 import { TypedText } from '@/components/TypedText';
 import { SignInButton } from '@/components/auth/SignInButton';
 import { SignOutButton } from '@/components/auth/SignOutButton';
 import { useAuth } from '@clerk/nextjs';
-import FeatureGrid from '@/components/FeatureGrid';
-import Footer from '@/components/Footer';
+
+// Dynamically import components that are below the fold
+const StoryFeatureGrid = dynamic(
+  () => import('@/components/StoryFeatureCard').then((mod) => mod.StoryFeatureGrid),
+  {
+    loading: () => (
+      <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8 animate-pulse">
+        {[1, 2, 3, 4, 5, 6].map((i) => (
+          <div key={i} className="bg-lavender/20 dark:bg-lavender/10 h-64 rounded-lg"></div>
+        ))}
+      </div>
+    ),
+    ssr: false,
+  }
+);
+
+// Dynamically import the FAQ section
+
+// Dynamically import the footer
+const Footer = dynamic(() => import('../components/Footer'), {
+  loading: () => (
+    <div className="h-40 bg-lavender/10 dark:bg-midnight/30 animate-pulse rounded-t-lg"></div>
+  ),
+  ssr: false,
+});
 
 // Custom hook for Intersection Observer
 function useIntersectionObserver(options = {}) {
@@ -845,7 +869,7 @@ export default function Home() {
         <div className="max-w-5xl mx-auto">
           <h2 className="text-primary text-center mb-12">Why Parents Love It</h2>
 
-          <FeatureGrid />
+          <StoryFeatureGrid />
 
           {/* Testimonial */}
           <Card
@@ -1142,13 +1166,7 @@ export default function Home() {
       </section>
 
       {/* Footer */}
-      <Suspense
-        fallback={
-          <div className="h-40 bg-lavender/10 dark:bg-midnight/30 animate-pulse rounded-t-lg"></div>
-        }
-      >
-        <Footer />
-      </Suspense>
+      <Footer />
     </main>
   );
 }
diff --git a/src/app/page.tsx.bak b/src/app/page.tsx.bak
new file mode 100644
index 00000000..d7a41685
--- /dev/null
+++ b/src/app/page.tsx.bak
@@ -0,0 +1,1175 @@
+'use client';
+
+import { Button } from '@/components/ui/button';
+import { Card } from '@/components/ui/card';
+import { Input } from '@/components/ui/input';
+import Link from 'next/link';
+import Image from 'next/image';
+import React, { useState, useEffect, useRef, useMemo, useCallback, Suspense } from 'react';
+import { ChevronLeft, ChevronRight, Menu, X, Moon, Sun } from 'lucide-react';
+import { motion, AnimatePresence } from 'framer-motion';
+import StoryBookIcon from '@/components/StoryBookIcon';
+import StorybookSvg from '@/components/StorybookSvg';
+import dynamic from 'next/dynamic';
+import ThemeToggleWrapper from '@/components/ThemeToggleWrapper';
+import { TypedText } from '@/components/TypedText';
+
+// Dynamically import components that are below the fold
+const StoryFeatureGrid = dynamic(
+  () => import('@/components/StoryFeatureCard').then((mod) => mod.StoryFeatureGrid),
+  {
+    loading: () => (
+      <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8 animate-pulse">
+        {[1, 2, 3, 4, 5, 6].map((i) => (
+          <div key={i} className="bg-lavender/20 dark:bg-lavender/10 h-64 rounded-lg"></div>
+        ))}
+      </div>
+    ),
+    ssr: false,
+  }
+);
+
+// Dynamically import the FAQ section
+const FaqSection = dynamic(() => import('../components/FaqSection'), {
+  loading: () => (
+    <div className="space-y-4 animate-pulse">
+      {[1, 2, 3, 4].map((i) => (
+        <div key={i} className="bg-lavender/20 dark:bg-lavender/10 h-20 rounded-lg"></div>
+      ))}
+    </div>
+  ),
+  ssr: false,
+});
+
+// Dynamically import the footer
+const Footer = dynamic(() => import('../components/Footer'), {
+  loading: () => (
+    <div className="h-40 bg-lavender/10 dark:bg-midnight/30 animate-pulse rounded-t-lg"></div>
+  ),
+  ssr: false,
+});
+
+// Custom hook for Intersection Observer
+function useIntersectionObserver(options = {}) {
+  const [isIntersecting, setIsIntersecting] = useState(false);
+  const ref = useRef<HTMLDivElement>(null);
+
+  useEffect(() => {
+    if (!ref.current) return;
+
+    const observer = new IntersectionObserver(([entry]) => {
+      setIsIntersecting(entry.isIntersecting);
+    }, options);
+
+    observer.observe(ref.current);
+
+    return () => {
+      if (ref.current) {
+        observer.unobserve(ref.current);
+      }
+    };
+  }, [options]);
+
+  return { ref, isIntersecting };
+}
+
+interface FaqAccordionItemProps {
+  question: string;
+  answer: string;
+}
+
+function FaqAccordionItem({ question, answer }: FaqAccordionItemProps) {
+  const [isOpen, setIsOpen] = useState(false);
+  const { ref, isIntersecting } = useIntersectionObserver({
+    threshold: 0.1,
+    rootMargin: '100px',
+  });
+
+  return (
+    <div
+      ref={ref}
+      className={`border border-lavender/30 dark:border-lavender/10 rounded-lg overflow-hidden transition-opacity duration-500 ${
+        isIntersecting ? 'opacity-100' : 'opacity-0'
+      }`}
+    >
+      <button
+        className="w-full p-4 flex justify-between items-center bg-dreamy-light/50 dark:bg-midnight hover:bg-dreamy-light dark:hover:bg-midnight-light transition-colors text-left"
+        onClick={() => setIsOpen(!isOpen)}
+        aria-expanded={isOpen}
+      >
+        <h3 className="text-primary text-lg font-medium">{question}</h3>
+        <div
+          className={`transform transition-transform duration-200 ${isOpen ? 'rotate-180' : ''}`}
+        >
+          <svg
+            xmlns="http://www.w3.org/2000/svg"
+            width="20"
+            height="20"
+            viewBox="0 0 24 24"
+            fill="none"
+            stroke="currentColor"
+            strokeWidth="2"
+            strokeLinecap="round"
+            strokeLinejoin="round"
+          >
+            <polyline points="6 9 12 15 18 9"></polyline>
+          </svg>
+        </div>
+      </button>
+
+      <div
+        className={`overflow-hidden transition-all duration-300 ease-in-out ${isOpen ? 'max-h-96' : 'max-h-0'}`}
+      >
+        <div className="p-4 bg-white/50 dark:bg-midnight-light/10">
+          <p className="text-text-secondary dark:text-text-primary/80">{answer}</p>
+        </div>
+      </div>
+    </div>
+  );
+}
+
+export default function Home() {
+  const [activeStoryIndex, setActiveStoryIndex] = useState(0);
+  const [childName, setChildName] = useState('Emma');
+  const [showPreview, setShowPreview] = useState(false);
+  const [refreshKey, setRefreshKey] = useState(0); // Used to force re-render of typing animations
+  const [isScrolled, setIsScrolled] = useState(false);
+  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);
+  const [scrollProgress, setScrollProgress] = useState(0);
+  const [isCarouselPaused, setIsCarouselPaused] = useState(false);
+  const [selectedTheme, setSelectedTheme] = useState('fantasy'); // Default theme
+  const carouselRef = useRef<HTMLDivElement>(null);
+
+  // Handle scroll events for sticky header and progress bar
+  useEffect(() => {
+    // Avoid memory leaks by using a ref to track if component is mounted
+    const isMounted = { current: true };
+
+    const handleScroll = () => {
+      if (!isMounted.current) return;
+
+      // For sticky header
+      const scrollPosition = window.scrollY;
+      setIsScrolled(scrollPosition > 50);
+
+      // For progress indicator
+      const windowHeight = document.documentElement.scrollHeight - window.innerHeight;
+      const scrolled = (scrollPosition / windowHeight) * 100;
+      setScrollProgress(scrolled);
+    };
+
+    window.addEventListener('scroll', handleScroll);
+    handleScroll();
+
+    // Add smooth scrolling for anchor links
+    const handleAnchorClick = (e: MouseEvent) => {
+      const target = e.target as HTMLElement;
+      if (target.tagName === 'A' && target.getAttribute('href')?.startsWith('#')) {
+        e.preventDefault();
+        const targetId = target.getAttribute('href');
+        const targetElement = document.querySelector(targetId as string);
+        if (targetElement) {
+          targetElement.scrollIntoView({ behavior: 'smooth' });
+          // Update URL without page reload
+          window.history.pushState(null, '', targetId);
+        }
+      }
+    };
+
+    document.addEventListener('click', handleAnchorClick);
+
+    return () => {
+      isMounted.current = false;
+      window.removeEventListener('scroll', handleScroll);
+      document.removeEventListener('click', handleAnchorClick);
+    };
+  }, []);
+
+  const sampleStories = useMemo(
+    () => [
+      {
+        title: "Ava's Adventure in Dreamland",
+        excerpt:
+          'Once upon a time, in a magical dreamland filled with cotton candy clouds and rainbow rivers, there lived a brave girl named Ava...',
+        image: '/images/illustrations/book-magic.svg',
+      },
+      {
+        title: 'Leo and the Space Dragons',
+        excerpt:
+          'Far beyond the stars, in a galaxy of wonders, a curious boy named Leo discovered a mysterious map that led to the legendary Space Dragons...',
+        image: '/images/illustrations/space-rocket.svg',
+      },
+      {
+        title: "Maya's Underwater Kingdom",
+        excerpt:
+          'Deep beneath the ocean waves, where sunlight danced on coral reefs, Maya discovered a hidden entrance to an underwater kingdom...',
+        image: '/images/illustrations/storybook.svg',
+      },
+    ],
+    []
+  );
+
+  // Auto-rotate carousel unless paused
+  useEffect(() => {
+    if (!isCarouselPaused && carouselRef.current) {
+      const interval = setInterval(() => {
+        setActiveStoryIndex((prevIndex) => (prevIndex + 1) % sampleStories.length);
+      }, 5000);
+
+      return () => clearInterval(interval);
+    }
+  }, [isCarouselPaused, sampleStories.length]);
+
+  const faqs = useMemo(
+    () => [
+      {
+        question: 'How much does it cost?',
+        answer:
+          'We offer a free tier with 3 stories per month. Our premium plan at $4.99/month gives you unlimited stories, more themes, and the ability to save and print your creations.',
+      },
+      {
+        question: 'Can I edit my stories?',
+        answer:
+          'Yes! All stories can be edited after generation. Premium users get access to advanced editing features including custom illustrations.',
+      },
+      {
+        question: 'What age group is this for?',
+        answer:
+          "Our stories are designed for children ages 2-10. You can select the appropriate reading level during story creation to match your child's abilities.",
+      },
+      {
+        question: 'Can I print the stories?',
+        answer:
+          'Absolutely! All stories can be downloaded as PDFs for easy printing. Premium users get access to special formatting options and illustration quality.',
+      },
+    ],
+    []
+  );
+
+  // Function to navigate to the next story with circular navigation
+  const goToNextStory = useCallback(() => {
+    setActiveStoryIndex((prev) => (prev === sampleStories.length - 1 ? 0 : prev + 1));
+    setRefreshKey((prev) => prev + 1); // Force re-render of typing animations
+  }, [sampleStories.length]);
+
+  // Function to navigate to the previous story with circular navigation
+  const goToPrevStory = useCallback(() => {
+    setActiveStoryIndex((prev) => (prev === 0 ? sampleStories.length - 1 : prev - 1));
+    setRefreshKey((prev) => prev + 1); // Force re-render of typing animations
+  }, [sampleStories.length]);
+
+  // Sample story preview text that uses the child's name
+  const getStoryPreview = (name: string) => {
+    return [
+      `Once upon a time, in a magical forest filled with talking animals and whispering trees, there lived a brave child named ${name}.`,
+      `${name} had always dreamed of adventure, and today was the day their wish would come true.`,
+      `As ${name} was exploring near the old oak tree, a tiny woodland fairy with shimmering wings appeared...`,
+    ];
+  };
+
+  // Theme-specific story previews
+  const getThemePreview = (theme: string, name: string) => {
+    switch (theme) {
+      case 'space':
+        return [
+          `Far beyond the stars, in a galaxy of wonders, a brave space explorer named ${name} piloted their shimmering starship.`,
+          `${name} had always dreamed of discovering new planets, and today was the day their wish would come true.`,
+          `As ${name} approached the mysterious nebula, the ship's sensors detected something extraordinary...`,
+        ];
+      case 'pirates':
+        return [
+          `Across the seven seas, aboard the mighty ship "The Golden Adventure," sailed the courageous Captain ${name}.`,
+          `${name} had always dreamed of finding hidden treasure, and today was the day their map would lead to fortune.`,
+          `As ${name} followed the ancient map to the mysterious island, strange birds with colorful feathers guided the way...`,
+        ];
+      case 'fantasy':
+      default:
+        return [
+          `Once upon a time, in a magical kingdom filled with enchanted creatures and whispering trees, there lived a brave hero named ${name}.`,
+          `${name} had always dreamed of magical adventures, and today was the day their wish would come true.`,
+          `As ${name} was exploring near the ancient castle, a tiny dragon with shimmering scales appeared...`,
+        ];
+    }
+  };
+
+  // Get the appropriate story preview based on the selected theme
+  const getActiveStoryPreview = (name: string) => {
+    return getThemePreview(selectedTheme, name).join('\n\n');
+  };
+
+  // Toggle carousel pause state
+  const toggleCarouselPause = useCallback(() => {
+    setIsCarouselPaused((prev) => !prev);
+  }, []);
+
+  // Handle carousel dot navigation
+  const goToStory = useCallback((index: number) => {
+    setActiveStoryIndex(index);
+    setRefreshKey((prev) => prev + 1);
+  }, []);
+
+  // Handle carousel mouse events
+  const handleCarouselMouseEnter = useCallback(() => {
+    setIsCarouselPaused(true);
+  }, []);
+
+  const handleCarouselMouseLeave = useCallback(() => {
+    setIsCarouselPaused(false);
+  }, []);
+
+  // Memoize the carousel items to prevent unnecessary re-renders
+  const carouselItems = useMemo(() => {
+    return sampleStories.map((story, index) => (
+      <div
+        key={index}
+        className={`carousel-item absolute inset-0 transition-opacity duration-500 ${
+          index === activeStoryIndex ? 'opacity-100 z-10' : 'opacity-0 z-0'
+        }`}
+      >
+        <Card className="h-full overflow-hidden shadow-dreamy border-none">
+          <div className="p-6 h-full flex flex-col">
+            <h3 className="text-xl font-bold text-primary mb-2">{story.title}</h3>
+            <p className="text-text-secondary dark:text-text-primary/80 flex-1">{story.excerpt}</p>
+            <div className="mt-4 flex justify-between items-center">
+              <span className="text-sm text-lavender">Fantasy</span>
+              <span className="text-sm text-golden">5-8 years</span>
+            </div>
+          </div>
+        </Card>
+      </div>
+    ));
+  }, [sampleStories, activeStoryIndex]);
+
+  return (
+    <main className="min-h-screen bg-gradient-to-b from-cloud to-sky-50 dark:from-midnight dark:to-teal-900">
+      {/* Sticky Navigation */}
+      <div
+        className={`fixed top-0 left-0 right-0 z-50 transition-all duration-300 ${isScrolled ? 'bg-white/90 dark:bg-midnight/90 shadow-md backdrop-blur-sm' : 'bg-transparent'}`}
+      >
+        <div className="max-w-5xl mx-auto px-4 sm:px-6 lg:px-8">
+          <div className="flex items-center justify-between h-16">
+            {/* Logo */}
+            <div className="flex items-center">
+              <Link href="/" className="flex items-center">
+                <Image
+                  src="/images/illustrations/book-magic.svg"
+                  alt="Step Into Story Time"
+                  width={32}
+                  height={32}
+                  className="mr-2"
+                />
+                <span
+                  className={`font-bold text-lg ${isScrolled ? 'text-primary' : 'text-midnight dark:text-text-primary'}`}
+                >
+                  Step Into Story Time
+                </span>
+              </Link>
+            </div>
+
+            {/* Navigation Links - Desktop only */}
+            <div className="hidden md:flex items-center space-x-4">
+              <a
+                href="#how-it-works"
+                className={`px-3 py-2 rounded-md text-sm font-medium transition-colors ${isScrolled ? 'text-text-secondary hover:text-primary dark:text-text-primary/70 dark:hover:text-primary' : 'text-text-secondary dark:text-text-primary/70 hover:text-primary dark:hover:text-primary'}`}
+              >
+                How It Works
+              </a>
+              <a
+                href="#features"
+                className={`px-3 py-2 rounded-md text-sm font-medium transition-colors ${isScrolled ? 'text-text-secondary hover:text-primary dark:text-text-primary/70 dark:hover:text-primary' : 'text-text-secondary dark:text-text-primary/70 hover:text-primary dark:hover:text-primary'}`}
+              >
+                Features
+              </a>
+              <a
+                href="#pricing"
+                className={`px-3 py-2 rounded-md text-sm font-medium transition-colors ${isScrolled ? 'text-text-secondary hover:text-primary dark:text-text-primary/70 dark:hover:text-primary' : 'text-text-secondary dark:text-text-primary/70 hover:text-primary dark:hover:text-primary'}`}
+              >
+                Pricing
+              </a>
+              <a
+                href="#faq"
+                className={`px-3 py-2 rounded-md text-sm font-medium transition-colors ${isScrolled ? 'text-text-secondary hover:text-primary dark:text-text-primary/70 dark:hover:text-primary' : 'text-text-secondary dark:text-text-primary/70 hover:text-primary dark:hover:text-primary'}`}
+              >
+                FAQ
+              </a>
+              <ThemeToggleWrapper />
+              <Link href="/story">
+                <Button size="sm" className="ml-4">
+                  Start Your Story
+                </Button>
+              </Link>
+            </div>
+
+            {/* Mobile menu button - Mobile only */}
+            <button
+              onClick={() => setMobileMenuOpen(!mobileMenuOpen)}
+              className={`md:hidden p-2 rounded-md ${isScrolled ? 'text-primary' : 'text-midnight dark:text-text-primary'}`}
+              aria-label="Open main menu"
+            >
+              <Menu className="h-6 w-6" />
+            </button>
+          </div>
+
+          {/* Progress bar */}
+          <div className="h-1 w-full bg-lavender/10 dark:bg-lavender/20">
+            <div
+              className="h-1 bg-gradient-to-r from-primary to-golden transition-all duration-300 ease-out"
+              style={{ width: `${scrollProgress}%` }}
+            ></div>
+          </div>
+        </div>
+      </div>
+
+      {/* Mobile menu, show/hide based on menu state */}
+      <AnimatePresence>
+        {mobileMenuOpen && (
+          <motion.div
+            className="fixed inset-0 z-50 md:hidden"
+            initial={{ opacity: 0 }}
+            animate={{ opacity: 1 }}
+            exit={{ opacity: 0 }}
+            transition={{ duration: 0.2 }}
+          >
+            <div
+              className="fixed inset-0 bg-black/25 backdrop-blur-sm"
+              onClick={() => setMobileMenuOpen(false)}
+            ></div>
+            <motion.div
+              className="fixed top-0 right-0 bottom-0 w-64 bg-white dark:bg-midnight p-6 shadow-xl"
+              initial={{ x: '100%' }}
+              animate={{ x: 0 }}
+              exit={{ x: '100%' }}
+              transition={{ duration: 0.3, ease: 'easeInOut' }}
+            >
+              <div className="flex items-center justify-between mb-8">
+                <h2 className="text-lg font-bold text-primary">Menu</h2>
+                <button
+                  onClick={() => setMobileMenuOpen(false)}
+                  className="p-2 rounded-md text-text-secondary"
+                  aria-label="Close menu"
+                >
+                  <X className="h-6 w-6" />
+                </button>
+              </div>
+              <nav className="flex flex-col space-y-4">
+                <a
+                  href="#how-it-works"
+                  className="px-3 py-2 rounded-md text-base font-medium text-text-secondary dark:text-text-primary/70 hover:text-primary dark:hover:text-primary"
+                  onClick={() => setMobileMenuOpen(false)}
+                >
+                  How It Works
+                </a>
+                <a
+                  href="#features"
+                  className="px-3 py-2 rounded-md text-base font-medium text-text-secondary dark:text-text-primary/70 hover:text-primary dark:hover:text-primary"
+                  onClick={() => setMobileMenuOpen(false)}
+                >
+                  Features
+                </a>
+                <a
+                  href="#pricing"
+                  className="px-3 py-2 rounded-md text-base font-medium text-text-secondary dark:text-text-primary/70 hover:text-primary dark:hover:text-primary"
+                  onClick={() => setMobileMenuOpen(false)}
+                >
+                  Pricing
+                </a>
+                <a
+                  href="#faq"
+                  className="px-3 py-2 rounded-md text-base font-medium text-text-secondary dark:text-text-primary/70 hover:text-primary dark:hover:text-primary"
+                  onClick={() => setMobileMenuOpen(false)}
+                >
+                  FAQ
+                </a>
+                <div className="flex justify-center my-2">
+                  <ThemeToggleWrapper />
+                </div>
+                <Link href="/story" className="mt-4" onClick={() => setMobileMenuOpen(false)}>
+                  <Button fullWidth>Start Your Story</Button>
+                </Link>
+              </nav>
+            </motion.div>
+          </motion.div>
+        )}
+      </AnimatePresence>
+
+      {/* Quick Action Buttons (Floating) */}
+      <div className="fixed bottom-6 right-6 z-40 flex flex-col gap-3">
+        <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>
+          <Link href="/story">
+            <Button size="icon" className="rounded-full w-12 h-12 shadow-dreamy">
+              <span className="sr-only">Start Your Story</span>
+              <Image
+                src="/images/illustrations/book-magic.svg"
+                alt="Create Story"
+                width={24}
+                height={24}
+              />
+            </Button>
+          </Link>
+        </motion.div>
+      </div>
+
+      {/* Hero Section */}
+      <section className="relative py-24 md:py-32 px-8 overflow-hidden">
+        <div className="absolute inset-0 z-0 opacity-10">
+          <div className="absolute top-10 left-10 w-20 h-20 rounded-full bg-dreamy animate-float"></div>
+          <div className="absolute top-40 right-20 w-16 h-16 rounded-full bg-golden animate-float delay-150"></div>
+          <div className="absolute bottom-20 left-1/4 w-24 h-24 rounded-full bg-primary animate-float delay-300"></div>
+          <div className="absolute bottom-40 right-1/3 w-12 h-12 rounded-full bg-sky animate-float delay-200"></div>
+        </div>
+
+        <div className="max-w-5xl mx-auto relative z-10 flex flex-col md:flex-row items-center gap-16">
+          <div className="md:w-1/2 text-center md:text-left space-y-8">
+            <h1 className="text-midnight dark:text-text-primary leading-tight text-4xl md:text-5xl font-bold">
+              Step Into Story <span className="text-primary">Time</span>,{' '}
+              <br className="hidden md:block" />
+              <span className="text-primary">Instantly!</span>
+            </h1>
+            <p className="text-xl text-text-secondary dark:text-text-primary/80 max-w-md">
+              Personalized, AI-powered bedtime stories for your child—crafted in seconds.
+            </p>
+            <div className="flex flex-col sm:flex-row gap-5 justify-center md:justify-start mt-8">
+              <Link href="/story">
+                <Button
+                  size="lg"
+                  className="animate-float delay-300 w-full sm:w-auto px-8 py-6 text-base"
+                >
+                  Start Your Story
+                </Button>
+              </Link>
+              <Button
+                variant="outline"
+                size="lg"
+                className="w-full sm:w-auto px-8 py-6 text-base"
+                onClick={() => {
+                  document.getElementById('how-it-works')?.scrollIntoView({ behavior: 'smooth' });
+                }}
+              >
+                See How It Works
+              </Button>
+            </div>
+          </div>
+
+          <div className="md:w-1/2 relative mt-12 md:mt-0">
+            <div className="relative w-full h-[320px] md:h-[420px]">
+              {/* Interactive Story Preview */}
+              <div className="absolute inset-0 bg-gradient-to-r from-primary/20 to-golden/20 rounded-2xl flex items-center justify-center overflow-hidden shadow-xl">
+                <div className="w-full h-full flex flex-col">
+                  {/* Preview Header */}
+                  <div className="bg-primary/30 dark:bg-primary/50 p-4 flex justify-between items-center">
+                    <div className="flex items-center gap-2">
+                      <div className="w-3 h-3 rounded-full bg-golden"></div>
+                      <div className="w-3 h-3 rounded-full bg-dreamy"></div>
+                      <div className="w-3 h-3 rounded-full bg-teal"></div>
+                    </div>
+                    <span className="text-sm font-medium">
+                      {childName}&apos;s Magical Adventure
+                    </span>
+                    <div className="flex items-center gap-1">
+                      <span className="twinkling-star text-sm">✨</span>
+                    </div>
+                  </div>
+
+                  {/* Preview Content */}
+                  <div className="flex-1 bg-white/90 dark:bg-midnight-light/90 p-6 overflow-hidden relative">
+                    {showPreview ? (
+                      <div className="h-full overflow-y-auto story-text pr-2">
+                        <TypedText
+                          key={`story-preview-${refreshKey}`}
+                          text={getStoryPreview(childName).join('\n\n')}
+                          className="whitespace-pre-line"
+                          onComplete={() => {
+                            /* Story preview complete */
+                          }}
+                        />
+                      </div>
+                    ) : (
+                      <div className="h-full flex flex-col items-center justify-center text-center gap-6">
+                        <Image
+                          src="/images/illustrations/book-magic.svg"
+                          alt="Magical storybook"
+                          width={120}
+                          height={120}
+                          className="object-contain"
+                          priority
+                          loading="eager"
+                          sizes="(max-width: 768px) 120px, 120px"
+                          quality={90}
+                        />
+                        <p className="text-text-secondary dark:text-text-primary/80 text-lg">
+                          See a personalized story preview!
+                        </p>
+                      </div>
+                    )}
+
+                    {/* Personalization Input */}
+                    <div className="absolute bottom-0 left-0 right-0 p-4 bg-white/80 dark:bg-midnight/80 backdrop-blur-sm border-t border-lavender/20">
+                      <div className="flex gap-3">
+                        <Input
+                          placeholder="Child's name"
+                          value={childName}
+                          onChange={(e) => setChildName(e.target.value)}
+                          className="text-sm"
+                        />
+                        <Button
+                          size="sm"
+                          onClick={() => {
+                            setShowPreview(true);
+                            setRefreshKey((prev) => prev + 1); // Force re-render of typing animations
+                          }}
+                          className="whitespace-nowrap"
+                        >
+                          {showPreview ? 'Refresh Preview' : 'Show Preview'}
+                        </Button>
+                      </div>
+                    </div>
+                  </div>
+                </div>
+              </div>
+            </div>
+
+            {/* Social Proof */}
+            <div className="mt-8 bg-white/80 dark:bg-midnight/80 backdrop-blur-sm rounded-lg p-5 flex justify-around items-center shadow-dreamy">
+              <div className="text-center">
+                <p className="font-bold text-primary text-2xl">10,000+</p>
+                <p className="text-sm text-text-secondary dark:text-text-primary/70">
+                  Stories Created
+                </p>
+              </div>
+              <div className="h-12 border-r border-lavender/30"></div>
+              <div className="text-center">
+                <p className="font-bold text-primary text-2xl">4.9/5</p>
+                <p className="text-sm text-text-secondary dark:text-text-primary/70">
+                  Parent Rating
+                </p>
+              </div>
+              <div className="h-12 border-r border-lavender/30"></div>
+              <div className="text-center">
+                <p className="font-bold text-primary text-2xl">5,000+</p>
+                <p className="text-sm text-text-secondary dark:text-text-primary/70">
+                  Happy Families
+                </p>
+              </div>
+            </div>
+          </div>
+        </div>
+      </section>
+
+      {/* How It Works */}
+      <section
+        id="how-it-works"
+        className="py-20 px-8 bg-white dark:bg-midnight-dark relative overflow-hidden"
+      >
+        {/* Background decorative elements */}
+        <div className="absolute inset-0 z-0 opacity-5">
+          <div className="absolute top-20 left-10 w-40 h-40 rounded-full bg-primary"></div>
+          <div className="absolute bottom-10 right-10 w-60 h-60 rounded-full bg-golden"></div>
+        </div>
+
+        <div className="max-w-5xl mx-auto relative z-10">
+          <div className="text-center mb-16">
+            <h2 className="text-primary text-center mb-4">The Magic Behind Your Stories</h2>
+            <p className="text-lg text-text-secondary dark:text-text-primary/80 max-w-2xl mx-auto">
+              Creating personalized stories for your child is simple and magical. Just follow these
+              three easy steps to bring imagination to life.
+            </p>
+          </div>
+
+          <div className="relative">
+            {/* Connection line between steps */}
+            <div className="hidden md:block absolute top-1/2 left-0 right-0 h-1 bg-gradient-to-r from-lavender via-primary to-golden transform -translate-y-1/2 z-0"></div>
+
+            <div className="grid md:grid-cols-3 gap-12 relative z-10">
+              {/* Step 1 */}
+              <div className="flex flex-col items-center">
+                <div className="w-20 h-20 bg-gradient-to-br from-lavender to-primary rounded-full flex items-center justify-center mb-6 shadow-dreamy">
+                  <span className="text-2xl text-white font-bold">1</span>
+                </div>
+                <Card
+                  hover
+                  className="w-full space-y-4 text-center p-6 bg-sky-50 dark:bg-midnight border-t-4 border-lavender"
+                >
+                  <h3 className="text-primary">Choose Your Adventure</h3>
+                  <p className="text-text-secondary dark:text-text-primary/80">
+                    Select from magical worlds like enchanted forests, space odysseys, or underwater
+                    kingdoms.
+                  </p>
+                  <div className="flex gap-2 flex-wrap mt-4 justify-center">
+                    <Button
+                      variant={selectedTheme === 'space' ? 'primary' : 'outline'}
+                      size="sm"
+                      onClick={() => setSelectedTheme('space')}
+                      className={selectedTheme === 'space' ? 'bg-primary' : ''}
+                    >
+                      <Image
+                        src="/images/illustrations/space-rocket.svg"
+                        alt="Space"
+                        width={20}
+                        height={20}
+                        className="mr-1"
+                      />
+                      Space
+                    </Button>
+                    <Button
+                      variant={selectedTheme === 'fantasy' ? 'primary' : 'outline'}
+                      size="sm"
+                      onClick={() => setSelectedTheme('fantasy')}
+                      className={selectedTheme === 'fantasy' ? 'bg-primary' : ''}
+                    >
+                      <Image
+                        src="/images/illustrations/fairy.svg"
+                        alt="Fantasy"
+                        width={20}
+                        height={20}
+                        className="mr-1"
+                      />
+                      Fantasy
+                    </Button>
+                    <Button
+                      variant={selectedTheme === 'pirates' ? 'primary' : 'outline'}
+                      size="sm"
+                      onClick={() => setSelectedTheme('pirates')}
+                      className={selectedTheme === 'pirates' ? 'bg-primary' : ''}
+                    >
+                      <Image
+                        src="/images/illustrations/pirate.svg"
+                        alt="Pirates"
+                        width={20}
+                        height={20}
+                        className="mr-1"
+                      />
+                      Pirates
+                    </Button>
+                  </div>
+                </Card>
+              </div>
+
+              {/* Step 2 */}
+              <div className="flex flex-col items-center md:mt-12">
+                <div className="w-20 h-20 bg-gradient-to-br from-primary to-dreamy rounded-full flex items-center justify-center mb-6 shadow-dreamy">
+                  <span className="text-2xl text-white font-bold">2</span>
+                </div>
+                <Card
+                  hover
+                  className="w-full space-y-4 text-center p-6 bg-sky-50 dark:bg-midnight border-t-4 border-dreamy"
+                >
+                  <h3 className="text-primary">Create Your Hero</h3>
+                  <p className="text-text-secondary dark:text-text-primary/80">
+                    Personalize with your child&apos;s name, age, and favorite things to make them
+                    the star.
+                  </p>
+                  <div className="flex flex-col gap-2 mt-4">
+                    <Input
+                      placeholder="Child's name"
+                      className="text-center"
+                      value={childName}
+                      onChange={(e) => setChildName(e.target.value)}
+                    />
+                    <div className="flex gap-2 justify-center mt-2">
+                      <Button variant="outline" size="sm">
+                        <Image
+                          src="/images/illustrations/superhero.svg"
+                          alt="Brave"
+                          width={20}
+                          height={20}
+                          className="mr-1"
+                        />
+                        Brave
+                      </Button>
+                      <Button variant="outline" size="sm">
+                        <Image
+                          src="/images/illustrations/brain.svg"
+                          alt="Clever"
+                          width={20}
+                          height={20}
+                          className="mr-1"
+                        />
+                        Clever
+                      </Button>
+                    </div>
+                  </div>
+                </Card>
+              </div>
+
+              {/* Step 3 */}
+              <div className="flex flex-col items-center">
+                <div className="w-20 h-20 bg-gradient-to-br from-dreamy to-golden rounded-full flex items-center justify-center mb-6 shadow-dreamy">
+                  <span className="text-2xl text-white font-bold">3</span>
+                </div>
+                <Card
+                  hover
+                  className="w-full space-y-4 text-center p-6 bg-sky-50 dark:bg-midnight border-t-4 border-golden"
+                >
+                  <h3 className="text-primary">Watch the Magic Happen</h3>
+                  <p className="text-text-secondary dark:text-text-primary/80">
+                    Our AI crafts a unique tale in seconds. Save, print, or read it together at
+                    bedtime.
+                  </p>
+                  <div className="relative h-48 mt-4 overflow-hidden rounded-lg bg-white/50 dark:bg-midnight-light/50 shadow-sm">
+                    {/* Story Generation Process - Interactive Preview */}
+                    <div className="h-full flex items-center justify-center">
+                      <div className="text-center px-4 w-full">
+                        {/* Theme-specific icon */}
+                        <Image
+                          src={
+                            selectedTheme === 'space'
+                              ? '/images/illustrations/space-rocket.svg'
+                              : selectedTheme === 'pirates'
+                                ? '/images/illustrations/pirate.svg'
+                                : '/images/illustrations/fairy.svg'
+                          }
+                          alt="Story theme"
+                          width={60}
+                          height={60}
+                          className="object-contain mx-auto mb-3"
+                        />
+                        <h4 className="text-primary font-medium text-sm mb-2">
+                          {childName}&apos;s{' '}
+                          {selectedTheme === 'space'
+                            ? 'Space Adventure'
+                            : selectedTheme === 'pirates'
+                              ? 'Pirate Quest'
+                              : 'Magical Journey'}
+                        </h4>
+
+                        <div className="h-20 overflow-y-auto text-xs text-text-secondary dark:text-text-primary/70 max-w-xs mx-auto text-left story-text">
+                          <TypedText
+                            key={`theme-preview-${selectedTheme}-${childName}-${refreshKey}`}
+                            text={getActiveStoryPreview(childName)}
+                            className="whitespace-pre-line"
+                            delay={300}
+                          />
+                        </div>
+                      </div>
+                    </div>
+                  </div>
+                </Card>
+              </div>
+            </div>
+          </div>
+
+          <div className="text-center mt-16">
+            <p className="text-text-secondary dark:text-text-primary/80 mb-6 italic">
+              &quot;From theme selection to story creation in less than a minute!&quot;
+            </p>
+            <Link href="/story">
+              <Button size="lg" className="px-8">
+                Create Your First Story
+              </Button>
+            </Link>
+          </div>
+        </div>
+      </section>
+
+      {/* Why Parents Love It */}
+      <section
+        id="features"
+        className="py-16 px-8 bg-gradient-to-r from-teal-50 to-sky-50 dark:from-teal-900 dark:to-sky-900"
+      >
+        <div className="max-w-5xl mx-auto">
+          <h2 className="text-primary text-center mb-12">Why Parents Love It</h2>
+
+          <StoryFeatureGrid />
+
+          {/* Testimonial */}
+          <Card
+            variant="magical"
+            className="mt-12 p-8 text-center bg-white/80 dark:bg-midnight/80 backdrop-blur-sm"
+          >
+            <div className="flex flex-col items-center">
+              <div className="w-16 h-16 bg-lavender rounded-full mb-4"></div>
+              <p className="text-lg italic mb-4">
+                &quot;My daughter asks for a new story every night! It&apos;s become our special
+                bedtime ritual, and I love how each story incorporates her interests.&quot;
+              </p>
+              <p className="font-bold">Sarah T., Parent of 6-year-old</p>
+              <div className="flex mt-2">
+                {[1, 2, 3, 4, 5].map((star) => (
+                  <span key={star} className="text-golden text-xl">
+                    ★
+                  </span>
+                ))}
+              </div>
+            </div>
+          </Card>
+        </div>
+      </section>
+
+      {/* Story Carousel */}
+      <section className="py-16 px-8 bg-gradient-to-r from-teal-50 to-sky-50 dark:from-teal-900 dark:to-sky-900">
+        <div className="max-w-5xl mx-auto">
+          <h2 className="text-primary text-center mb-12">Story Previews</h2>
+
+          <div ref={carouselRef} className="relative h-[300px] mt-12">
+            {carouselItems}
+
+            {/* Carousel Controls */}
+            <div className="absolute -bottom-12 left-0 right-0 flex justify-center gap-2 mt-4">
+              {sampleStories.map((_, index) => (
+                <button
+                  key={index}
+                  className={`w-3 h-3 rounded-full transition-colors ${
+                    index === activeStoryIndex
+                      ? 'bg-primary'
+                      : 'bg-lavender/30 hover:bg-lavender/50'
+                  }`}
+                  onClick={() => setActiveStoryIndex(index)}
+                  aria-label={`Go to story ${index + 1}`}
+                />
+              ))}
+            </div>
+          </div>
+        </div>
+      </section>
+
+      {/* Subscription Section */}
+      <section
+        id="pricing"
+        className="py-20 px-8 bg-gradient-to-b from-cloud to-sky-50 dark:from-midnight dark:to-teal-900 relative overflow-hidden"
+      >
+        {/* Decorative elements */}
+        <div className="absolute top-0 left-0 w-full h-full overflow-hidden opacity-20 pointer-events-none">
+          <div className="absolute top-10 left-1/4 w-16 h-16 rounded-full bg-teal animate-float"></div>
+          <div className="absolute top-40 right-1/3 w-12 h-12 rounded-full bg-golden animate-float delay-150"></div>
+          <div className="absolute bottom-20 left-1/5 w-20 h-20 rounded-full bg-dreamy animate-float delay-300"></div>
+        </div>
+
+        <div className="max-w-5xl mx-auto relative z-10">
+          <div className="text-center mb-16">
+            <h2 className="text-primary text-center mb-4">Start Your Story Journey</h2>
+            <p className="text-center text-lg mb-6 max-w-2xl mx-auto">
+              Begin creating magical stories for your little ones today. No credit card needed to
+              get started!
+            </p>
+            <div className="w-24 h-1 bg-gradient-to-r from-primary to-golden mx-auto rounded-full"></div>
+          </div>
+
+          <div className="grid md:grid-cols-2 gap-10">
+            {/* Free Plan Card */}
+            <Card
+              variant="outline"
+              hover={true}
+              className="p-8 space-y-6 bg-white/90 dark:bg-midnight/90 backdrop-blur-sm border-2 border-lavender/30 relative overflow-hidden"
+            >
+              {/* Decorative corner */}
+              <div className="absolute -top-10 -left-10 w-20 h-20 bg-lavender/20 rounded-full"></div>
+
+              <div className="relative">
+                <h3 className="text-primary text-center mb-2">Free Plan</h3>
+                <div className="text-center mb-6">
+                  <span className="text-4xl font-bold">$0</span>
+                  <span className="text-text-secondary dark:text-text-primary/80 ml-1">/month</span>
+                </div>
+
+                <div className="bg-lavender/10 dark:bg-lavender/20 rounded-xl p-5 mb-6">
+                  <ul className="space-y-4">
+                    <li className="flex items-center gap-3">
+                      <span className="flex-shrink-0 w-6 h-6 rounded-full bg-teal/20 flex items-center justify-center">
+                        <span className="text-teal-500">✓</span>
+                      </span>
+                      <span>3 stories per month</span>
+                    </li>
+                    <li className="flex items-center gap-3">
+                      <span className="flex-shrink-0 w-6 h-6 rounded-full bg-teal/20 flex items-center justify-center">
+                        <span className="text-teal-500">✓</span>
+                      </span>
+                      <span>5 basic themes</span>
+                    </li>
+                    <li className="flex items-center gap-3">
+                      <span className="flex-shrink-0 w-6 h-6 rounded-full bg-teal/20 flex items-center justify-center">
+                        <span className="text-teal-500">✓</span>
+                      </span>
+                      <span>Basic customization</span>
+                    </li>
+                    <li className="flex items-center gap-3">
+                      <span className="flex-shrink-0 w-6 h-6 rounded-full bg-teal/20 flex items-center justify-center">
+                        <span className="text-teal-500">✓</span>
+                      </span>
+                      <span>PDF downloads</span>
+                    </li>
+                  </ul>
+                </div>
+
+                <Link href="/story">
+                  <Button variant="outline" fullWidth className="group relative overflow-hidden">
+                    <span className="relative z-10">Start for Free</span>
+                    <span className="absolute inset-0 bg-primary scale-x-0 group-hover:scale-x-100 origin-left transition-transform duration-300 opacity-20"></span>
+                  </Button>
+                </Link>
+              </div>
+            </Card>
+
+            {/* Premium Plan Card */}
+            <Card
+              variant="magical"
+              hover={true}
+              className="p-8 pt-14 space-y-6 relative overflow-hidden bg-gradient-to-br from-white to-dreamy-light dark:from-midnight dark:to-teal-800 border-2 border-golden/30 shadow-glow"
+            >
+              {/* Popular badge - woodland themed with leaf */}
+              <div className="absolute top-0 left-0 right-0 bg-teal-500/90 text-text-primary font-medium py-2 px-4 text-center shadow-md">
+                <div className="flex items-center justify-center gap-2">
+                  <svg
+                    className="w-5 h-5"
+                    viewBox="0 0 24 24"
+                    fill="none"
+                    xmlns="http://www.w3.org/2000/svg"
+                  >
+                    <path
+                      d="M6.5 12.5C8.5 10.5 12 10 15.5 12.5C19 15 20.5 19 20.5 19C20.5 19 18.5 18.5 16.5 18.5C14.5 18.5 12 19 9.5 21.5C7 24 4 24 4 24C4 24 4 21.5 6 18.5C8 15.5 9.5 14 9.5 14"
+                      stroke="currentColor"
+                      strokeWidth="2"
+                      strokeLinecap="round"
+                      strokeLinejoin="round"
+                    />
+                    <path
+                      d="M11 12.5C11 12.5 13.5 11 15 8.5C16.5 6 16 3 16 3C16 3 13 3.5 11.5 5.5C10 7.5 9 10 9 12.5C9 15 11 17.5 11 17.5"
+                      stroke="currentColor"
+                      strokeWidth="2"
+                      strokeLinecap="round"
+                      strokeLinejoin="round"
+                    />
+                  </svg>
+                  <span>Popular Choice</span>
+                </div>
+              </div>
+
+              {/* Decorative elements */}
+              <div className="absolute -bottom-10 -right-10 w-20 h-20 bg-golden/20 rounded-full"></div>
+
+              <div className="relative">
+                <h3 className="text-primary text-center mb-2">Premium Plan</h3>
+                <div className="text-center mb-6">
+                  <span className="text-4xl font-bold">$4.99</span>
+                  <span className="text-text-secondary dark:text-text-primary/80 ml-1">/month</span>
+                </div>
+
+                <div className="bg-golden/10 dark:bg-golden/20 rounded-xl p-5 mb-6">
+                  <ul className="space-y-4">
+                    <li className="flex items-center gap-3">
+                      <span className="flex-shrink-0 w-6 h-6 rounded-full bg-teal/20 flex items-center justify-center">
+                        <span className="text-teal-500">✓</span>
+                      </span>
+                      <span>Unlimited stories</span>
+                    </li>
+                    <li className="flex items-center gap-3">
+                      <span className="flex-shrink-0 w-6 h-6 rounded-full bg-teal/20 flex items-center justify-center">
+                        <span className="text-teal-500">✓</span>
+                      </span>
+                      <span>20+ premium themes</span>
+                    </li>
+                    <li className="flex items-center gap-3">
+                      <span className="flex-shrink-0 w-6 h-6 rounded-full bg-teal/20 flex items-center justify-center">
+                        <span className="text-teal-500">✓</span>
+                      </span>
+                      <span>Advanced customization</span>
+                    </li>
+                    <li className="flex items-center gap-3">
+                      <span className="flex-shrink-0 w-6 h-6 rounded-full bg-teal/20 flex items-center justify-center">
+                        <span className="text-teal-500">✓</span>
+                      </span>
+                      <span>PDF downloads with illustrations</span>
+                    </li>
+                    <li className="flex items-center gap-3">
+                      <span className="flex-shrink-0 w-6 h-6 rounded-full bg-teal/20 flex items-center justify-center">
+                        <span className="text-teal-500">✓</span>
+                      </span>
+                      <span>Save & edit stories</span>
+                    </li>
+                  </ul>
+                </div>
+
+                <Link href="/story?plan=premium">
+                  <Button fullWidth className="group relative overflow-hidden">
+                    <span className="relative z-10">Get Premium</span>
+                    <span className="absolute inset-0 bg-white scale-x-0 group-hover:scale-x-100 origin-left transition-transform duration-300 opacity-20"></span>
+                  </Button>
+                </Link>
+              </div>
+            </Card>
+          </div>
+
+          {/* Additional info */}
+          <div className="mt-12 text-center">
+            <p className="text-sm text-text-secondary dark:text-text-primary/60 italic">
+              All plans include a 7-day satisfaction guarantee. No questions asked.
+            </p>
+          </div>
+        </div>
+      </section>
+
+      {/* FAQ Section */}
+      <section id="faq" className="py-16 px-8 bg-white dark:bg-midnight-dark">
+        <div className="max-w-3xl mx-auto">
+          <h2 className="text-primary text-center mb-6">Frequently Asked Questions</h2>
+          <p className="text-center text-text-secondary dark:text-text-primary/80 mb-12 max-w-xl mx-auto">
+            Find answers to common questions about our service, pricing, and features.
+          </p>
+
+          {/* FAQ Search */}
+          <div className="mb-8 relative">
+            <Input
+              placeholder="Search FAQs..."
+              className="pl-10"
+              onChange={(e) => {
+                // This would be implemented with actual filtering logic
+                // console.log('Searching for:', e.target.value);
+              }}
+            />
+            <div className="absolute left-3 top-1/2 transform -translate-y-1/2 text-text-secondary">
+              <svg
+                xmlns="http://www.w3.org/2000/svg"
+                width="18"
+                height="18"
+                viewBox="0 0 24 24"
+                fill="none"
+                stroke="currentColor"
+                strokeWidth="2"
+                strokeLinecap="round"
+                strokeLinejoin="round"
+              >
+                <circle cx="11" cy="11" r="8"></circle>
+                <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
+              </svg>
+            </div>
+          </div>
+
+          {/* FAQ Categories */}
+          <div className="flex justify-center mb-8 gap-2 flex-wrap">
+            <Button variant="outline" size="sm" className="rounded-full">
+              All
+            </Button>
+            <Button variant="outline" size="sm" className="rounded-full">
+              Pricing
+            </Button>
+            <Button variant="outline" size="sm" className="rounded-full">
+              Features
+            </Button>
+            <Button variant="outline" size="sm" className="rounded-full">
+              Technical
+            </Button>
+          </div>
+
+          {/* FAQ Accordion */}
+          <div className="space-y-4">
+            {faqs.map((faq, index) => (
+              <FaqAccordionItem key={index} question={faq.question} answer={faq.answer} />
+            ))}
+          </div>
+
+          {/* Additional Help */}
+          <div className="mt-12 text-center">
+            <p className="text-text-secondary dark:text-text-primary/80 mb-4">
+              Still have questions? We&apos;re here to help!
+            </p>
+            <Link href="/contact">
+              <Button variant="outline">Contact Support</Button>
+            </Link>
+          </div>
+        </div>
+      </section>
+
+      {/* Footer */}
+      <Footer />
+    </main>
+  );
+}
diff --git a/src/app/test-svg/page.tsx b/src/app/test-svg/page.tsx
new file mode 100644
index 00000000..0cd5a074
--- /dev/null
+++ b/src/app/test-svg/page.tsx
@@ -0,0 +1,90 @@
+'use client';
+
+import React from 'react';
+import Image from 'next/image';
+import StorybookSvg from '@/components/StorybookSvg';
+
+export default function TestSvgPage() {
+  return (
+    <div className="flex flex-col items-center justify-center min-h-screen p-4 bg-gray-100">
+      <h1 className="text-2xl font-bold mb-8">SVG Test Page</h1>
+
+      <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
+        <div className="flex flex-col items-center p-6 bg-white rounded-lg shadow-md">
+          <h2 className="text-xl font-semibold mb-4">StorybookSvg Component</h2>
+          <div className="w-64 h-64 flex items-center justify-center">
+            <StorybookSvg className="w-full h-full" />
+          </div>
+        </div>
+
+        <div className="flex flex-col items-center p-6 bg-white rounded-lg shadow-md">
+          <h2 className="text-xl font-semibold mb-4">Direct SVG from public folder</h2>
+          <div className="w-64 h-64 flex items-center justify-center">
+            <Image
+              src="/images/illustrations/storybook.svg"
+              alt="Storybook SVG"
+              width={256}
+              height={256}
+              className="w-full h-full object-contain"
+              onError={(e) => {
+                const target = e.target as HTMLImageElement;
+                target.src = '/images/illustrations/test-storybook.svg';
+              }}
+            />
+          </div>
+        </div>
+
+        <div className="flex flex-col items-center p-6 bg-white rounded-lg shadow-md">
+          <h2 className="text-xl font-semibold mb-4">Inline SVG</h2>
+          <div className="w-64 h-64 flex items-center justify-center">
+            <svg
+              width="200"
+              height="200"
+              viewBox="0 0 200 200"
+              fill="none"
+              xmlns="http://www.w3.org/2000/svg"
+            >
+              <rect x="40" y="60" width="120" height="80" rx="5" fill="#8B5CF6" />
+              <rect x="45" y="65" width="110" height="70" rx="3" fill="#A78BFA" />
+              <rect x="100" y="65" width="2" height="70" fill="#7C3AED" />
+              <rect x="50" y="75" width="45" height="5" fill="#EDE9FE" />
+              <rect x="50" y="85" width="45" height="5" fill="#EDE9FE" />
+              <rect x="50" y="95" width="45" height="5" fill="#EDE9FE" />
+              <rect x="50" y="105" width="45" height="5" fill="#EDE9FE" />
+              <rect x="50" y="115" width="45" height="5" fill="#EDE9FE" />
+              <rect x="105" y="75" width="45" height="5" fill="#EDE9FE" />
+              <rect x="105" y="85" width="45" height="5" fill="#EDE9FE" />
+              <rect x="105" y="95" width="45" height="5" fill="#EDE9FE" />
+              <rect x="105" y="105" width="45" height="5" fill="#EDE9FE" />
+              <rect x="105" y="115" width="45" height="5" fill="#EDE9FE" />
+              <path d="M150 65V90L145 85L140 90V65H150Z" fill="#EF4444" />
+              <text
+                x="100"
+                y="140"
+                fontFamily="Arial"
+                fontSize="16"
+                fill="#4B5563"
+                textAnchor="middle"
+              >
+                Story Book
+              </text>
+            </svg>
+          </div>
+        </div>
+
+        <div className="flex flex-col items-center p-6 bg-white rounded-lg shadow-md">
+          <h2 className="text-xl font-semibold mb-4">Test SVG</h2>
+          <div className="w-64 h-64 flex items-center justify-center">
+            <Image
+              src="/images/illustrations/test-storybook.svg"
+              alt="Test Storybook SVG"
+              width={256}
+              height={256}
+              className="w-full h-full object-contain"
+            />
+          </div>
+        </div>
+      </div>
+    </div>
+  );
+}
diff --git a/src/app/test/page.tsx b/src/app/test/page.tsx
new file mode 100644
index 00000000..65433f9d
--- /dev/null
+++ b/src/app/test/page.tsx
@@ -0,0 +1,24 @@
+'use client';
+
+import React from 'react';
+import { StoryWizard } from '@/components/story/StoryWizard';
+import { StoryInput } from '@/types/story';
+
+export default function TestPage() {
+  const handleComplete = async (input: StoryInput) => {
+    console.log('Story input:', input);
+    // In a real app, this would send the input to an API to generate the story
+    alert('Story input received! Check console for details.');
+  };
+
+  return (
+    <div className="min-h-screen bg-gradient-to-b from-blue-50 to-white py-12">
+      <div className="container mx-auto px-4">
+        <h1 className="text-3xl font-bold text-center text-gray-900 mb-8">
+          Story Generator Wizard Demo
+        </h1>
+        <StoryWizard onComplete={handleComplete} />
+      </div>
+    </div>
+  );
+}
diff --git a/src/components/FeatureGrid.tsx b/src/components/FeatureGrid.tsx
deleted file mode 100644
index 6c8cae08..00000000
--- a/src/components/FeatureGrid.tsx
+++ /dev/null
@@ -1,118 +0,0 @@
-'use client';
-
-import React from 'react';
-import { motion } from 'framer-motion';
-import { cn } from '@/lib/utils';
-
-interface FeatureCardProps {
-  title: string;
-  description: string;
-  icon: React.ReactNode;
-  color?: string;
-}
-
-// Simple feature card component
-const FeatureCard: React.FC<FeatureCardProps> = ({
-  title,
-  description,
-  icon,
-  color = '#FFB6C1',
-}) => {
-  return (
-    <motion.div
-      initial={{ scale: 0.9, opacity: 0 }}
-      animate={{ scale: 1, opacity: 1 }}
-      transition={{ duration: 0.3 }}
-      className={cn(
-        'p-6 rounded-2xl bg-midnight dark:bg-midnight-dark shadow-dreamy hover:shadow-glow transition-all duration-300',
-        'border-2 border-opacity-30'
-      )}
-      style={{ borderColor: color }}
-    >
-      <div className="relative h-20 w-20 mx-auto mb-4 flex items-center justify-center">{icon}</div>
-
-      <h3 className="text-xl font-bold text-center mb-2 text-white">{title}</h3>
-      <p className="text-sm text-center text-text-primary/80">{description}</p>
-    </motion.div>
-  );
-};
-
-// Icons
-const BookIcon = () => (
-  <svg
-    xmlns="http://www.w3.org/2000/svg"
-    viewBox="0 0 24 24"
-    fill="none"
-    stroke="currentColor"
-    strokeWidth="2"
-    strokeLinecap="round"
-    strokeLinejoin="round"
-    className="w-12 h-12 text-dreamy"
-  >
-    <path d="M4 19.5A2.5 2.5 0 0 1 6.5 17H20" />
-    <path d="M6.5 2H20v20H6.5A2.5 2.5 0 0 1 4 19.5v-15A2.5 2.5 0 0 1 6.5 2z" />
-  </svg>
-);
-
-const StarIcon = () => (
-  <svg
-    xmlns="http://www.w3.org/2000/svg"
-    viewBox="0 0 24 24"
-    fill="none"
-    stroke="currentColor"
-    strokeWidth="2"
-    strokeLinecap="round"
-    strokeLinejoin="round"
-    className="w-12 h-12 text-primary"
-  >
-    <polygon points="12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2" />
-  </svg>
-);
-
-const RocketIcon = () => (
-  <svg
-    xmlns="http://www.w3.org/2000/svg"
-    viewBox="0 0 24 24"
-    fill="none"
-    stroke="currentColor"
-    strokeWidth="2"
-    strokeLinecap="round"
-    strokeLinejoin="round"
-    className="w-12 h-12 text-sky"
-  >
-    <path d="M4.5 16.5c-1.5 1.26-2 5-2 5s3.74-.5 5-2c.71-.84.7-2.13-.09-2.91a2.18 2.18 0 0 0-2.91-.09z" />
-    <path d="M12 15l-3-3a22 22 0 0 1 2-3.95A12.88 12.88 0 0 1 22 2c0 2.72-.78 7.5-6 11a22.35 22.35 0 0 1-4 2z" />
-    <path d="M9 12H4s.55-3.03 2-4c1.62-1.08 5 0 5 0" />
-    <path d="M12 15v5s3.03-.55 4-2c1.08-1.62 0-5 0-5" />
-  </svg>
-);
-
-// Main component - Feature Grid
-const FeatureGrid = () => {
-  return (
-    <div className="grid grid-cols-1 md:grid-cols-3 gap-6 p-6">
-      <FeatureCard
-        title="Interactive Stories"
-        description="Engage with magical tales that come to life"
-        color="#FF85A1"
-        icon={<BookIcon />}
-      />
-
-      <FeatureCard
-        title="Fun Characters"
-        description="Meet delightful friends along the journey"
-        color="#7B3F92"
-        icon={<StarIcon />}
-      />
-
-      <FeatureCard
-        title="Learning Adventures"
-        description="Discover new worlds while learning"
-        color="#00A6FB"
-        icon={<RocketIcon />}
-      />
-    </div>
-  );
-};
-
-export default FeatureGrid;
diff --git a/src/components/Footer.tsx b/src/components/Footer.tsx
index b97f1b38..6dc4e41f 100644
--- a/src/components/Footer.tsx
+++ b/src/components/Footer.tsx
@@ -2,7 +2,7 @@
 
 import React from 'react';
 import Link from 'next/link';
-import { Twitter, Instagram, Facebook, Heart } from 'lucide-react';
+import Image from 'next/image';
 
 export default function Footer() {
   return (
@@ -58,15 +58,42 @@ export default function Footer() {
             <div className="flex gap-4">
               <a href="#" className="hover:text-primary transition-colors">
                 <span className="sr-only">Twitter</span>
-                <Twitter size={24} />
+                <Image
+                  src="/images/illustrations/twitter.svg"
+                  alt="Twitter"
+                  width={24}
+                  height={24}
+                  className="text-current"
+                  loading="lazy"
+                  sizes="24px"
+                  quality={85}
+                />
               </a>
               <a href="#" className="hover:text-primary transition-colors">
                 <span className="sr-only">Instagram</span>
-                <Instagram size={24} />
+                <Image
+                  src="/images/illustrations/instagram.svg"
+                  alt="Instagram"
+                  width={24}
+                  height={24}
+                  className="text-current"
+                  loading="lazy"
+                  sizes="24px"
+                  quality={85}
+                />
               </a>
               <a href="#" className="hover:text-primary transition-colors">
                 <span className="sr-only">Facebook</span>
-                <Facebook size={24} />
+                <Image
+                  src="/images/illustrations/facebook.svg"
+                  alt="Facebook"
+                  width={24}
+                  height={24}
+                  className="text-current"
+                  loading="lazy"
+                  sizes="24px"
+                  quality={85}
+                />
               </a>
             </div>
           </div>
@@ -74,8 +101,18 @@ export default function Footer() {
 
         <div className="border-t border-text-primary/20 pt-6 text-center">
           <p>
-            Made with <Heart size={16} className="inline text-red-500" /> for parents and kids. ©{' '}
-            {new Date().getFullYear()} Step Into Story Time
+            Made with{' '}
+            <Image
+              src="/images/illustrations/heart.svg"
+              alt="love"
+              width={16}
+              height={16}
+              className="inline"
+              loading="lazy"
+              sizes="16px"
+              quality={85}
+            />{' '}
+            for parents and kids. © {new Date().getFullYear()} Step Into Story Time
           </p>
         </div>
       </div>
diff --git a/src/components/StoryFeatureCard.tsx b/src/components/StoryFeatureCard.tsx
index c4ca1f01..a9f6dfec 100644
--- a/src/components/StoryFeatureCard.tsx
+++ b/src/components/StoryFeatureCard.tsx
@@ -60,6 +60,33 @@ const AnimatedIcon = ({ children }: { children: React.ReactNode }) => {
   );
 };
 
+export function StoryFeatureGrid() {
+  return (
+    <div className="grid grid-cols-1 md:grid-cols-3 gap-6 p-6">
+      <StoryCard
+        title="Interactive Stories"
+        description="Engage with magical tales that come to life"
+        color="#FF85A1"
+        icon={<BookIcon className="w-12 h-12 text-dreamy" />}
+      />
+
+      <StoryCard
+        title="Fun Characters"
+        description="Meet delightful friends along the journey"
+        color="#7B3F92"
+        icon={<StarIcon className="w-12 h-12 text-primary" />}
+      />
+
+      <StoryCard
+        title="Learning Adventures"
+        description="Discover new worlds while learning"
+        color="#00A6FB"
+        icon={<RocketIcon className="w-12 h-12 text-sky" />}
+      />
+    </div>
+  );
+}
+
 const BookIcon = ({ className }: { className?: string }) => (
   <svg
     xmlns="http://www.w3.org/2000/svg"
@@ -109,33 +136,4 @@ const RocketIcon = ({ className }: { className?: string }) => (
   </svg>
 );
 
-// Default export component
-const StoryFeatureGrid = () => {
-  return (
-    <div className="grid grid-cols-1 md:grid-cols-3 gap-6 p-6">
-      <StoryCard
-        title="Interactive Stories"
-        description="Engage with magical tales that come to life"
-        color="#FF85A1"
-        icon={<BookIcon className="w-12 h-12 text-dreamy" />}
-      />
-
-      <StoryCard
-        title="Fun Characters"
-        description="Meet delightful friends along the journey"
-        color="#7B3F92"
-        icon={<StarIcon className="w-12 h-12 text-primary" />}
-      />
-
-      <StoryCard
-        title="Learning Adventures"
-        description="Discover new worlds while learning"
-        color="#00A6FB"
-        icon={<RocketIcon className="w-12 h-12 text-sky" />}
-      />
-    </div>
-  );
-};
-
 export { StoryCard };
-export default StoryFeatureGrid;
diff --git a/src/components/common/ErrorBoundary.tsx b/src/components/common/ErrorBoundary.tsx
deleted file mode 100644
index 38552332..00000000
--- a/src/components/common/ErrorBoundary.tsx
+++ /dev/null
@@ -1,38 +0,0 @@
-import React, { Component, ErrorInfo, ReactNode } from 'react';
-import { logger } from '@/utils/loggerInstance';
-
-interface Props {
-  children: ReactNode;
-  fallback: ReactNode;
-}
-
-interface State {
-  hasError: boolean;
-}
-
-class ErrorBoundary extends Component<Props, State> {
-  public state: State = {
-    hasError: false,
-  };
-
-  public static getDerivedStateFromError(_: Error): State {
-    return { hasError: true };
-  }
-
-  public componentDidCatch(error: Error, errorInfo: ErrorInfo) {
-    logger.error('Error caught by ErrorBoundary:', {
-      error,
-      errorInfo: errorInfo.componentStack,
-    });
-  }
-
-  public render() {
-    if (this.state.hasError) {
-      return this.props.fallback;
-    }
-
-    return this.props.children;
-  }
-}
-
-export default ErrorBoundary;
diff --git a/src/components/story/StoryDisplay.tsx b/src/components/story/StoryDisplay.tsx
index e7e16fd6..268f21c0 100644
--- a/src/components/story/StoryDisplay.tsx
+++ b/src/components/story/StoryDisplay.tsx
@@ -1,59 +1,15 @@
 'use client';
 
-import React, { FC, useState, useCallback, memo, Suspense, lazy } from 'react';
+import React, { FC, useState, useCallback, memo } from 'react';
 import { Story } from '@/types/story';
-import { Button } from '@/components/common/Button';
+import { Button } from '../common/Button';
 import { motion } from 'framer-motion';
 import { logger } from '@/utils/loggerInstance';
+import dynamic from 'next/dynamic';
 import ReadingTime from './ReadingTime';
-import ErrorBoundary from '@/components/common/ErrorBoundary';
-
-// Lazy load TextToSpeech component
-const TextToSpeech = lazy(() =>
-  import('./TextToSpeech').catch((err) => {
-    logger.error('Failed to load TextToSpeech component:', { error: err });
-    return {
-      default: () => (
-        <div className="px-6 pb-6">
-          <div className="flex justify-center">
-            <Button variant="outline" disabled className="text-red-500">
-              Text-to-Speech temporarily unavailable
-            </Button>
-          </div>
-        </div>
-      ),
-    };
-  })
-);
-
-// Wrapper component to handle errors
-const TextToSpeechWrapper: FC<{ text: string }> = ({ text }) => (
-  <ErrorBoundary
-    fallback={
-      <div className="px-6 pb-6">
-        <div className="flex justify-center">
-          <Button variant="outline" disabled className="text-red-500">
-            Text-to-Speech unavailable
-          </Button>
-        </div>
-      </div>
-    }
-  >
-    <Suspense
-      fallback={
-        <div className="px-6 pb-6">
-          <div className="flex justify-center">
-            <Button variant="outline" disabled>
-              Loading Text-to-Speech...
-            </Button>
-          </div>
-        </div>
-      }
-    >
-      <TextToSpeech text={text} />
-    </Suspense>
-  </ErrorBoundary>
-);
+
+// Dynamically import TextToSpeech with no SSR to avoid hydration issues
+const TextToSpeech = dynamic(() => import('./TextToSpeech'), { ssr: false });
 
 interface StoryDisplayProps {
   story: Story;
@@ -182,7 +138,7 @@ const StoryDisplay: FC<StoryDisplayProps> = memo(({ story }) => {
             {formatStoryParagraphs(story.content)}
           </div>
 
-          <TextToSpeechWrapper text={story.content} />
+          <TextToSpeech text={story.content} />
 
           <div className="px-6 pb-6">
             <div className="grid grid-cols-2 gap-4">
diff --git a/src/components/story/TextToSpeech.tsx b/src/components/story/TextToSpeech.tsx
index e7dfbe8d..627dfeb3 100644
--- a/src/components/story/TextToSpeech.tsx
+++ b/src/components/story/TextToSpeech.tsx
@@ -1,151 +1,410 @@
 'use client';
 
-import React, { FC, useEffect, useState, useCallback, useRef } from 'react';
+import React, { useState, useEffect, useCallback } from 'react';
 import { Button } from '../common/Button';
-import { logger } from '@/utils/loggerInstance';
+import { logger } from '@/utils/logger';
 
-export interface TextToSpeechProps {
+interface TextToSpeechProps {
   text: string;
 }
 
-const TextToSpeech: FC<TextToSpeechProps> = ({ text }) => {
+const TextToSpeech: React.FC<TextToSpeechProps> = ({ text }) => {
   const [isPlaying, setIsPlaying] = useState(false);
-  const [isLoading, setIsLoading] = useState(false);
+  const [isPaused, setIsPaused] = useState(false);
+  const [utterance, setUtterance] = useState<SpeechSynthesisUtterance | null>(null);
+  const [voice, setVoice] = useState<SpeechSynthesisVoice | null>(null);
+  const [voices, setVoices] = useState<SpeechSynthesisVoice[]>([]);
+  const [rate, setRate] = useState(0.7); // Default to 0.7x as shown in the image
   const [error, setError] = useState<string | null>(null);
-  const utteranceRef = useRef<SpeechSynthesisUtterance | null>(null);
-  const [isSupported, setIsSupported] = useState(true);
+  const [voicesLoaded, setVoicesLoaded] = useState(false);
 
   // Initialize speech synthesis
   useEffect(() => {
-    const initializeSpeech = async () => {
+    if (typeof window !== 'undefined' && 'speechSynthesis' in window) {
       try {
-        // Check if speech synthesis is supported
-        if (typeof window === 'undefined' || !window.speechSynthesis) {
-          setIsSupported(false);
-          logger.warn('Speech synthesis not supported in this browser');
-          return;
+        // Create utterance
+        const speechUtterance = new SpeechSynthesisUtterance(text);
+        setUtterance(speechUtterance);
+
+        // Get available voices
+        const loadVoices = () => {
+          try {
+            const availableVoices = window.speechSynthesis.getVoices();
+            setVoicesLoaded(true);
+
+            if (availableVoices.length === 0) {
+              // If no voices are available, we'll use the default voice
+              setVoices([]);
+              console.log('No voices available, using default voice');
+              return;
+            }
+
+            // Filter to only include English voices
+            const englishVoices = availableVoices.filter(
+              (v) => v.lang.includes('en-') || v.lang.includes('en_')
+            );
+
+            const voicesToUse = englishVoices.length > 0 ? englishVoices : availableVoices;
+            setVoices(voicesToUse);
+
+            // Try to find a good English voice for stories
+            let preferredVoice = null;
+
+            // First try to find a female English voice
+            preferredVoice = voicesToUse.find(
+              (v) =>
+                v.name.includes('Female') &&
+                (v.name.includes('US') || v.name.includes('UK') || v.name.includes('GB'))
+            );
+
+            // If no specific female voice found, try any English voice
+            if (!preferredVoice) {
+              preferredVoice = voicesToUse.find(
+                (v) => v.lang.includes('en-') || v.lang.includes('en_')
+              );
+            }
+
+            // If still no voice found, use the first available voice
+            if (!preferredVoice && voicesToUse.length > 0) {
+              preferredVoice = voicesToUse[0];
+            }
+
+            if (preferredVoice) {
+              setVoice(preferredVoice);
+              // Only set the voice if the utterance exists
+              if (speechUtterance) {
+                try {
+                  speechUtterance.voice = preferredVoice;
+                } catch (voiceErr) {
+                  console.error('Error setting voice:', voiceErr);
+                }
+              }
+            }
+          } catch (err) {
+            console.error('Error loading voices:', err);
+            setError('Could not load voice options. Using default voice.');
+          }
+        };
+
+        // Chrome loads voices asynchronously
+        if (window.speechSynthesis.onvoiceschanged !== undefined) {
+          window.speechSynthesis.onvoiceschanged = loadVoices;
         }
 
-        // Create new utterance
-        const newUtterance = new SpeechSynthesisUtterance(text);
-        newUtterance.rate = 0.9; // Slightly slower than normal
-        newUtterance.pitch = 1;
+        // Try to load voices immediately as well (for Firefox/Safari)
+        loadVoices();
+
+        // Set initial rate
+        speechUtterance.rate = rate;
 
         // Handle end of speech
-        newUtterance.onend = () => {
+        speechUtterance.onend = () => {
           setIsPlaying(false);
-          setIsLoading(false);
+          setIsPaused(false);
         };
 
         // Handle errors
-        newUtterance.onerror = (event) => {
-          const errorMessage = event.error || 'Unknown speech synthesis error';
-          logger.error('Speech synthesis error:', { error: errorMessage });
+        speechUtterance.onerror = (event) => {
+          console.error('Speech synthesis error:', event);
+          setError('Error playing audio. Please try again or use a different voice.');
           setIsPlaying(false);
-          setIsLoading(false);
-          setError(errorMessage);
+          setIsPaused(false);
 
-          // Only set unsupported if it's a critical error
-          if (event.error === 'synthesis-unavailable' || event.error === 'language-unavailable') {
-            setIsSupported(false);
+          // Try to recover by canceling any ongoing speech
+          try {
+            window.speechSynthesis.cancel();
+          } catch (cancelErr) {
+            console.error('Error canceling speech after error:', cancelErr);
           }
         };
 
-        utteranceRef.current = newUtterance;
+        // Cleanup
+        return () => {
+          try {
+            window.speechSynthesis.cancel();
+          } catch (err) {
+            console.error('Error during cleanup:', err);
+          }
+        };
       } catch (err) {
-        const errorMessage =
-          err instanceof Error ? err.message : 'Failed to initialize speech synthesis';
-        logger.error('Speech initialization error:', { error: err });
-        setError(errorMessage);
-        setIsSupported(false);
+        console.error('Error initializing speech synthesis:', err);
+        setError('Speech synthesis not available on your browser.');
       }
-    };
-
-    initializeSpeech().catch((err) => {
-      logger.error('Unhandled speech initialization error:', { error: err });
-      setError('Failed to initialize speech synthesis');
-      setIsSupported(false);
-    });
+    } else {
+      setError('Speech synthesis not supported in your browser.');
+    }
+  }, [text]);
 
-    // Cleanup
-    return () => {
+  // Update utterance when voice or rate changes
+  useEffect(() => {
+    if (utterance && voice) {
       try {
-        if (window.speechSynthesis) {
-          window.speechSynthesis.cancel();
-        }
+        utterance.voice = voice;
+        utterance.rate = rate;
       } catch (err) {
-        logger.error('Error during cleanup:', { error: err });
+        console.error('Error updating utterance:', err);
+        setError('Could not update voice settings. Please try a different voice.');
       }
-    };
-  }, [text]);
+    }
+  }, [utterance, voice, rate]);
 
-  const toggleSpeech = useCallback(async () => {
-    try {
-      if (!utteranceRef.current || !window.speechSynthesis) {
-        throw new Error('Speech synthesis not initialized');
-      }
+  const handlePlay = useCallback(() => {
+    if (!utterance) {
+      setError('Speech synthesis not initialized. Please refresh the page.');
+      return;
+    }
 
+    try {
       setError(null);
-      setIsLoading(true);
 
-      if (isPlaying) {
-        window.speechSynthesis.cancel();
-        setIsPlaying(false);
+      if (isPaused) {
+        window.speechSynthesis.resume();
       } else {
-        // Ensure any previous speech is cancelled
+        // Cancel any ongoing speech
         window.speechSynthesis.cancel();
 
-        // Small delay to ensure previous speech is fully cancelled
-        await new Promise((resolve) => setTimeout(resolve, 100));
+        // Set the text again in case it changed
+        utterance.text = text;
+
+        // Make sure the voice is set correctly
+        if (voice) {
+          try {
+            utterance.voice = voice;
+          } catch (voiceErr) {
+            console.error('Error setting voice before speaking:', voiceErr);
+            // Continue with default voice if there's an error
+          }
+        }
 
-        window.speechSynthesis.speak(utteranceRef.current);
-        setIsPlaying(true);
+        // Set the rate
+        utterance.rate = rate;
+
+        // Speak
+        window.speechSynthesis.speak(utterance);
       }
+
+      setIsPlaying(true);
+      setIsPaused(false);
     } catch (err) {
-      const errorMessage = err instanceof Error ? err.message : 'Failed to toggle speech';
-      logger.error('Speech toggle error:', { error: err });
-      setError(errorMessage);
-    } finally {
-      setIsLoading(false);
+      console.error('Error playing speech:', err);
+      setError('Could not play audio. Please try again or use a different voice.');
     }
-  }, [isPlaying]);
-
-  if (!isSupported) {
-    return (
-      <div className="px-6 pb-6">
-        <div className="flex justify-center">
-          <Button variant="outline" disabled className="text-red-500">
-            Text-to-Speech not supported in this browser
-          </Button>
-        </div>
-      </div>
-    );
-  }
+  }, [utterance, text, isPaused, voice, rate]);
 
-  if (error) {
-    return (
-      <div className="px-6 pb-6">
-        <div className="flex flex-col items-center gap-2">
-          <Button variant="outline" disabled className="text-red-500">
-            Failed to load Text-to-Speech
-          </Button>
-          <p className="text-sm text-red-500">{error}</p>
-        </div>
-      </div>
-    );
+  const handlePause = useCallback(() => {
+    try {
+      window.speechSynthesis.pause();
+      setIsPaused(true);
+    } catch (err) {
+      console.error('Error pausing speech:', err);
+      setError('Could not pause audio. Please try again.');
+    }
+  }, []);
+
+  const handleStop = useCallback(() => {
+    try {
+      window.speechSynthesis.cancel();
+      setIsPlaying(false);
+      setIsPaused(false);
+    } catch (err) {
+      console.error('Error stopping speech:', err);
+      setError('Could not stop audio. Please try again.');
+    }
+  }, []);
+
+  const handleVoiceChange = useCallback(
+    (e: React.ChangeEvent<HTMLSelectElement>) => {
+      try {
+        const selectedVoice = voices.find((v) => v.name === e.target.value) || null;
+        setVoice(selectedVoice);
+
+        // If currently playing, stop and restart with new voice
+        if (isPlaying) {
+          handleStop();
+          // Small delay to ensure stop completes
+          setTimeout(() => {
+            if (selectedVoice && utterance) {
+              utterance.voice = selectedVoice;
+              handlePlay();
+            }
+          }, 100);
+        }
+      } catch (err) {
+        console.error('Error changing voice:', err);
+        setError('Could not change voice. Please try again.');
+      }
+    },
+    [voices, isPlaying, utterance, handleStop, handlePlay]
+  );
+
+  const handleRateChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {
+    setRate(parseFloat(e.target.value));
+  }, []);
+
+  // If speech synthesis is not supported
+  if (typeof window === 'undefined') {
+    return null;
   }
 
   return (
     <div className="px-6 pb-6">
-      <div className="flex justify-center">
-        <Button
-          variant="outline"
-          onClick={toggleSpeech}
-          disabled={isLoading}
-          className="transition-all duration-200 bg-gradient-to-r from-sky to-primary hover:from-sky/90 hover:to-primary/90 text-white border-0 shadow-md rounded-lg py-3"
-        >
-          {isLoading ? 'Loading...' : isPlaying ? 'Stop Reading' : 'Read Story Aloud'}
-        </Button>
+      <div className="bg-midnight-light/10 dark:bg-midnight-light/20 backdrop-blur-sm rounded-xl p-6">
+        <h3 className="text-lg font-medium text-sky-700 dark:text-sky-300 mb-4">
+          Listen to the Story
+        </h3>
+
+        {error && (
+          <div className="mb-4 p-2 bg-red-100 dark:bg-red-900/30 text-red-700 dark:text-red-300 rounded-md text-sm">
+            {error}
+          </div>
+        )}
+
+        <div className="flex flex-wrap gap-3 mb-6">
+          {!isPlaying ? (
+            <Button
+              onClick={handlePlay}
+              className="bg-gradient-to-r from-sky to-primary hover:from-sky/90 hover:to-primary/90 text-white shadow-md rounded-lg transition-all duration-200 flex items-center justify-center"
+            >
+              <svg
+                xmlns="http://www.w3.org/2000/svg"
+                className="h-5 w-5 mr-2"
+                viewBox="0 0 20 20"
+                fill="currentColor"
+              >
+                <path
+                  fillRule="evenodd"
+                  d="M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z"
+                  clipRule="evenodd"
+                />
+              </svg>
+              Play
+            </Button>
+          ) : (
+            <>
+              {!isPaused ? (
+                <Button
+                  onClick={handlePause}
+                  className="bg-gradient-to-r from-sky to-primary hover:from-sky/90 hover:to-primary/90 text-white shadow-md rounded-lg transition-all duration-200 flex items-center justify-center"
+                >
+                  <svg
+                    xmlns="http://www.w3.org/2000/svg"
+                    className="h-5 w-5 mr-2"
+                    viewBox="0 0 20 20"
+                    fill="currentColor"
+                  >
+                    <path
+                      fillRule="evenodd"
+                      d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zM7 8a1 1 0 012 0v4a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v4a1 1 0 102 0V8a1 1 0 00-1-1z"
+                      clipRule="evenodd"
+                    />
+                  </svg>
+                  Pause
+                </Button>
+              ) : (
+                <Button
+                  onClick={handlePlay}
+                  className="bg-gradient-to-r from-sky to-primary hover:from-sky/90 hover:to-primary/90 text-white shadow-md rounded-lg transition-all duration-200 flex items-center justify-center"
+                >
+                  <svg
+                    xmlns="http://www.w3.org/2000/svg"
+                    className="h-5 w-5 mr-2"
+                    viewBox="0 0 20 20"
+                    fill="currentColor"
+                  >
+                    <path
+                      fillRule="evenodd"
+                      d="M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z"
+                      clipRule="evenodd"
+                    />
+                  </svg>
+                  Resume
+                </Button>
+              )}
+              <Button
+                onClick={handleStop}
+                className="bg-gradient-to-r from-rose-500 to-red-500 hover:from-rose-500/90 hover:to-red-500/90 text-white shadow-md rounded-lg transition-all duration-200 flex items-center justify-center"
+              >
+                <svg
+                  xmlns="http://www.w3.org/2000/svg"
+                  className="h-5 w-5 mr-2"
+                  viewBox="0 0 20 20"
+                  fill="currentColor"
+                >
+                  <path
+                    fillRule="evenodd"
+                    d="M10 18a8 8 0 100-16 8 8 0 000 16zM8 7a1 1 0 00-1 1v4a1 1 0 001 1h4a1 1 0 001-1V8a1 1 0 00-1-1H8z"
+                    clipRule="evenodd"
+                  />
+                </svg>
+                Stop
+              </Button>
+            </>
+          )}
+        </div>
+
+        <div className="flex items-center justify-between">
+          <div className="w-1/2 pr-4">
+            <label
+              htmlFor="voice-select"
+              className="block text-sm font-medium text-gray-800 dark:text-cloud mb-1"
+            >
+              Voice
+            </label>
+            <select
+              id="voice-select"
+              value={voice?.name || ''}
+              onChange={handleVoiceChange}
+              className="w-full px-3 py-2 border border-sky/30 bg-white/70 dark:bg-midnight-light/30 dark:text-cloud rounded-lg shadow-sm focus:outline-none focus:ring-sky/50 focus:border-sky/50 text-sm"
+            >
+              {voices.length > 0 ? (
+                voices.map((v) => (
+                  <option key={v.name} value={v.name}>
+                    {v.name}
+                  </option>
+                ))
+              ) : (
+                <option value="">Default Voice</option>
+              )}
+            </select>
+          </div>
+
+          <div className="w-1/2 pl-4">
+            <label
+              htmlFor="rate-slider"
+              className="block text-sm font-semibold text-gray-800 dark:text-cloud mb-1"
+            >
+              Speed:{' '}
+              <span className="text-primary-600 dark:text-primary-300">{rate.toFixed(1)}x</span>
+            </label>
+            <div className="relative mt-1">
+              <div className="h-2 bg-sky/10 dark:bg-sky/5 rounded-lg w-full absolute"></div>
+              <div
+                className="h-2 bg-gradient-to-r from-sky-400 to-primary rounded-l-lg absolute"
+                style={{ width: `${((rate - 0.5) / 1) * 100}%` }}
+              ></div>
+              <input
+                id="rate-slider"
+                type="range"
+                min="0.5"
+                max="1.5"
+                step="0.1"
+                value={rate}
+                onChange={handleRateChange}
+                className="w-full h-2 appearance-none cursor-pointer opacity-0 z-10 relative"
+              />
+              <div
+                className="absolute top-0 rounded-full bg-white shadow-md border border-sky/30 z-20"
+                style={{
+                  left: `${((rate - 0.5) / 1) * 100}%`,
+                  transform: 'translateX(-50%)',
+                  width: '16px',
+                  height: '16px',
+                  marginTop: '0px',
+                }}
+              />
+            </div>
+          </div>
+        </div>
       </div>
     </div>
   );
diff --git a/src/config/env.ts b/src/config/env.ts
deleted file mode 100644
index 76035f0a..00000000
--- a/src/config/env.ts
+++ /dev/null
@@ -1,13 +0,0 @@
-// Environment variables and configuration
-export const env = {
-  NODE_ENV: process.env.NODE_ENV || 'development',
-  LOG_LEVEL: process.env.LOG_LEVEL || 'info',
-  GEMINI_API_KEY: process.env.GEMINI_API_KEY || '',
-  NEXT_PUBLIC_API_URL: process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3000',
-  KV_URL: process.env.KV_URL || '',
-  UPSTASH_REDIS_REST_URL: process.env.UPSTASH_REDIS_REST_URL || '',
-  UPSTASH_REDIS_REST_TOKEN: process.env.UPSTASH_REDIS_REST_TOKEN || '',
-  KV_REST_API_READ_ONLY_TOKEN: process.env.KV_REST_API_READ_ONLY_TOKEN || '',
-};
-
-export default env;
diff --git a/src/config/telemetry.ts b/src/config/telemetry.ts
deleted file mode 100644
index 9ad2d57a..00000000
--- a/src/config/telemetry.ts
+++ /dev/null
@@ -1,16 +0,0 @@
-import { trace } from '@opentelemetry/api';
-import { Resource } from '@opentelemetry/resources';
-import { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';
-import { env } from './env';
-
-// Create a tracer
-const tracer = trace.getTracer('bedtime-stories', '1.0.0');
-
-// Create a resource that identifies your service
-const resource = new Resource({
-  [SemanticResourceAttributes.SERVICE_NAME]: 'bedtime-stories',
-  [SemanticResourceAttributes.SERVICE_VERSION]: '1.0.0',
-  environment: env.NODE_ENV,
-});
-
-export { tracer, resource };
diff --git a/src/constants/index.js b/src/constants/index.js
index 22ebd1be..4b8129f4 100644
--- a/src/constants/index.js
+++ b/src/constants/index.js
@@ -1,45 +1,34 @@
-'use strict';
+"use strict";
 /**
  * Application-wide constants
  */
-Object.defineProperty(exports, '__esModule', { value: true });
-exports.THEME_ELEMENTS =
-  exports.THEME_DESCRIPTIONS =
-  exports.CACHE_KEYS =
-  exports.GEMINI_MODELS =
-  exports.OPENAI_MODELS =
-  exports.ERROR_CODES =
-  exports.AGE_GROUPS =
-  exports.READING_LEVELS =
-  exports.GENDER_OPTIONS =
-  exports.STORY_MOODS =
-  exports.STORY_THEMES =
-    void 0;
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.THEME_ELEMENTS = exports.THEME_DESCRIPTIONS = exports.CACHE_KEYS = exports.GEMINI_MODELS = exports.OPENAI_MODELS = exports.ERROR_CODES = exports.AGE_GROUPS = exports.READING_LEVELS = exports.GENDER_OPTIONS = exports.STORY_MOODS = exports.STORY_THEMES = void 0;
 // Story themes
 exports.STORY_THEMES = [
-  'adventure',
-  'fantasy',
-  'educational',
-  'friendship',
-  'courage',
-  'kindness',
-  'curiosity',
-  'creativity',
-  'nature',
-  'science',
+    'adventure',
+    'fantasy',
+    'educational',
+    'friendship',
+    'courage',
+    'kindness',
+    'curiosity',
+    'creativity',
+    'nature',
+    'science',
 ];
 // Story moods
 exports.STORY_MOODS = [
-  'humorous',
-  'adventurous',
-  'calming',
-  'mysterious',
-  'exciting',
-  'whimsical',
-  'dramatic',
-  'peaceful',
-  'inspiring',
-  'magical',
+    'humorous',
+    'adventurous',
+    'calming',
+    'mysterious',
+    'exciting',
+    'whimsical',
+    'dramatic',
+    'peaceful',
+    'inspiring',
+    'magical',
 ];
 // Gender options
 exports.GENDER_OPTIONS = ['boy', 'girl', 'neutral', 'male', 'female'];
@@ -49,41 +38,41 @@ exports.READING_LEVELS = ['beginner', 'intermediate', 'advanced'];
 exports.AGE_GROUPS = ['3-5', '6-8', '9-12'];
 // API error codes
 exports.ERROR_CODES = {
-  VALIDATION_ERROR: 'VALIDATION_ERROR',
-  TIMEOUT_ERROR: 'TIMEOUT_ERROR',
-  RATE_LIMIT: 'RATE_LIMIT',
-  GENERATION_ERROR: 'GENERATION_ERROR',
-  NOT_FOUND: 'NOT_FOUND',
-  UNAUTHORIZED: 'UNAUTHORIZED',
+    VALIDATION_ERROR: 'VALIDATION_ERROR',
+    TIMEOUT_ERROR: 'TIMEOUT_ERROR',
+    RATE_LIMIT: 'RATE_LIMIT',
+    GENERATION_ERROR: 'GENERATION_ERROR',
+    NOT_FOUND: 'NOT_FOUND',
+    UNAUTHORIZED: 'UNAUTHORIZED',
 };
 // OpenAI models
 exports.OPENAI_MODELS = {
-  GPT_3_5_TURBO: 'gpt-3.5-turbo',
-  GPT_4: 'gpt-4',
+    GPT_3_5_TURBO: 'gpt-3.5-turbo',
+    GPT_4: 'gpt-4',
 };
 // Gemini models
 exports.GEMINI_MODELS = {
-  GEMINI_PRO: 'gemini-1.5-pro',
-  GEMINI_FLASH: 'gemini-1.5-flash',
+    GEMINI_PRO: 'gemini-1.5-pro',
+    GEMINI_FLASH: 'gemini-1.5-flash',
 };
 // Cache keys
 exports.CACHE_KEYS = {
-  STORY_PREFIX: 'story:',
-  USER_PREFERENCES: 'user:preferences:',
+    STORY_PREFIX: 'story:',
+    USER_PREFERENCES: 'user:preferences:',
 };
 // Theme descriptions
 exports.THEME_DESCRIPTIONS = {
-  adventure: 'an exciting journey filled with challenges and discoveries',
-  fantasy: 'a magical world with enchanting creatures and spells',
-  nature: 'stories about animals, plants, and the natural world',
-  space: 'tales of cosmic exploration and discovery',
-  friendship: 'stories about building relationships and understanding others',
+    adventure: 'an exciting journey filled with challenges and discoveries',
+    fantasy: 'a magical world with enchanting creatures and spells',
+    nature: 'stories about animals, plants, and the natural world',
+    space: 'tales of cosmic exploration and discovery',
+    friendship: 'stories about building relationships and understanding others',
 };
 // Theme elements
 exports.THEME_ELEMENTS = {
-  adventure: ['quests', 'journeys', 'discoveries', 'challenges', 'exploration'],
-  fantasy: ['magic', 'mythical creatures', 'enchanted objects', 'spells'],
-  nature: ['animals', 'forests', 'seasons', 'weather', 'plants'],
-  space: ['planets', 'stars', 'spaceships', 'aliens', 'astronauts'],
-  friendship: ['sharing', 'caring', 'understanding', 'helping', 'teamwork'],
+    adventure: ['quests', 'journeys', 'discoveries', 'challenges', 'exploration'],
+    fantasy: ['magic', 'mythical creatures', 'enchanted objects', 'spells'],
+    nature: ['animals', 'forests', 'seasons', 'weather', 'plants'],
+    space: ['planets', 'stars', 'spaceships', 'aliens', 'astronauts'],
+    friendship: ['sharing', 'caring', 'understanding', 'helping', 'teamwork'],
 };
diff --git a/src/lib/api/ApiErrorHandler.ts b/src/lib/api/ApiErrorHandler.ts
deleted file mode 100644
index ef18b789..00000000
--- a/src/lib/api/ApiErrorHandler.ts
+++ /dev/null
@@ -1,155 +0,0 @@
-import { NextResponse } from 'next/server';
-import { logger } from '@/utils/logger';
-import { StoryError } from '@/types/story';
-import { addCorsHeaders } from '@/utils/cors';
-
-export enum ErrorCode {
-  VALIDATION_ERROR = 'VALIDATION_ERROR',
-  AUTHENTICATION_ERROR = 'AUTHENTICATION_ERROR',
-  AUTHORIZATION_ERROR = 'AUTHORIZATION_ERROR',
-  RATE_LIMIT_ERROR = 'RATE_LIMIT_ERROR',
-  CIRCUIT_BREAKER_ERROR = 'CIRCUIT_BREAKER_ERROR',
-  GENERATION_ERROR = 'GENERATION_ERROR',
-  DATABASE_ERROR = 'DATABASE_ERROR',
-  CACHE_ERROR = 'CACHE_ERROR',
-  UNKNOWN_ERROR = 'UNKNOWN_ERROR',
-}
-
-export interface ApiError extends StoryError {
-  code: ErrorCode;
-  statusCode: number;
-}
-
-export class ApiErrorHandler {
-  static handleError(error: unknown): NextResponse {
-    const apiError = this.createApiError(error);
-
-    logger.error('API Error:', {
-      code: apiError.code,
-      message: apiError.message,
-      details: apiError.details,
-    });
-
-    return addCorsHeaders(
-      NextResponse.json(
-        {
-          error: apiError.message,
-          code: apiError.code,
-          details: apiError.details,
-        },
-        { status: apiError.statusCode }
-      )
-    );
-  }
-
-  private static createApiError(error: unknown): ApiError {
-    if (error instanceof Error) {
-      // Handle known error types
-      if (error.message.includes('validation')) {
-        return {
-          code: ErrorCode.VALIDATION_ERROR,
-          message: error.message,
-          statusCode: 400,
-          details: { stack: error.stack },
-        };
-      }
-
-      if (error.message.includes('authentication') || error.message.includes('not authenticated')) {
-        return {
-          code: ErrorCode.AUTHENTICATION_ERROR,
-          message: 'Authentication required',
-          statusCode: 401,
-          details: { stack: error.stack },
-        };
-      }
-
-      if (error.message.includes('permission') || error.message.includes('not authorized')) {
-        return {
-          code: ErrorCode.AUTHORIZATION_ERROR,
-          message: 'Not authorized to perform this action',
-          statusCode: 403,
-          details: { stack: error.stack },
-        };
-      }
-
-      if (error.message.includes('rate limit')) {
-        return {
-          code: ErrorCode.RATE_LIMIT_ERROR,
-          message: 'Rate limit exceeded',
-          statusCode: 429,
-          details: { stack: error.stack },
-        };
-      }
-
-      if (error.message.includes('circuit breaker')) {
-        return {
-          code: ErrorCode.CIRCUIT_BREAKER_ERROR,
-          message: 'Service temporarily unavailable',
-          statusCode: 503,
-          details: { stack: error.stack },
-        };
-      }
-
-      if (error.message.includes('database')) {
-        return {
-          code: ErrorCode.DATABASE_ERROR,
-          message: 'Database operation failed',
-          statusCode: 500,
-          details: { stack: error.stack },
-        };
-      }
-
-      if (error.message.includes('cache')) {
-        return {
-          code: ErrorCode.CACHE_ERROR,
-          message: 'Cache operation failed',
-          statusCode: 500,
-          details: { stack: error.stack },
-        };
-      }
-
-      // Generic error handling
-      return {
-        code: ErrorCode.UNKNOWN_ERROR,
-        message: error.message,
-        statusCode: 500,
-        details: { stack: error.stack },
-      };
-    }
-
-    // Handle non-Error objects
-    return {
-      code: ErrorCode.UNKNOWN_ERROR,
-      message: 'An unexpected error occurred',
-      statusCode: 500,
-      details: { error },
-    };
-  }
-
-  static createValidationError(errors: string[]): ApiError {
-    return {
-      code: ErrorCode.VALIDATION_ERROR,
-      message: 'Validation failed',
-      statusCode: 400,
-      details: { errors },
-    };
-  }
-
-  static createAuthenticationError(): ApiError {
-    return {
-      code: ErrorCode.AUTHENTICATION_ERROR,
-      message: 'Authentication required',
-      statusCode: 401,
-      details: {},
-    };
-  }
-
-  static createAuthorizationError(): ApiError {
-    return {
-      code: ErrorCode.AUTHORIZATION_ERROR,
-      message: 'Not authorized to perform this action',
-      statusCode: 403,
-      details: {},
-    };
-  }
-}
diff --git a/src/lib/cache/StoryCacheService.ts b/src/lib/cache/StoryCacheService.ts
deleted file mode 100644
index 1b5486a2..00000000
--- a/src/lib/cache/StoryCacheService.ts
+++ /dev/null
@@ -1,121 +0,0 @@
-import { kv } from '@vercel/kv';
-import { Story, StoryInput } from '@/types/story';
-import { logger } from '@/utils/logger';
-
-export interface CacheConfig {
-  enabled: boolean;
-  ttl: number; // in seconds
-  prefix?: string;
-}
-
-export class StoryCacheService {
-  private config: CacheConfig;
-  private static instance: StoryCacheService;
-
-  private constructor(config: Partial<CacheConfig> = {}) {
-    this.config = {
-      enabled: true,
-      ttl: 24 * 60 * 60, // 24 hours default
-      prefix: 'story',
-      ...config,
-    };
-  }
-
-  static getInstance(config?: Partial<CacheConfig>): StoryCacheService {
-    if (!StoryCacheService.instance) {
-      StoryCacheService.instance = new StoryCacheService(config);
-    }
-    return StoryCacheService.instance;
-  }
-
-  async get(input: StoryInput): Promise<Story | null> {
-    if (!this.config.enabled) return null;
-
-    try {
-      const key = this.generateCacheKey(input);
-      const cachedStory = await kv.get<Story>(key);
-
-      if (cachedStory) {
-        logger.info('Cache hit for story:', { key });
-        return cachedStory;
-      }
-
-      logger.info('Cache miss for story:', { key });
-      return null;
-    } catch (error) {
-      this.handleCacheError(error);
-      return null;
-    }
-  }
-
-  async set(input: StoryInput, story: Story): Promise<void> {
-    if (!this.config.enabled) return;
-
-    try {
-      const key = this.generateCacheKey(input);
-      await kv.set(key, story, { ex: this.config.ttl });
-      logger.info('Story cached successfully:', { key });
-    } catch (error) {
-      this.handleCacheError(error);
-    }
-  }
-
-  async invalidate(input: StoryInput): Promise<void> {
-    if (!this.config.enabled) return;
-
-    try {
-      const key = this.generateCacheKey(input);
-      await kv.del(key);
-      logger.info('Cache invalidated for story:', { key });
-    } catch (error) {
-      this.handleCacheError(error);
-    }
-  }
-
-  async invalidateAll(): Promise<void> {
-    if (!this.config.enabled) return;
-
-    try {
-      const pattern = `${this.config.prefix}:*`;
-      const keys = await kv.keys(pattern);
-      if (keys.length > 0) {
-        await kv.del(...keys);
-        logger.info('Cache cleared for all stories');
-      }
-    } catch (error) {
-      this.handleCacheError(error);
-    }
-  }
-
-  setEnabled(enabled: boolean): void {
-    this.config.enabled = enabled;
-    logger.info('Cache status updated:', { enabled });
-  }
-
-  private generateCacheKey(input: StoryInput): string {
-    const {
-      childName,
-      gender,
-      theme,
-      interests = [],
-      mood = 'happy',
-      readingLevel = 'intermediate',
-    } = input;
-    const sortedInterests = [...interests].sort().join(',');
-    return `${this.config.prefix}:${childName}:${gender}:${theme}:${mood}:${readingLevel}:${sortedInterests}`;
-  }
-
-  private handleCacheError(error: unknown): void {
-    const message = error instanceof Error ? error.message : 'Unknown cache error';
-    logger.warn('Cache operation failed:', {
-      error: message,
-      stack: error instanceof Error ? error.stack : undefined,
-    });
-
-    // Disable caching if Redis is not available
-    if (message.toLowerCase().includes('redis') || message.toLowerCase().includes('connection')) {
-      this.config.enabled = false;
-      logger.warn('Redis not available, disabling caching');
-    }
-  }
-}
diff --git a/src/lib/circuit-breaker/CircuitBreaker.ts b/src/lib/circuit-breaker/CircuitBreaker.ts
deleted file mode 100644
index e0e9bd08..00000000
--- a/src/lib/circuit-breaker/CircuitBreaker.ts
+++ /dev/null
@@ -1,154 +0,0 @@
-import { logger } from '@/utils/logger';
-
-export interface CircuitBreakerConfig {
-  failureThreshold: number;
-  resetTimeout: number;
-  monitorInterval?: number;
-  name?: string;
-}
-
-export enum CircuitState {
-  CLOSED = 'CLOSED',
-  OPEN = 'OPEN',
-  HALF_OPEN = 'HALF_OPEN',
-}
-
-export class CircuitBreaker {
-  private state: CircuitState = CircuitState.CLOSED;
-  private failureCount: number = 0;
-  private lastFailureTime?: number;
-  private resetTimer?: NodeJS.Timeout;
-  private readonly config: Required<CircuitBreakerConfig>;
-
-  constructor(config: CircuitBreakerConfig) {
-    this.config = {
-      monitorInterval: 5000, // 5 seconds default
-      name: 'default',
-      ...config,
-    };
-  }
-
-  async execute<T>(operation: () => Promise<T>, fallback?: () => Promise<T>): Promise<T> {
-    if (this.state === CircuitState.OPEN) {
-      if (this.shouldAttemptReset()) {
-        return this.attemptReset(operation, fallback);
-      }
-      return this.handleOpenCircuit(fallback);
-    }
-
-    try {
-      const result = await operation();
-      this.onSuccess();
-      return result;
-    } catch (error) {
-      return this.handleFailure(error, fallback);
-    }
-  }
-
-  private shouldAttemptReset(): boolean {
-    if (!this.lastFailureTime) return false;
-    return Date.now() - this.lastFailureTime >= this.config.resetTimeout;
-  }
-
-  private async attemptReset<T>(
-    operation: () => Promise<T>,
-    fallback?: () => Promise<T>
-  ): Promise<T> {
-    this.state = CircuitState.HALF_OPEN;
-    logger.info('Circuit breaker entering half-open state', {
-      name: this.config.name,
-    });
-
-    try {
-      const result = await operation();
-      this.onSuccess();
-      return result;
-    } catch (error) {
-      return this.handleFailure(error, fallback);
-    }
-  }
-
-  private async handleOpenCircuit<T>(fallback?: () => Promise<T>): Promise<T> {
-    const error = new Error(`Circuit breaker is open for ${this.config.name}`);
-    if (fallback) {
-      logger.info('Circuit open, executing fallback', {
-        name: this.config.name,
-      });
-      return fallback();
-    }
-    throw error;
-  }
-
-  private async handleFailure<T>(error: unknown, fallback?: () => Promise<T>): Promise<T> {
-    this.failureCount++;
-    this.lastFailureTime = Date.now();
-
-    if (this.failureCount >= this.config.failureThreshold) {
-      this.tripBreaker();
-    }
-
-    if (fallback) {
-      logger.warn('Operation failed, executing fallback', {
-        name: this.config.name,
-        error: error instanceof Error ? error.message : 'Unknown error',
-        failureCount: this.failureCount,
-      });
-      return fallback();
-    }
-
-    throw error;
-  }
-
-  private onSuccess(): void {
-    if (this.state !== CircuitState.CLOSED) {
-      logger.info('Circuit breaker reset to closed state', {
-        name: this.config.name,
-      });
-    }
-    this.state = CircuitState.CLOSED;
-    this.failureCount = 0;
-    this.lastFailureTime = undefined;
-    if (this.resetTimer) {
-      clearTimeout(this.resetTimer);
-      this.resetTimer = undefined;
-    }
-  }
-
-  private tripBreaker(): void {
-    this.state = CircuitState.OPEN;
-    logger.warn('Circuit breaker tripped to open state', {
-      name: this.config.name,
-      failureCount: this.failureCount,
-    });
-
-    this.resetTimer = setTimeout(() => {
-      if (this.state === CircuitState.OPEN) {
-        this.state = CircuitState.HALF_OPEN;
-        logger.info('Circuit breaker entering half-open state', {
-          name: this.config.name,
-        });
-      }
-    }, this.config.resetTimeout);
-  }
-
-  getState(): CircuitState {
-    return this.state;
-  }
-
-  getFailureCount(): number {
-    return this.failureCount;
-  }
-
-  reset(): void {
-    this.state = CircuitState.CLOSED;
-    this.failureCount = 0;
-    this.lastFailureTime = undefined;
-    if (this.resetTimer) {
-      clearTimeout(this.resetTimer);
-      this.resetTimer = undefined;
-    }
-    logger.info('Circuit breaker manually reset', {
-      name: this.config.name,
-    });
-  }
-}
diff --git a/src/lib/clerk.ts b/src/lib/clerk.ts
new file mode 100644
index 00000000..e60593e0
--- /dev/null
+++ b/src/lib/clerk.ts
@@ -0,0 +1,19 @@
+import { ClerkProvider, User } from '@clerk/nextjs';
+
+const clerkPubKey = process.env.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY;
+
+if (!clerkPubKey) {
+  throw new Error('Missing NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY');
+}
+
+interface UserPublicMetadata {
+  role?: 'admin' | 'user';
+}
+
+export const clerkConfig = {
+  publishableKey: clerkPubKey,
+};
+
+// Removed isAdmin function - moved to utils/auth.ts
+
+export { ClerkProvider };
diff --git a/src/lib/env.ts b/src/lib/env.ts
index 14f81357..b4598ed3 100644
--- a/src/lib/env.ts
+++ b/src/lib/env.ts
@@ -17,8 +17,8 @@ interface EnvSchema {
   OPENAI_API_KEY: string;
 
   // Vercel KV (Redis) configuration
-  UPSTASH_REDIS_REST_URL: string;
-  UPSTASH_REDIS_REST_TOKEN: string;
+  KV_REST_API_URL: string;
+  KV_REST_API_TOKEN: string;
 
   // Monitoring and error tracking
   SENTRY_DSN: string;
@@ -30,13 +30,6 @@ interface EnvSchema {
   // Performance and limits
   STORY_CACHE_TTL_SECONDS: number;
   API_TIMEOUT_MS: number;
-
-  // Additional configuration
-  LOG_LEVEL: string;
-  GEMINI_API_KEY: string;
-  NEXT_PUBLIC_API_URL: string;
-  KV_URL: string;
-  KV_REST_API_READ_ONLY_TOKEN: string;
 }
 
 // Helper to get environment variable with type conversion
@@ -83,10 +76,11 @@ export const env: EnvSchema = {
 
   // API keys and external services
   OPENAI_API_KEY: getEnvVar('OPENAI_API_KEY', ''),
+  // Removed NEXT_PUBLIC_OPENAI_API_KEY as it's not in EnvSchema interface
 
   // Vercel KV (Redis) configuration
-  UPSTASH_REDIS_REST_URL: getEnvVar('UPSTASH_REDIS_REST_URL', ''),
-  UPSTASH_REDIS_REST_TOKEN: getEnvVar('UPSTASH_REDIS_REST_TOKEN', ''),
+  KV_REST_API_URL: getEnvVar('KV_REST_API_URL', ''),
+  KV_REST_API_TOKEN: getEnvVar('KV_REST_API_TOKEN', ''),
 
   // Monitoring and error tracking
   SENTRY_DSN: getEnvVar('SENTRY_DSN', ''),
@@ -98,13 +92,6 @@ export const env: EnvSchema = {
   // Performance and limits
   STORY_CACHE_TTL_SECONDS: getEnvVar('STORY_CACHE_TTL_SECONDS', 24 * 60 * 60, toNumber),
   API_TIMEOUT_MS: getEnvVar('API_TIMEOUT_MS', 25000, toNumber),
-
-  // Additional configuration
-  LOG_LEVEL: getEnvVar('LOG_LEVEL', 'info'),
-  GEMINI_API_KEY: getEnvVar('GEMINI_API_KEY', ''),
-  NEXT_PUBLIC_API_URL: getEnvVar('NEXT_PUBLIC_API_URL', 'http://localhost:3000'),
-  KV_URL: getEnvVar('KV_URL', ''),
-  KV_REST_API_READ_ONLY_TOKEN: getEnvVar('KV_REST_API_READ_ONLY_TOKEN', ''),
 };
 
 // Environment helper functions
@@ -122,7 +109,7 @@ export function isTest(): boolean {
 
 // Validate required environment variables in production
 if (isProduction()) {
-  const requiredVars = ['OPENAI_API_KEY', 'UPSTASH_REDIS_REST_URL', 'UPSTASH_REDIS_REST_TOKEN'];
+  const requiredVars = ['OPENAI_API_KEY', 'KV_REST_API_URL', 'KV_REST_API_TOKEN'];
 
   const missing = requiredVars.filter((key) => !env[key as keyof EnvSchema]);
 
@@ -130,5 +117,3 @@ if (isProduction()) {
     console.warn(`Missing required environment variables in production: ${missing.join(', ')}`);
   }
 }
-
-export default env;
diff --git a/src/lib/generators/BaseStoryGenerator.ts b/src/lib/generators/BaseStoryGenerator.ts
deleted file mode 100644
index 62edc9e1..00000000
--- a/src/lib/generators/BaseStoryGenerator.ts
+++ /dev/null
@@ -1,160 +0,0 @@
-import { createClient, SupabaseClient } from '@supabase/supabase-js';
-import { v4 as uuidv4 } from 'uuid';
-import { logger } from '@/utils/logger';
-import { createAuthenticatedSupabaseClient } from '@/lib/supabase-auth';
-import { createSupabaseClient } from '@/lib/supabase';
-import { Story, StoryInput, StoryMetadata } from '@/types/story';
-import { StoryCacheService, CacheConfig } from '@/lib/cache/StoryCacheService';
-import { StoryRepository } from '@/lib/repositories/StoryRepository';
-import { CircuitBreaker, CircuitBreakerConfig } from '@/lib/circuit-breaker/CircuitBreaker';
-
-export interface GeneratorConfig {
-  cache?: Partial<CacheConfig>;
-  circuitBreaker?: Partial<CircuitBreakerConfig>;
-}
-
-export abstract class BaseStoryGenerator {
-  protected userId?: string;
-  protected supabase: SupabaseClient;
-  protected cacheService: StoryCacheService;
-  protected repository: StoryRepository;
-  protected circuitBreaker: CircuitBreaker;
-
-  constructor(userId?: string, config: GeneratorConfig = {}) {
-    this.userId = userId;
-    this.supabase = createSupabaseClient();
-    this.cacheService = StoryCacheService.getInstance(config.cache);
-    this.repository = StoryRepository.getInstance();
-    this.circuitBreaker = new CircuitBreaker({
-      failureThreshold: 3,
-      resetTimeout: 30000, // 30 seconds
-      name: this.constructor.name,
-      ...config.circuitBreaker,
-    });
-  }
-
-  /**
-   * Initialize an authenticated Supabase client
-   */
-  protected async initializeAuthenticatedClient(): Promise<void> {
-    try {
-      // Skip authentication in test environment
-      if (process.env.NODE_ENV === 'test') {
-        this.supabase = createClient(
-          process.env.NEXT_PUBLIC_SUPABASE_URL!,
-          process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
-        );
-        return;
-      }
-
-      this.supabase = await createAuthenticatedSupabaseClient();
-    } catch (error) {
-      logger.error('Error creating authenticated Supabase client', { error });
-      logger.warn('Failed to initialize authenticated client, falling back to unauthenticated', {
-        error: error instanceof Error ? error.message : 'Unknown error',
-      });
-
-      // Fallback to unauthenticated client
-      this.supabase = createClient(
-        process.env.NEXT_PUBLIC_SUPABASE_URL!,
-        process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
-      );
-    }
-  }
-
-  async generateStory(input: StoryInput): Promise<Story> {
-    // First check cache
-    const cachedStory = await this.getCachedStory(input);
-    if (cachedStory) {
-      return cachedStory;
-    }
-
-    // Generate story using circuit breaker
-    try {
-      const story = await this.circuitBreaker.execute(
-        () => this.generateStoryInternal(input),
-        async () => {
-          logger.warn('Circuit breaker open, using fallback generator');
-          throw new Error('Story generation failed: Circuit breaker is open');
-        }
-      );
-
-      // Save and cache successful generation
-      await this.saveStory(story);
-      return story;
-    } catch (error) {
-      return this.handleError(error);
-    }
-  }
-
-  protected abstract generateStoryInternal(input: StoryInput): Promise<Story>;
-
-  validateInput(input: StoryInput): boolean {
-    if (!input.childName || !input.gender || !input.theme) {
-      return false;
-    }
-    return true;
-  }
-
-  protected async handleError(error: unknown): Promise<never> {
-    const message = error instanceof Error ? error.message : 'Unknown error occurred';
-    logger.error('Story generation error:', { error });
-    throw new Error(`Story generation failed: ${message}`);
-  }
-
-  protected async saveStory(story: Story): Promise<void> {
-    // Skip saving for anonymous users and test users
-    if (!this.userId || this.userId === 'anonymous' || this.userId.startsWith('test-')) {
-      logger.info('Skipping story save for non-authenticated user:', { userId: this.userId });
-      return;
-    }
-
-    try {
-      await this.repository.saveStory(story);
-      // Cache the story after successful save
-      await this.cacheService.set(story.input, story);
-    } catch (error) {
-      logger.error('Exception saving story:', { error });
-      throw error;
-    }
-  }
-
-  protected async getCachedStory(input: StoryInput): Promise<Story | null> {
-    return this.cacheService.get(input);
-  }
-
-  protected getPronouns(gender: 'boy' | 'girl' | 'neutral'): {
-    subject: string;
-    possessive: string;
-  } {
-    switch (gender) {
-      case 'boy':
-        return { subject: 'he', possessive: 'his' };
-      case 'girl':
-        return { subject: 'she', possessive: 'her' };
-      default:
-        return { subject: 'they', possessive: 'their' };
-    }
-  }
-
-  protected createStoryObject(
-    input: StoryInput,
-    title: string,
-    content: string,
-    metadata: StoryMetadata
-  ): Story {
-    return {
-      id: uuidv4(),
-      title,
-      content,
-      theme: input.theme,
-      createdAt: new Date().toISOString(),
-      input,
-      metadata,
-      userId: this.userId,
-      pronouns: metadata.pronouns,
-      possessivePronouns: metadata.possessivePronouns,
-      generatedAt: metadata.generatedAt,
-    };
-  }
-}
diff --git a/src/lib/generators/ClientStoryGenerator.ts b/src/lib/generators/ClientStoryGenerator.ts
deleted file mode 100644
index ac1ef2ea..00000000
--- a/src/lib/generators/ClientStoryGenerator.ts
+++ /dev/null
@@ -1,75 +0,0 @@
-import { Story, StoryInput } from '@/types/story';
-import { logger } from '@/utils/logger';
-import { generateFallbackStory } from '@/utils/fallback-stories';
-
-export class ClientStoryGenerator {
-  private userId?: string;
-
-  constructor(userId?: string) {
-    this.userId = userId;
-  }
-
-  async generateStory(input: StoryInput): Promise<Story> {
-    try {
-      const response = await fetch('/api/story/generate', {
-        method: 'POST',
-        headers: {
-          'Content-Type': 'application/json',
-        },
-        body: JSON.stringify({
-          input,
-          userId: this.userId,
-        }),
-      });
-
-      if (!response.ok) {
-        throw new Error(`Story generation failed: ${response.statusText}`);
-      }
-
-      const story = await response.json();
-      return story;
-    } catch (error) {
-      logger.error('Error generating story:', { error });
-      return this.createFallbackStory(input);
-    }
-  }
-
-  private createFallbackStory(input: StoryInput): Story {
-    const content = generateFallbackStory(input);
-    const wordCount = content.split(/\s+/).length;
-    const readingTime = Math.ceil(wordCount / 200); // Assuming 200 words per minute
-
-    const pronouns = this.getPronouns(input.gender);
-
-    return {
-      id: crypto.randomUUID(),
-      title: `A Story for ${input.childName}`,
-      content,
-      theme: input.theme,
-      createdAt: new Date().toISOString(),
-      input,
-      metadata: {
-        pronouns: pronouns.subject,
-        possessivePronouns: pronouns.possessive,
-        generatedAt: new Date().toISOString(),
-        wordCount,
-        readingTime,
-      },
-      userId: this.userId,
-      pronouns: pronouns.subject,
-      possessivePronouns: pronouns.possessive,
-      generatedAt: new Date().toISOString(),
-    };
-  }
-
-  private getPronouns(gender: string): { subject: string; possessive: string } {
-    switch (gender) {
-      case 'boy':
-        return { subject: 'he', possessive: 'his' };
-      case 'girl':
-        return { subject: 'she', possessive: 'her' };
-      default:
-        return { subject: 'they', possessive: 'their' };
-    }
-  }
-}
diff --git a/src/lib/generators/GeminiStoryGenerator.ts b/src/lib/generators/GeminiStoryGenerator.ts
deleted file mode 100644
index 11a41bed..00000000
--- a/src/lib/generators/GeminiStoryGenerator.ts
+++ /dev/null
@@ -1,80 +0,0 @@
-import { GoogleGenerativeAI } from '@google/generative-ai';
-import { StoryInput, Story, StoryMetadata } from '@/types/story';
-import { BaseStoryGenerator } from './BaseStoryGenerator';
-import { logger } from '@/utils/logger';
-import { calculateReadingTime } from '@/utils/text';
-
-export class GeminiStoryGenerator extends BaseStoryGenerator {
-  private genAI: GoogleGenerativeAI;
-  private static readonly MODEL = 'gemini-pro';
-
-  constructor(userId?: string) {
-    super(userId);
-    if (!process.env.GEMINI_API_KEY) {
-      throw new Error('GEMINI_API_KEY is not set');
-    }
-    this.genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
-  }
-
-  protected async generateStoryInternal(input: StoryInput): Promise<Story> {
-    if (!this.validateInput(input)) {
-      throw new Error('Invalid input parameters');
-    }
-
-    const model = this.genAI.getGenerativeModel({ model: GeminiStoryGenerator.MODEL });
-    const prompt = this.createPrompt(input);
-
-    const result = await model.generateContent(prompt);
-    const response = await result.response;
-    const storyContent = response.text();
-
-    if (!storyContent) {
-      throw new Error('No story content generated');
-    }
-
-    // Extract title and content
-    const [title, ...contentParts] = storyContent.split('\n').filter(Boolean);
-    const content = contentParts.join('\n');
-
-    // Calculate metadata
-    const wordCount = content.split(/\s+/).length;
-    const readingTime = calculateReadingTime(wordCount);
-    const pronouns = super.getPronouns(input.gender as 'boy' | 'girl' | 'neutral');
-    const metadata: StoryMetadata = {
-      pronouns: pronouns.subject,
-      possessivePronouns: pronouns.possessive,
-      generatedAt: new Date().toISOString(),
-      wordCount,
-      readingTime,
-      model: GeminiStoryGenerator.MODEL,
-      provider: 'gemini',
-    };
-
-    return {
-      id: crypto.randomUUID(),
-      title: title.replace(/^Title:\s*/, ''),
-      content,
-      theme: input.theme,
-      createdAt: new Date().toISOString(),
-      input,
-      metadata,
-      userId: this.userId,
-      pronouns: pronouns.subject,
-      possessivePronouns: pronouns.possessive,
-      generatedAt: metadata.generatedAt,
-    };
-  }
-
-  private createPrompt(input: StoryInput): string {
-    const { childName, gender, theme, readingLevel = 'intermediate', mood = 'happy' } = input;
-
-    return `Create a bedtime story for ${childName}, who is a ${gender}. 
-    The story should be themed around "${theme}" and have a "${mood}" mood.
-    The reading level should be "${readingLevel}".
-    The story should be engaging, educational, and approximately 500 words long.
-    Include a clear beginning, middle, and end.
-    Make the story personal by using ${childName}'s name throughout the narrative.
-    Ensure the content is age-appropriate and promotes positive values.
-    Start with "Title: " followed by the story title on the first line, then the story content.`;
-  }
-}
diff --git a/src/lib/generators/OpenAIStoryGenerator.ts b/src/lib/generators/OpenAIStoryGenerator.ts
deleted file mode 100644
index 85e2bf52..00000000
--- a/src/lib/generators/OpenAIStoryGenerator.ts
+++ /dev/null
@@ -1,91 +0,0 @@
-import OpenAI from 'openai';
-import { StoryInput, Story, StoryMetadata } from '@/types/story';
-import { BaseStoryGenerator } from './BaseStoryGenerator';
-import { logger } from '@/utils/logger';
-import { calculateReadingTime } from '@/utils/text';
-
-export class OpenAIStoryGenerator extends BaseStoryGenerator {
-  private openai: OpenAI;
-  private static readonly MODEL = 'gpt-4-turbo-preview';
-
-  constructor(userId?: string) {
-    super(userId);
-    this.openai = new OpenAI({
-      apiKey: process.env.OPENAI_API_KEY,
-    });
-  }
-
-  protected async generateStoryInternal(input: StoryInput): Promise<Story> {
-    if (!this.validateInput(input)) {
-      throw new Error('Invalid input parameters');
-    }
-
-    const prompt = this.createPrompt(input);
-    const response = await this.openai.chat.completions.create({
-      model: OpenAIStoryGenerator.MODEL,
-      messages: [
-        {
-          role: 'system',
-          content:
-            "You are a creative children's story writer. Create engaging, age-appropriate stories that are fun and educational. Return the story with a title.",
-        },
-        {
-          role: 'user',
-          content: prompt,
-        },
-      ],
-      temperature: 0.7,
-      max_tokens: 1000,
-    });
-
-    const storyContent = response.choices[0]?.message?.content;
-    if (!storyContent) {
-      throw new Error('No story content generated');
-    }
-
-    // Extract title and content
-    const [title, ...contentParts] = storyContent.split('\n').filter(Boolean);
-    const content = contentParts.join('\n');
-
-    // Calculate metadata
-    const wordCount = content.split(/\s+/).length;
-    const readingTime = calculateReadingTime(wordCount);
-    const pronouns = super.getPronouns(input.gender as 'boy' | 'girl' | 'neutral');
-    const metadata: StoryMetadata = {
-      pronouns: pronouns.subject,
-      possessivePronouns: pronouns.possessive,
-      generatedAt: new Date().toISOString(),
-      wordCount,
-      readingTime,
-      model: OpenAIStoryGenerator.MODEL,
-      provider: 'openai',
-    };
-
-    return {
-      id: crypto.randomUUID(),
-      title: title.replace(/^Title:\s*/, ''),
-      content,
-      theme: input.theme,
-      createdAt: new Date().toISOString(),
-      input,
-      metadata,
-      userId: this.userId,
-      pronouns: pronouns.subject,
-      possessivePronouns: pronouns.possessive,
-      generatedAt: metadata.generatedAt,
-    };
-  }
-
-  private createPrompt(input: StoryInput): string {
-    const { childName, gender, theme, readingLevel = 'intermediate', mood = 'happy' } = input;
-
-    return `Create a bedtime story for ${childName}, who is a ${gender}. 
-    The story should be themed around "${theme}" and have a "${mood}" mood.
-    The reading level should be "${readingLevel}".
-    The story should be engaging, educational, and approximately 500 words long.
-    Include a clear beginning, middle, and end.
-    Make the story personal by using ${childName}'s name throughout the narrative.
-    Ensure the content is age-appropriate and promotes positive values.
-    Start with "Title: " followed by the story title on the first line, then the story content.`;
-  }
-}
diff --git a/src/lib/generators/StoryGeneratorFactory.ts b/src/lib/generators/StoryGeneratorFactory.ts
deleted file mode 100644
index f7355316..00000000
--- a/src/lib/generators/StoryGeneratorFactory.ts
+++ /dev/null
@@ -1,53 +0,0 @@
-import { OpenAIStoryGenerator } from './OpenAIStoryGenerator';
-import { GeminiStoryGenerator } from './GeminiStoryGenerator';
-import { BaseStoryGenerator } from './BaseStoryGenerator';
-import { logger } from '@/utils/logger';
-
-export type StoryGeneratorType = 'openai' | 'gemini';
-
-export class StoryGeneratorFactory {
-  private static instances: Map<string, BaseStoryGenerator> = new Map();
-
-  static create(type: StoryGeneratorType, userId?: string): BaseStoryGenerator {
-    const key = `${type}:${userId || 'anonymous'}`;
-
-    // Return cached instance if available
-    const existingInstance = this.instances.get(key);
-    if (existingInstance) {
-      return existingInstance;
-    }
-
-    // Create new instance
-    const generator = this.createGenerator(type, userId);
-    this.instances.set(key, generator);
-    logger.info('Created new story generator', { type, userId: userId || 'anonymous' });
-
-    return generator;
-  }
-
-  private static createGenerator(type: StoryGeneratorType, userId?: string): BaseStoryGenerator {
-    switch (type) {
-      case 'openai':
-        return new OpenAIStoryGenerator(userId);
-      case 'gemini':
-        return new GeminiStoryGenerator(userId);
-      default:
-        throw new Error(`Unknown story generator type: ${type}`);
-    }
-  }
-
-  static getInstance(type: StoryGeneratorType, userId?: string): BaseStoryGenerator | undefined {
-    const key = `${type}:${userId || 'anonymous'}`;
-    return this.instances.get(key);
-  }
-
-  static hasInstance(type: StoryGeneratorType, userId?: string): boolean {
-    const key = `${type}:${userId || 'anonymous'}`;
-    return this.instances.has(key);
-  }
-
-  static clearInstances(): void {
-    this.instances.clear();
-    logger.info('Cleared all story generator instances');
-  }
-}
diff --git a/src/lib/repositories/StoryRepository.ts b/src/lib/repositories/StoryRepository.ts
deleted file mode 100644
index 16473e7b..00000000
--- a/src/lib/repositories/StoryRepository.ts
+++ /dev/null
@@ -1,141 +0,0 @@
-import { SupabaseClient } from '@supabase/supabase-js';
-import { Story, StoryInput } from '@/types/story';
-import { createSupabaseClient } from '@/lib/supabase';
-import { logger } from '@/utils/logger';
-
-export class StoryRepository {
-  private static instance: StoryRepository;
-  private supabase: SupabaseClient;
-
-  private constructor() {
-    this.supabase = createSupabaseClient();
-  }
-
-  static getInstance(): StoryRepository {
-    if (!StoryRepository.instance) {
-      StoryRepository.instance = new StoryRepository();
-    }
-    return StoryRepository.instance;
-  }
-
-  async saveStory(story: Story): Promise<void> {
-    try {
-      const { error } = await this.supabase.from('stories').insert({
-        id: story.id,
-        title: story.title,
-        content: story.content,
-        user_id: story.userId,
-        metadata: story.metadata,
-        theme: story.theme,
-        input: story.input,
-      });
-
-      if (error) {
-        logger.error('Error saving story to database:', { error });
-        throw error;
-      }
-
-      logger.info('Story saved successfully:', { storyId: story.id });
-    } catch (error) {
-      logger.error('Exception saving story:', { error });
-      throw error;
-    }
-  }
-
-  async getStoryById(id: string): Promise<Story | null> {
-    try {
-      const { data, error } = await this.supabase.from('stories').select('*').eq('id', id).single();
-
-      if (error) {
-        logger.error('Error fetching story:', { error, storyId: id });
-        throw error;
-      }
-
-      return data ? this.mapDatabaseStoryToStory(data) : null;
-    } catch (error) {
-      logger.error('Exception fetching story:', { error, storyId: id });
-      throw error;
-    }
-  }
-
-  async getUserStories(userId: string, limit = 10, offset = 0): Promise<Story[]> {
-    try {
-      const { data, error } = await this.supabase
-        .from('stories')
-        .select('*')
-        .eq('user_id', userId)
-        .order('created_at', { ascending: false })
-        .range(offset, offset + limit - 1);
-
-      if (error) {
-        logger.error('Error fetching user stories:', { error, userId });
-        throw error;
-      }
-
-      return data ? data.map(this.mapDatabaseStoryToStory) : [];
-    } catch (error) {
-      logger.error('Exception fetching user stories:', { error, userId });
-      throw error;
-    }
-  }
-
-  async deleteStory(id: string, userId: string): Promise<void> {
-    try {
-      const { error } = await this.supabase
-        .from('stories')
-        .delete()
-        .eq('id', id)
-        .eq('user_id', userId);
-
-      if (error) {
-        logger.error('Error deleting story:', { error, storyId: id });
-        throw error;
-      }
-
-      logger.info('Story deleted successfully:', { storyId: id });
-    } catch (error) {
-      logger.error('Exception deleting story:', { error, storyId: id });
-      throw error;
-    }
-  }
-
-  async searchStories(userId: string, query: string): Promise<Story[]> {
-    try {
-      const { data, error } = await this.supabase
-        .from('stories')
-        .select('*')
-        .eq('user_id', userId)
-        .textSearch('content', query)
-        .order('created_at', { ascending: false });
-
-      if (error) {
-        logger.error('Error searching stories:', { error, userId, query });
-        throw error;
-      }
-
-      return data ? data.map(this.mapDatabaseStoryToStory) : [];
-    } catch (error) {
-      logger.error('Exception searching stories:', { error, userId, query });
-      throw error;
-    }
-  }
-
-  private mapDatabaseStoryToStory(data: any): Story {
-    return {
-      id: data.id,
-      title: data.title,
-      content: data.content,
-      theme: data.theme,
-      createdAt: data.created_at,
-      input: data.input,
-      metadata: data.metadata,
-      userId: data.user_id,
-      pronouns: data.metadata.pronouns,
-      possessivePronouns: data.metadata.possessivePronouns,
-      generatedAt: data.metadata.generatedAt,
-      created_at: data.created_at,
-      updated_at: data.updated_at,
-      user_id: data.user_id,
-    };
-  }
-}
diff --git a/src/lib/storyGenerator.ts b/src/lib/storyGenerator.ts
new file mode 100644
index 00000000..ee86780a
--- /dev/null
+++ b/src/lib/storyGenerator.ts
@@ -0,0 +1,15 @@
+import { Story, StoryInput } from '@/types/story';
+import { UserPersonalizationEngine } from '@/services/personalizationEngine';
+
+export async function generateStory(input: StoryInput, userId?: string): Promise<Story> {
+  try {
+    const engine = new UserPersonalizationEngine(userId);
+    const story = await engine.generatePersonalizedStory(input);
+    if (!story) {
+      throw new Error('Failed to generate story');
+    }
+    return story;
+  } catch (error) {
+    throw new Error('Failed to generate story: ' + (error as Error).message);
+  }
+}
diff --git a/src/lib/validators/StoryRequestValidator.ts b/src/lib/validators/StoryRequestValidator.ts
deleted file mode 100644
index 8908d2b4..00000000
--- a/src/lib/validators/StoryRequestValidator.ts
+++ /dev/null
@@ -1,119 +0,0 @@
-import { StoryInput, StoryTheme, StoryMood, StoryGender, ReadingLevel } from '@/types/story';
-
-export interface ValidationResult {
-  isValid: boolean;
-  errors: string[];
-}
-
-export class StoryRequestValidator {
-  private static readonly MAX_NAME_LENGTH = 50;
-  private static readonly MAX_INTERESTS_LENGTH = 10;
-  private static readonly MAX_CHARACTERS_LENGTH = 10;
-  private static readonly MAX_TRAITS_LENGTH = 10;
-
-  static validateStoryInput(input: Partial<StoryInput>): ValidationResult {
-    const errors: string[] = [];
-
-    // Required fields
-    if (!input.childName) {
-      errors.push('Child name is required');
-    } else if (input.childName.length > this.MAX_NAME_LENGTH) {
-      errors.push(`Child name must be less than ${this.MAX_NAME_LENGTH} characters`);
-    }
-
-    if (!input.gender) {
-      errors.push('Gender is required');
-    } else if (!this.isValidGender(input.gender)) {
-      errors.push('Invalid gender value');
-    }
-
-    if (!input.theme) {
-      errors.push('Theme is required');
-    } else if (!this.isValidTheme(input.theme)) {
-      errors.push('Invalid theme value');
-    }
-
-    // Optional fields
-    if (input.mood && !this.isValidMood(input.mood)) {
-      errors.push('Invalid mood value');
-    }
-
-    if (input.readingLevel && !this.isValidReadingLevel(input.readingLevel)) {
-      errors.push('Invalid reading level');
-    }
-
-    if (input.interests && !this.validateArrayLength(input.interests, this.MAX_INTERESTS_LENGTH)) {
-      errors.push(`Maximum ${this.MAX_INTERESTS_LENGTH} interests allowed`);
-    }
-
-    if (
-      input.favoriteCharacters &&
-      !this.validateArrayLength(input.favoriteCharacters, this.MAX_CHARACTERS_LENGTH)
-    ) {
-      errors.push(`Maximum ${this.MAX_CHARACTERS_LENGTH} favorite characters allowed`);
-    }
-
-    if (input.traits && !this.validateArrayLength(input.traits, this.MAX_TRAITS_LENGTH)) {
-      errors.push(`Maximum ${this.MAX_TRAITS_LENGTH} traits allowed`);
-    }
-
-    // Sanitize strings
-    if (input.childName) {
-      input.childName = this.sanitizeString(input.childName);
-    }
-
-    if (input.interests) {
-      input.interests = input.interests.map(this.sanitizeString);
-    }
-
-    if (input.favoriteCharacters) {
-      input.favoriteCharacters = input.favoriteCharacters.map(this.sanitizeString);
-    }
-
-    if (input.traits) {
-      input.traits = input.traits.map(this.sanitizeString);
-    }
-
-    return {
-      isValid: errors.length === 0,
-      errors,
-    };
-  }
-
-  private static isValidTheme(theme: string): theme is StoryTheme {
-    const validThemes: StoryTheme[] = [
-      'adventure',
-      'fantasy',
-      'kind',
-      'curious',
-      'creativity',
-      'kind',
-      'curious',
-      'creativity',
-    ];
-    return validThemes.includes(theme as StoryTheme);
-  }
-  private static isValidMood(mood: string): mood is StoryMood {
-    const validMoods: StoryMood[] = ['happy', 'exciting', 'calm', 'sad', 'funny'];
-    return validMoods.includes(mood as StoryMood);
-  }
-
-  private static isValidGender(gender: string): gender is StoryGender {
-    const validGenders: StoryGender[] = ['boy', 'girl', 'neutral'];
-    return validGenders.includes(gender as StoryGender);
-  }
-
-  private static isValidReadingLevel(level: string): level is ReadingLevel {
-    const validLevels: ReadingLevel[] = ['beginner', 'intermediate', 'advanced'];
-    return validLevels.includes(level as ReadingLevel);
-  }
-
-  private static validateArrayLength(arr: string[], maxLength: number): boolean {
-    return Array.isArray(arr) && arr.length <= maxLength;
-  }
-
-  private static sanitizeString(str: string): string {
-    // Remove any HTML tags and trim whitespace
-    return str.replace(/<[^>]*>/g, '').trim();
-  }
-}
diff --git a/src/pages/api/testStoryGeneration.ts b/src/pages/api/testStoryGeneration.ts
new file mode 100644
index 00000000..44ac6211
--- /dev/null
+++ b/src/pages/api/testStoryGeneration.ts
@@ -0,0 +1,20 @@
+import { NextApiRequest, NextApiResponse } from 'next';
+import { userPersonalizationEngine } from '@/services/personalizationEngine';
+import { StoryInput } from '@/types/story';
+
+export default async function handler(req: NextApiRequest, res: NextApiResponse) {
+  const input: StoryInput = {
+    childName: 'Alice',
+    gender: 'girl',
+    theme: 'adventure',
+    interests: ['magic', 'animals'],
+  };
+
+  try {
+    const story = await userPersonalizationEngine.generatePersonalizedStory(input);
+    res.status(200).json({ story });
+  } catch (error) {
+    console.error('Story generation failed:', error);
+    res.status(500).json({ error: 'Story generation failed' });
+  }
+}
diff --git a/src/scripts/test-gemini-implementation.js b/src/scripts/test-gemini-implementation.js
new file mode 100644
index 00000000..8f50b125
--- /dev/null
+++ b/src/scripts/test-gemini-implementation.js
@@ -0,0 +1,74 @@
+"use strict";
+var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
+    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
+    return new (P || (P = Promise))(function (resolve, reject) {
+        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
+        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
+        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
+        step((generator = generator.apply(thisArg, _arguments || [])).next());
+    });
+};
+var __generator = (this && this.__generator) || function (thisArg, body) {
+    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
+    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
+    function verb(n) { return function (v) { return step([n, v]); }; }
+    function step(op) {
+        if (f) throw new TypeError("Generator is already executing.");
+        while (g && (g = 0, op[0] && (_ = 0)), _) try {
+            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
+            if (y = 0, t) op = [op[0] & 2, t.value];
+            switch (op[0]) {
+                case 0: case 1: t = op; break;
+                case 4: _.label++; return { value: op[1], done: false };
+                case 5: _.label++; y = op[1]; op = [0]; continue;
+                case 7: op = _.ops.pop(); _.trys.pop(); continue;
+                default:
+                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
+                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
+                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
+                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
+                    if (t[2]) _.ops.pop();
+                    _.trys.pop(); continue;
+            }
+            op = body.call(thisArg, _);
+        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
+        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
+    }
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+var personalizationEngine_1 = require("../services/personalizationEngine");
+function testGeminiImplementation() {
+    return __awaiter(this, void 0, void 0, function () {
+        var userId, engine, input, story, error_1;
+        return __generator(this, function (_a) {
+            switch (_a.label) {
+                case 0:
+                    userId = 'test-user';
+                    engine = new personalizationEngine_1.UserPersonalizationEngine(userId);
+                    input = {
+                        childName: 'Alex',
+                        interests: ['dinosaurs', 'space'],
+                        theme: 'adventure',
+                        gender: 'neutral', // Updated gender to match expected type
+                        favoriteCharacters: ['Dino', 'Rocket'],
+                        mostLikedCharacterTypes: ['funny', 'brave'],
+                    };
+                    _a.label = 1;
+                case 1:
+                    _a.trys.push([1, 3, , 4]);
+                    return [4 /*yield*/, engine.generatePersonalizedStory(input)];
+                case 2:
+                    story = _a.sent();
+                    console.log('Generated Story:', story);
+                    return [3 /*break*/, 4];
+                case 3:
+                    error_1 = _a.sent();
+                    console.error('Error generating story:', error_1);
+                    return [3 /*break*/, 4];
+                case 4: return [2 /*return*/];
+            }
+        });
+    });
+}
+// Run the test
+testGeminiImplementation();
diff --git a/src/scripts/test-story-generation.ts b/src/scripts/test-story-generation.ts
deleted file mode 100644
index af651ea4..00000000
--- a/src/scripts/test-story-generation.ts
+++ /dev/null
@@ -1,156 +0,0 @@
-import { config } from 'dotenv';
-import { resolve } from 'path';
-import { createClient } from '@supabase/supabase-js';
-
-// Load test environment variables
-config({ path: resolve(process.cwd(), '.env.test') });
-
-import { StoryGeneratorFactory } from '@/lib/generators/StoryGeneratorFactory';
-import { StoryInput, StoryGender } from '@/types/story';
-
-const logger = {
-  info: (message: string, data?: any) =>
-    console.log(`[INFO] ${new Date().toISOString()} - ${message}`, data ? data : ''),
-  warn: (message: string, data?: any) =>
-    console.warn(`[WARN] ${new Date().toISOString()} - ${message}`, data ? data : ''),
-  error: (message: string, data?: any) =>
-    console.error(`[ERROR] ${new Date().toISOString()} - ${message}`, data ? data : ''),
-};
-
-// Initialize Supabase client
-function initSupabaseClient() {
-  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
-  const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;
-
-  if (!supabaseUrl || !supabaseAnonKey) {
-    throw new Error('Missing Supabase environment variables');
-  }
-
-  return createClient(supabaseUrl, supabaseAnonKey);
-}
-
-async function testStoryGeneration() {
-  logger.info('Starting story generation test suite');
-
-  // Initialize Supabase client
-  try {
-    const supabase = initSupabaseClient();
-    logger.info('Successfully initialized Supabase client');
-  } catch (error) {
-    logger.error('Failed to initialize Supabase client', { error });
-    return;
-  }
-
-  const testStoryInput: StoryInput = {
-    childName: 'Test Child',
-    gender: 'neutral' as StoryGender,
-    theme: 'adventure',
-    interests: ['space', 'dinosaurs'],
-    readingLevel: 'beginner',
-    mood: 'happy',
-  };
-
-  // Test 1: OpenAI Generator
-  try {
-    logger.info('Test 1: Testing OpenAI Generator');
-    const openaiGenerator = await StoryGeneratorFactory.create('openai', 'anonymous');
-    const openaiStory = await openaiGenerator.generateStory(testStoryInput);
-    logger.info('OpenAI Generator Test Passed', { story: openaiStory });
-  } catch (error) {
-    logger.error('OpenAI Generator Test Failed:', { error });
-  }
-
-  // Test 2: Gemini Generator
-  try {
-    logger.info('Test 2: Testing Gemini Generator');
-    const geminiGenerator = await StoryGeneratorFactory.create('gemini', 'anonymous');
-    const geminiStory = await geminiGenerator.generateStory(testStoryInput);
-    logger.info('Gemini Generator Test Passed', { story: geminiStory });
-  } catch (error) {
-    logger.error('Gemini Generator Test Failed:', { error });
-  }
-
-  // Test 3: Cache Functionality
-  try {
-    logger.info('Test 3: Testing Cache Functionality');
-    const generator = await StoryGeneratorFactory.create('openai', 'anonymous');
-
-    // Generate story twice with same input
-    const firstStory = await generator.generateStory(testStoryInput);
-    const secondStory = await generator.generateStory(testStoryInput);
-
-    // If Redis is not available, skip cache test
-    if (!generator.config.cacheEnabled) {
-      logger.info('Cache test skipped - Redis not available');
-    } else {
-      // Check if stories are identical (indicating cache hit)
-      const cacheWorking = JSON.stringify(firstStory) === JSON.stringify(secondStory);
-      if (cacheWorking) {
-        logger.info('Cache Test Passed');
-      } else {
-        throw new Error('Cache not working as expected');
-      }
-    }
-  } catch (error) {
-    logger.error('Cache Test Failed:', { error });
-  }
-
-  // Test 4: Error Handling and Fallback
-  try {
-    logger.info('Test 4: Testing Error Handling and Fallback');
-    const generator = await StoryGeneratorFactory.create('openai', 'anonymous');
-
-    // Store original key
-    const originalKey = process.env.OPENAI_API_KEY;
-
-    try {
-      // Force an error by setting invalid API key temporarily
-      process.env.OPENAI_API_KEY = 'invalid_key';
-      await generator.generateStory(testStoryInput);
-    } catch (error) {
-      // Check if error was handled correctly
-      if (error instanceof Error && error.message.includes('API key')) {
-        logger.info('Error Handling Test Passed');
-      } else {
-        throw error;
-      }
-    } finally {
-      // Always restore original key
-      process.env.OPENAI_API_KEY = originalKey;
-    }
-  } catch (error) {
-    logger.error('Error Handling Test Failed:', { error });
-  }
-
-  // Test 5: Database Integration
-  try {
-    logger.info('Test 5: Testing Database Integration');
-    const generator = await StoryGeneratorFactory.create(
-      'openai',
-      process.env.TEST_USER_ID || 'test-user-id'
-    );
-    const story = await generator.generateStory(testStoryInput);
-
-    // Verify story was saved to database
-    if (story.id) {
-      logger.info('Database Integration Test Passed', { storyId: story.id });
-    } else {
-      throw new Error('Story was not saved to database');
-    }
-  } catch (error) {
-    logger.error('Database Integration Test Failed:', { error });
-  }
-
-  logger.info('Story generation test suite completed');
-}
-
-// Run tests
-testStoryGeneration()
-  .then(() => {
-    logger.info('All tests completed');
-    process.exit(0);
-  })
-  .catch((error) => {
-    logger.error('Test suite failed:', error);
-    process.exit(1);
-  });
diff --git a/src/services/api.ts b/src/services/api.ts
new file mode 100644
index 00000000..aa52d6ef
--- /dev/null
+++ b/src/services/api.ts
@@ -0,0 +1,156 @@
+'use client';
+
+import axios, { AxiosError, AxiosResponse } from 'axios';
+import { Story, StoryInput, StoryTheme } from '@/types/story';
+import { logger } from '@/utils/logger';
+import { useClientAuth } from './clientAuth';
+import { useMemo } from 'react';
+
+// Simplified error handling
+export class ApiError extends Error {
+  constructor(
+    public message: string,
+    public code?: number,
+    public details?: Record<string, any>
+  ) {
+    super(message);
+    this.name = 'ApiError';
+  }
+}
+
+const handleApiError = (error: AxiosError): never => {
+  if (error.response) {
+    // Type assertion to handle potential undefined message property
+    const responseData = error.response.data as { message?: string } | undefined;
+    const errorMessage = responseData?.message || error.response.statusText || 'An error occurred';
+    const errorDetails = error.response.data || {};
+
+    // Special handling for common error codes
+    if (error.response.status === 405) {
+      logger.error('Method Not Allowed Error:', {
+        status: error.response.status,
+        method: error.config?.method,
+        url: error.config?.url,
+        message: errorMessage,
+      });
+      throw new ApiError(
+        'The request method is not allowed. This may be an authentication issue.',
+        405,
+        errorDetails
+      );
+    }
+
+    if (error.response.status === 401) {
+      logger.error('Authentication Error:', {
+        status: error.response.status,
+        message: errorMessage,
+      });
+
+      // DISABLED: Don't redirect to sign-in page for now
+      // We're allowing unauthenticated story generation
+      /*
+      if (typeof window !== 'undefined') {
+        window.location.href = `/sign-in?redirect_url=${encodeURIComponent(window.location.href)}`;
+        // Never reached, but TypeScript needs this
+        throw new ApiError('Authentication required', 401);
+      }
+      */
+
+      // Just throw the error without redirecting
+      throw new ApiError(errorMessage || 'Authentication required', 401, errorDetails);
+    }
+
+    logger.error('API Error:', {
+      status: error.response.status,
+      message: errorMessage,
+      details: errorDetails,
+    });
+    throw new ApiError(errorMessage, error.response.status, errorDetails);
+  }
+  logger.error('Network Error:', { message: error.message });
+  throw new ApiError(error.message || 'Network error occurred');
+};
+
+export const useStoryApi = () => {
+  const { getToken } = useClientAuth();
+
+  const api = useMemo(() => {
+    const instance = axios.create({
+      baseURL: '/api',
+      headers: {
+        'Content-Type': 'application/json',
+      },
+      timeout: 30000,
+    });
+
+    // Update auth interceptor
+    instance.interceptors.request.use(async (config) => {
+      try {
+        const token = await getToken();
+        if (token) {
+          config.headers.Authorization = `Bearer ${token}`;
+        }
+      } catch (error: unknown) {
+        logger.error('Error getting auth token:', { error: error as Record<string, unknown> });
+      }
+      return config;
+    });
+
+    return instance;
+  }, [getToken]);
+
+  return {
+    async generateStory(input: StoryInput): Promise<Story> {
+      // Input validation
+      if (!input.childName || input.childName.trim() === '') {
+        throw new ApiError('Child name is required', 400, { field: 'childName' });
+      }
+
+      if (!input.mostLikedCharacterTypes || input.mostLikedCharacterTypes.length === 0) {
+        throw new ApiError('At least one character type is required', 400, {
+          field: 'mostLikedCharacterTypes',
+        });
+      }
+
+      if (!input.theme) {
+        throw new ApiError('Story theme is required', 400, { field: 'theme' });
+      }
+
+      if (!input.gender) {
+        throw new ApiError('Child gender is required', 400, { field: 'gender' });
+      }
+
+      try {
+        // Use the new public endpoint that doesn't require authentication
+        const response: AxiosResponse<Story> = await axios.post(
+          '/api/public/generate-story',
+          input,
+          {
+            headers: {
+              'Content-Type': 'application/json',
+            },
+            timeout: 30000,
+          }
+        );
+        return response.data;
+      } catch (error: unknown) {
+        if (axios.isAxiosError(error)) {
+          return handleApiError(error);
+        }
+        throw new ApiError('Unexpected error generating story', 500);
+      }
+    },
+
+    async getStoryThemes(): Promise<StoryTheme[]> {
+      try {
+        const response: AxiosResponse<StoryTheme[]> = await api.get('/story/themes');
+        return response.data;
+      } catch (error: unknown) {
+        if (axios.isAxiosError(error)) {
+          return handleApiError(error);
+        }
+        throw new ApiError('Failed to fetch story themes', 500);
+      }
+    },
+  };
+};
diff --git a/src/services/authService.ts b/src/services/authService.ts
new file mode 100644
index 00000000..37b817df
--- /dev/null
+++ b/src/services/authService.ts
@@ -0,0 +1,32 @@
+import { currentUser as getClerkUser } from '@clerk/nextjs/server';
+import { getAuth } from '@clerk/nextjs/server';
+import type { NextRequest } from 'next/server';
+
+export class ServerAuthService {
+  static async getCurrentUser() {
+    const user = await getClerkUser();
+    if (!user) return null;
+
+    return {
+      id: user.id,
+      email: user.emailAddresses[0]?.emailAddress,
+      name: user.firstName ? `${user.firstName} ${user.lastName}` : undefined,
+      image: user.imageUrl,
+    };
+  }
+
+  static async getToken(request?: NextRequest) {
+    if (!request) {
+      return null;
+    }
+    const auth = getAuth(request);
+    return auth.getToken();
+  }
+
+  static async getUserId() {
+    const user = await getClerkUser();
+    return user?.id;
+  }
+}
+
+export default ServerAuthService;
diff --git a/src/services/cache.ts b/src/services/cache.ts
new file mode 100644
index 00000000..4a3023a2
--- /dev/null
+++ b/src/services/cache.ts
@@ -0,0 +1,78 @@
+import { kv } from '@vercel/kv';
+import { logger } from '@/utils/logger';
+import { env } from '@/lib/env';
+import { CACHE_KEYS } from '@/constants';
+
+/**
+ * Check if caching is available
+ */
+export function isCachingEnabled(): boolean {
+  return env.ENABLE_CACHING && !!env.KV_REST_API_URL && !!env.KV_REST_API_TOKEN;
+}
+
+/**
+ * Generate a cache key from components
+ */
+export function generateCacheKey(prefix: string, ...parts: string[]): string {
+  return `${prefix}${parts.filter(Boolean).join(':')}`;
+}
+
+/**
+ * Get a value from cache
+ */
+export async function getFromCache<T>(key: string): Promise<T | null> {
+  if (!isCachingEnabled()) return null;
+
+  try {
+    const cachedValue = await kv.get<T>(key);
+    if (cachedValue) {
+      logger.info('Cache hit for:', { key });
+      return cachedValue;
+    }
+  } catch (error) {
+    logger.warn('Cache read error:', { error, key });
+  }
+
+  return null;
+}
+
+/**
+ * Store a value in cache
+ */
+export async function setInCache<T>(key: string, value: T, ttlSeconds?: number): Promise<void> {
+  if (!isCachingEnabled()) return;
+
+  try {
+    await kv.set(key, value, { ex: ttlSeconds || env.STORY_CACHE_TTL_SECONDS });
+    logger.debug('Cached value for:', { key });
+  } catch (error) {
+    logger.warn('Cache write error:', { error, key });
+  }
+}
+
+/**
+ * Delete a value from cache
+ */
+export async function deleteFromCache(key: string): Promise<void> {
+  if (!isCachingEnabled()) return;
+
+  try {
+    await kv.del(key);
+    logger.debug('Deleted from cache:', { key });
+  } catch (error) {
+    logger.warn('Cache delete error:', { error, key });
+  }
+}
+
+/**
+ * Generate a story cache key
+ */
+export function generateStoryCacheKey(
+  childName: string,
+  theme: string,
+  gender: string,
+  interests: string[]
+): string {
+  const sortedInterests = interests ? [...interests].sort().join(',') : '';
+  return generateCacheKey(CACHE_KEYS.STORY_PREFIX, childName, theme, gender, sortedInterests);
+}
diff --git a/src/services/clientAuth.ts b/src/services/clientAuth.ts
new file mode 100644
index 00000000..cb38d854
--- /dev/null
+++ b/src/services/clientAuth.ts
@@ -0,0 +1,23 @@
+'use client';
+
+import { useAuth, useUser } from '@clerk/nextjs';
+
+export const useClientAuth = () => {
+  const { user } = useUser();
+  const { getToken, userId } = useAuth();
+
+  const currentUser = user
+    ? {
+        id: user.id,
+        email: user.emailAddresses[0]?.emailAddress,
+        name: user.firstName ? `${user.firstName} ${user.lastName}` : undefined,
+        image: user.imageUrl,
+      }
+    : null;
+
+  return {
+    currentUser,
+    getToken,
+    userId,
+  };
+};
diff --git a/src/services/openai.ts b/src/services/openai.ts
new file mode 100644
index 00000000..f1eae824
--- /dev/null
+++ b/src/services/openai.ts
@@ -0,0 +1,84 @@
+import { env } from '@/lib/env';
+import { logger } from '@/utils/logger';
+import { OPENAI_MODELS } from '@/constants';
+
+/**
+ * Interface for OpenAI API error
+ */
+export interface OpenAIError {
+  status?: number;
+  message: string;
+  headers?: Record<string, string>;
+  code?: string;
+}
+
+/**
+ * Type guard to check if an error is an API quota error
+ */
+export const isQuotaError = (error: unknown): error is OpenAIError => {
+  if (typeof error !== 'object' || error == null) return false;
+
+  const apiError = error as OpenAIError;
+  return (
+    apiError.status === 429 ||
+    (typeof apiError.message === 'string' &&
+      (apiError.message.includes('quota') || apiError.message.includes('billing')))
+  );
+};
+
+/**
+ * Generate a story using OpenAI via server-side API
+ */
+export async function generateStory(
+  childName: string,
+  gender: string,
+  theme: string,
+  interests: string[]
+): Promise<string> {
+  try {
+    const response = await fetch('/api/openai', {
+      method: 'POST',
+      headers: {
+        'Content-Type': 'application/json',
+      },
+      body: JSON.stringify({
+        operation: 'generateStory',
+        params: {
+          childName,
+          gender,
+          theme,
+          interests,
+          readingLevel: 'intermediate',
+          ageGroup: '6-8',
+        },
+      }),
+    });
+
+    if (!response.ok) {
+      const errorData = await response.json();
+      throw new Error(errorData.error || 'Failed to generate story');
+    }
+
+    const data = await response.json();
+    const story = data.content;
+
+    if (!story) {
+      logger.error('No story generated');
+      throw new Error('No story content received from API');
+    }
+
+    return story;
+  } catch (error) {
+    logger.error('Error generating story:', { error });
+    throw error;
+  }
+}
+
+/**
+ * Check if OpenAI API is available
+ */
+export function isOpenAIAvailable(): boolean {
+  // We're now using the server-side API, so we can't directly check if the API key is available
+  // Instead, we'll make a lightweight call to check if the API is responsive
+  return true; // Assume it's available and handle errors when they occur
+}
diff --git a/src/services/personalizationEngine.js b/src/services/personalizationEngine.js
new file mode 100644
index 00000000..a7ee920d
--- /dev/null
+++ b/src/services/personalizationEngine.js
@@ -0,0 +1,1380 @@
+'use strict';
+var __assign =
+  (this && this.__assign) ||
+  function () {
+    __assign =
+      Object.assign ||
+      function (t) {
+        for (var s, i = 1, n = arguments.length; i < n; i++) {
+          s = arguments[i];
+          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
+        }
+        return t;
+      };
+    return __assign.apply(this, arguments);
+  };
+var __createBinding =
+  (this && this.__createBinding) ||
+  (Object.create
+    ? function (o, m, k, k2) {
+        if (k2 === undefined) k2 = k;
+        var desc = Object.getOwnPropertyDescriptor(m, k);
+        if (!desc || ('get' in desc ? !m.__esModule : desc.writable || desc.configurable)) {
+          desc = {
+            enumerable: true,
+            get: function () {
+              return m[k];
+            },
+          };
+        }
+        Object.defineProperty(o, k2, desc);
+      }
+    : function (o, m, k, k2) {
+        if (k2 === undefined) k2 = k;
+        o[k2] = m[k];
+      });
+var __exportStar =
+  (this && this.__exportStar) ||
+  function (m, exports) {
+    for (var p in m)
+      if (p !== 'default' && !Object.prototype.hasOwnProperty.call(exports, p))
+        __createBinding(exports, m, p);
+  };
+var __awaiter =
+  (this && this.__awaiter) ||
+  function (thisArg, _arguments, P, generator) {
+    function adopt(value) {
+      return value instanceof P
+        ? value
+        : new P(function (resolve) {
+            resolve(value);
+          });
+    }
+    return new (P || (P = Promise))(function (resolve, reject) {
+      function fulfilled(value) {
+        try {
+          step(generator.next(value));
+        } catch (e) {
+          reject(e);
+        }
+      }
+      function rejected(value) {
+        try {
+          step(generator['throw'](value));
+        } catch (e) {
+          reject(e);
+        }
+      }
+      function step(result) {
+        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
+      }
+      step((generator = generator.apply(thisArg, _arguments || [])).next());
+    });
+  };
+var __generator =
+  (this && this.__generator) ||
+  function (thisArg, body) {
+    var _ = {
+        label: 0,
+        sent: function () {
+          if (t[0] & 1) throw t[1];
+          return t[1];
+        },
+        trys: [],
+        ops: [],
+      },
+      f,
+      y,
+      t,
+      g = Object.create((typeof Iterator === 'function' ? Iterator : Object).prototype);
+    return (
+      (g.next = verb(0)),
+      (g['throw'] = verb(1)),
+      (g['return'] = verb(2)),
+      typeof Symbol === 'function' &&
+        (g[Symbol.iterator] = function () {
+          return this;
+        }),
+      g
+    );
+    function verb(n) {
+      return function (v) {
+        return step([n, v]);
+      };
+    }
+    function step(op) {
+      if (f) throw new TypeError('Generator is already executing.');
+      while ((g && ((g = 0), op[0] && (_ = 0)), _))
+        try {
+          if (
+            ((f = 1),
+            y &&
+              (t =
+                op[0] & 2
+                  ? y['return']
+                  : op[0]
+                    ? y['throw'] || ((t = y['return']) && t.call(y), 0)
+                    : y.next) &&
+              !(t = t.call(y, op[1])).done)
+          )
+            return t;
+          if (((y = 0), t)) op = [op[0] & 2, t.value];
+          switch (op[0]) {
+            case 0:
+            case 1:
+              t = op;
+              break;
+            case 4:
+              _.label++;
+              return { value: op[1], done: false };
+            case 5:
+              _.label++;
+              y = op[1];
+              op = [0];
+              continue;
+            case 7:
+              op = _.ops.pop();
+              _.trys.pop();
+              continue;
+            default:
+              if (
+                !((t = _.trys), (t = t.length > 0 && t[t.length - 1])) &&
+                (op[0] === 6 || op[0] === 2)
+              ) {
+                _ = 0;
+                continue;
+              }
+              if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
+                _.label = op[1];
+                break;
+              }
+              if (op[0] === 6 && _.label < t[1]) {
+                _.label = t[1];
+                t = op;
+                break;
+              }
+              if (t && _.label < t[2]) {
+                _.label = t[2];
+                _.ops.push(op);
+                break;
+              }
+              if (t[2]) _.ops.pop();
+              _.trys.pop();
+              continue;
+          }
+          op = body.call(thisArg, _);
+        } catch (e) {
+          op = [6, e];
+          y = 0;
+        } finally {
+          f = t = 0;
+        }
+      if (op[0] & 5) throw op[1];
+      return { value: op[0] ? op[1] : void 0, done: true };
+    }
+  };
+var __spreadArray =
+  (this && this.__spreadArray) ||
+  function (to, from, pack) {
+    if (pack || arguments.length === 2)
+      for (var i = 0, l = from.length, ar; i < l; i++) {
+        if (ar || !(i in from)) {
+          if (!ar) ar = Array.prototype.slice.call(from, 0, i);
+          ar[i] = from[i];
+        }
+      }
+    return to.concat(ar || Array.prototype.slice.call(from));
+  };
+Object.defineProperty(exports, '__esModule', { value: true });
+exports.DEFAULT_PREFERENCES =
+  exports.userPersonalizationEngine =
+  exports.UserPersonalizationEngine =
+  exports.CHARACTER_ARCHETYPES =
+  exports.CHARACTER_TRAITS =
+  exports.THEME_ELEMENTS =
+  exports.THEME_DESCRIPTIONS =
+    void 0;
+var logger_1 = require('../utils/logger');
+var uuid_1 = require('uuid');
+var kv_1 = require('@vercel/kv');
+console.log('KV_REST_API_URL:', process.env.KV_REST_API_URL);
+console.log('KV_REST_API_TOKEN:', process.env.KV_REST_API_TOKEN);
+var fallback_generator_1 = require('../utils/fallback-generator');
+var error_handlers_1 = require('../utils/error-handlers');
+var DEFAULT_PREFERENCES = {
+  userId: null,
+  preferredThemes: ['adventure', 'educational'],
+  generatedStoryCount: 0,
+  learningInterests: [],
+  ageGroup: '6-8',
+  theme: 'light',
+  language: 'en',
+  notifications: {
+    email: true,
+    push: false,
+    frequency: 'weekly',
+  },
+  createdAt: new Date(),
+  updatedAt: new Date(),
+};
+exports.DEFAULT_PREFERENCES = DEFAULT_PREFERENCES;
+// Define theme descriptions for more detailed story generation
+exports.THEME_DESCRIPTIONS = {
+  adventure: 'exciting journeys, exploration, and discovering new places',
+  fantasy: 'magical worlds, enchanted creatures, and extraordinary powers',
+  science: 'scientific discoveries, experiments, and understanding how things work',
+  nature: 'the natural world, animals, plants, and environmental awareness',
+  friendship: 'building relationships, working together, and supporting others',
+  educational: 'learning new facts, developing skills, and gaining knowledge',
+  courage: 'bravery in the face of challenges, overcoming fears, and standing up for what is right',
+  kindness: 'compassion, helping others, and making a positive difference',
+  curiosity: 'asking questions, seeking answers, and exploring the unknown',
+  creativity: 'imagination, artistic expression, and innovative thinking',
+};
+// Define theme-specific story elements
+exports.THEME_ELEMENTS = {
+  adventure: {
+    settings: ['mysterious island', 'ancient ruins', 'dense jungle', 'mountain peak'],
+    characters: ['brave explorer', 'treasure hunter', 'wilderness guide', 'ship captain'],
+    challenges: ['crossing a dangerous river', 'finding a hidden map', 'escaping a storm'],
+  },
+  fantasy: {
+    settings: ['enchanted forest', 'magical kingdom', 'cloud castle', 'underwater city'],
+    characters: ['wizard', 'fairy', 'dragon', 'talking animal', 'magical creature'],
+    challenges: ['breaking a spell', 'finding a magical artifact', 'solving a magical riddle'],
+  },
+  science: {
+    settings: [
+      'laboratory',
+      'space station',
+      'underwater research facility',
+      "inventor's workshop",
+    ],
+    characters: ['scientist', 'robot', 'astronaut', 'inventor', 'time traveler'],
+    challenges: ['completing an experiment', 'making a discovery', 'building a machine'],
+  },
+  nature: {
+    settings: ['forest', 'ocean', 'mountain', 'desert', 'rainforest'],
+    characters: ['wildlife ranger', 'talking animal', 'tree spirit', 'nature guardian'],
+    challenges: ['protecting endangered animals', 'planting trees', 'cleaning up pollution'],
+  },
+  friendship: {
+    settings: ['school', 'neighborhood', 'treehouse', 'playground', 'summer camp'],
+    characters: ['new friend', 'best friend', 'neighbor', 'classmate', 'teammate'],
+    challenges: ['making a new friend', 'resolving a misunderstanding', 'working together'],
+  },
+  educational: {
+    settings: ['museum', 'library', 'historical site', 'classroom', 'learning center'],
+    characters: ['teacher', 'librarian', 'historical figure', 'talking book', 'wise elder'],
+    challenges: ['solving a puzzle', 'finding information', 'learning a new skill'],
+  },
+  courage: {
+    settings: ['dark cave', 'stormy sea', 'tall mountain', 'unfamiliar city'],
+    characters: ['hero', 'brave animal', 'guardian', 'mentor', 'someone in need'],
+    challenges: ['facing a fear', 'standing up to a bully', 'trying something new'],
+  },
+  kindness: {
+    settings: ['community center', 'animal shelter', 'hospital', 'elderly home', 'neighborhood'],
+    characters: ['someone in need', 'grateful recipient', 'community helper', 'kind stranger'],
+    challenges: ['helping someone in need', 'sharing limited resources', 'showing compassion'],
+  },
+  curiosity: {
+    settings: ['mysterious door', 'strange garden', 'abandoned house', 'hidden passage'],
+    characters: ['detective', 'explorer', 'scientist', 'archaeologist', 'curious animal'],
+    challenges: ['solving a mystery', 'discovering a secret', 'finding answers to questions'],
+  },
+  creativity: {
+    settings: ['art studio', 'music room', 'theater stage', 'imagination land', 'blank canvas'],
+    characters: ['artist', 'musician', 'storyteller', 'inventor', 'dreamer'],
+    challenges: [
+      'creating something new',
+      'expressing feelings through art',
+      'imagining solutions',
+    ],
+  },
+};
+// Define character traits for more detailed character customization
+exports.CHARACTER_TRAITS = {
+  personality: [
+    'brave',
+    'curious',
+    'kind',
+    'clever',
+    'creative',
+    'funny',
+    'adventurous',
+    'thoughtful',
+    'determined',
+    'gentle',
+    'energetic',
+    'patient',
+    'helpful',
+  ],
+  appearance: [
+    'curly hair',
+    'straight hair',
+    'glasses',
+    'bright eyes',
+    'freckles',
+    'tall',
+    'small',
+    'athletic',
+    'colorful clothes',
+    'favorite hat',
+  ],
+  skills: [
+    'good at sports',
+    'loves to read',
+    'great at puzzles',
+    'artistic',
+    'musical',
+    'good with animals',
+    'great storyteller',
+    'fast runner',
+    'good listener',
+  ],
+};
+// Define character archetypes for supporting characters
+exports.CHARACTER_ARCHETYPES = [
+  'wise mentor',
+  'loyal friend',
+  'mischievous sidekick',
+  'protective guardian',
+  'curious explorer',
+  'skilled teacher',
+  'mysterious stranger',
+  'playful companion',
+  'brave hero',
+  'clever inventor',
+  'kind healer',
+  'magical guide',
+];
+var UserPersonalizationEngine = /** @class */ (function () {
+  function UserPersonalizationEngine(userId) {
+    this.userId = undefined;
+    this.isServerSide = typeof window === 'undefined';
+    this.userId = userId;
+    logger_1.logger.info('UserPersonalizationEngine initialized', { userId: userId });
+  }
+  UserPersonalizationEngine.prototype.isValidPreferences = function (preferences) {
+    if (!preferences || typeof preferences !== 'object') return false;
+    var p = preferences;
+    return (
+      Array.isArray(p.preferredThemes) &&
+      typeof p.generatedStoryCount === 'number' &&
+      Array.isArray(p.learningInterests) &&
+      typeof p.theme === 'string' &&
+      typeof p.language === 'string'
+    );
+  };
+  UserPersonalizationEngine.prototype.setUserId = function (userId) {
+    this.userId = userId;
+  };
+  UserPersonalizationEngine.prototype.getUserId = function () {
+    return this.userId;
+  };
+  UserPersonalizationEngine.prototype.getUserPreferences = function () {
+    return __awaiter(this, void 0, void 0, function () {
+      var kvKey, storedPreferences, kvError_1, storedPreferences, parsed, error_1;
+      return __generator(this, function (_a) {
+        switch (_a.label) {
+          case 0:
+            if (!this.userId) return [2 /*return*/, DEFAULT_PREFERENCES];
+            _a.label = 1;
+          case 1:
+            _a.trys.push([1, 6, , 7]);
+            if (!(this.isServerSide && this.userId !== 'default-user')) return [3 /*break*/, 5];
+            _a.label = 2;
+          case 2:
+            _a.trys.push([2, 4, , 5]);
+            kvKey = 'user:preferences:'.concat(this.userId);
+            return [4 /*yield*/, kv_1.kv.get(kvKey)];
+          case 3:
+            storedPreferences = _a.sent();
+            if (storedPreferences && typeof storedPreferences === 'object') {
+              logger_1.logger.info('Retrieved user preferences from KV store', {
+                userId: this.userId,
+              });
+              return [2 /*return*/, __assign(__assign({}, DEFAULT_PREFERENCES), storedPreferences)];
+            }
+            return [3 /*break*/, 5];
+          case 4:
+            kvError_1 = _a.sent();
+            logger_1.logger.error('Error fetching user preferences from KV:', { error: kvError_1 });
+            return [3 /*break*/, 5];
+          case 5:
+            // Client-side storage fallback
+            if (typeof window !== 'undefined') {
+              storedPreferences = localStorage.getItem('preferences:'.concat(this.userId));
+              if (storedPreferences) {
+                parsed = JSON.parse(storedPreferences);
+                if (!this.isValidPreferences(parsed)) {
+                  logger_1.logger.error('Invalid preferences format in localStorage');
+                  return [2 /*return*/, DEFAULT_PREFERENCES];
+                }
+                return [2 /*return*/, __assign(__assign({}, DEFAULT_PREFERENCES), parsed)];
+              }
+            }
+            return [2 /*return*/, DEFAULT_PREFERENCES];
+          case 6:
+            error_1 = _a.sent();
+            logger_1.logger.error('Error fetching user preferences:', { error: error_1 });
+            return [2 /*return*/, DEFAULT_PREFERENCES];
+          case 7:
+            return [2 /*return*/];
+        }
+      });
+    });
+  };
+  UserPersonalizationEngine.prototype.updateUserPreferences = function (newPreferences) {
+    return __awaiter(this, void 0, void 0, function () {
+      var currentPreferences, updatedPreferences, kvKey, kvError_2, error_2;
+      return __generator(this, function (_a) {
+        switch (_a.label) {
+          case 0:
+            if (!this.userId) return [2 /*return*/, false];
+            _a.label = 1;
+          case 1:
+            _a.trys.push([1, 7, , 8]);
+            return [4 /*yield*/, this.getUserPreferences()];
+          case 2:
+            currentPreferences = _a.sent();
+            updatedPreferences = __assign(
+              __assign(__assign({}, currentPreferences), newPreferences),
+              { updatedAt: new Date() }
+            );
+            if (!(this.isServerSide && this.userId !== 'default-user')) return [3 /*break*/, 6];
+            _a.label = 3;
+          case 3:
+            _a.trys.push([3, 5, , 6]);
+            kvKey = 'user:preferences:'.concat(this.userId);
+            return [4 /*yield*/, kv_1.kv.set(kvKey, updatedPreferences)];
+          case 4:
+            _a.sent();
+            logger_1.logger.info('Updated user preferences in KV store', { userId: this.userId });
+            return [2 /*return*/, true];
+          case 5:
+            kvError_2 = _a.sent();
+            logger_1.logger.error('Error updating user preferences in KV:', { error: kvError_2 });
+            return [3 /*break*/, 6];
+          case 6:
+            // Client-side storage fallback
+            if (typeof window !== 'undefined') {
+              localStorage.setItem(
+                'preferences:'.concat(this.userId),
+                JSON.stringify(updatedPreferences)
+              );
+              return [2 /*return*/, true];
+            }
+            return [2 /*return*/, false];
+          case 7:
+            error_2 = _a.sent();
+            logger_1.logger.error('Error updating user preferences:', { error: error_2 });
+            return [2 /*return*/, false];
+          case 8:
+            return [2 /*return*/];
+        }
+      });
+    });
+  };
+  UserPersonalizationEngine.prototype.incrementStoryCount = function () {
+    return __awaiter(this, void 0, void 0, function () {
+      var userData, currentStoryCount, newStoryCount, error_3;
+      return __generator(this, function (_a) {
+        switch (_a.label) {
+          case 0:
+            if (!this.userId || this.userId === 'default-user') return [2 /*return*/, false];
+            _a.label = 1;
+          case 1:
+            _a.trys.push([1, 4, , 5]);
+            return [4 /*yield*/, kv_1.kv.hgetall('user:'.concat(this.userId))];
+          case 2:
+            userData = _a.sent();
+            if (!userData) {
+              logger_1.logger.warn('No user data found when incrementing story count', {
+                userId: this.userId,
+              });
+              return [2 /*return*/, false];
+            }
+            currentStoryCount = parseInt(userData.storiesGenerated || '0', 10);
+            newStoryCount = currentStoryCount + 1;
+            // Update story count in database
+            return [
+              4 /*yield*/,
+              kv_1.kv.hset('user:'.concat(this.userId), {
+                storiesGenerated: newStoryCount,
+                lastStoryGeneratedAt: new Date().toISOString(),
+              }),
+            ];
+          case 3:
+            // Update story count in database
+            _a.sent();
+            logger_1.logger.info('Successfully incremented story count', {
+              userId: this.userId,
+              previousCount: currentStoryCount,
+              newCount: newStoryCount,
+            });
+            return [2 /*return*/, true];
+          case 4:
+            error_3 = _a.sent();
+            logger_1.logger.error(
+              'Error incrementing story count',
+              (0, error_handlers_1.serializeError)(error_3)
+            );
+            return [2 /*return*/, false];
+          case 5:
+            return [2 /*return*/];
+        }
+      });
+    });
+  };
+  /**
+   * Generate a unique ID for a story
+   *
+   * This method generates a unique identifier for each story using UUID v4.
+   * It's marked as deprecated since uuidv4() should be used directly instead.
+   *
+   * @returns Unique ID string
+   * @deprecated Use uuidv4() directly instead
+   */
+  UserPersonalizationEngine.prototype.generateUniqueId = function () {
+    return (0, uuid_1.v4)();
+  };
+  /**
+   * Generate a cache key for a story
+   *
+   * This method creates a deterministic cache key based on the story input parameters.
+   * The key format is: story:{childName}:{sortedInterests}:{theme}:{gender}
+   *
+   * @param input Story generation input parameters
+   * @returns Cache key string
+   */
+  UserPersonalizationEngine.prototype.generateCacheKey = function (input) {
+    var childName = input.childName,
+      _a = input.interests,
+      interests = _a === void 0 ? [] : _a,
+      theme = input.theme,
+      gender = input.gender;
+    // Sort interests for consistent cache keys regardless of order
+    var sortedInterests = __spreadArray([], interests, true).sort().join(',');
+    // Create a deterministic cache key
+    return 'story:'
+      .concat(childName, ':')
+      .concat(sortedInterests, ':')
+      .concat(theme, ':')
+      .concat(gender);
+  };
+  /**
+   * Generate a story using the Gemini API
+   *
+   * This method generates a story using the Gemini API, with caching and fallback mechanisms.
+   * It includes comprehensive error handling, circuit breaking, and detailed logging.
+   *
+   * @param input Story generation input parameters
+   * @returns Generated story content
+   */
+  UserPersonalizationEngine.prototype.generateStory = function (input) {
+    return __awaiter(this, void 0, void 0, function () {
+      var cacheKey, cachedStory, cacheError_1, apiCallFunction, fallbackFunction, error_4;
+      var _this = this;
+      var _a;
+      return __generator(this, function (_b) {
+        switch (_b.label) {
+          case 0:
+            logger_1.logger.info('Starting story generation', {
+              childName: input.childName,
+              theme: input.theme,
+              gender: input.gender,
+              interestsCount:
+                ((_a = input.interests) === null || _a === void 0 ? void 0 : _a.length) || 0,
+            });
+            cacheKey = this.generateCacheKey(input);
+            _b.label = 1;
+          case 1:
+            _b.trys.push([1, 3, , 4]);
+            return [4 /*yield*/, kv_1.kv.get(cacheKey)];
+          case 2:
+            cachedStory = _b.sent();
+            if (cachedStory) {
+              logger_1.logger.info('Using cached story', {
+                cacheKey: cacheKey,
+                userId: this.userId,
+                contentLength: cachedStory.length,
+              });
+              return [2 /*return*/, cachedStory];
+            }
+            logger_1.logger.info('No cached story found, generating new story', {
+              cacheKey: cacheKey,
+              userId: this.userId,
+            });
+            return [3 /*break*/, 4];
+          case 3:
+            cacheError_1 = _b.sent();
+            logger_1.logger.warn(
+              'Error checking story cache',
+              (0, error_handlers_1.serializeError)(cacheError_1)
+            );
+            return [3 /*break*/, 4];
+          case 4:
+            apiCallFunction = function () {
+              return __awaiter(_this, void 0, void 0, function () {
+                var storyContent, cacheTTL, cacheError_2, error_5;
+                return __generator(this, function (_a) {
+                  switch (_a.label) {
+                    case 0:
+                      _a.trys.push([0, 7, , 8]);
+                      return [4 /*yield*/, this.callGeminiEndpoint(input)];
+                    case 1:
+                      storyContent = _a.sent();
+                      _a.label = 2;
+                    case 2:
+                      _a.trys.push([2, 4, , 5]);
+                      cacheTTL = 60 * 60 * 24;
+                      return [4 /*yield*/, kv_1.kv.set(cacheKey, storyContent, { ex: cacheTTL })];
+                    case 3:
+                      _a.sent();
+                      logger_1.logger.info('Successfully cached story', {
+                        cacheKey: cacheKey,
+                        userId: this.userId,
+                        contentLength: storyContent.length,
+                        cacheTTL: cacheTTL,
+                      });
+                      return [3 /*break*/, 5];
+                    case 4:
+                      cacheError_2 = _a.sent();
+                      logger_1.logger.warn(
+                        'Error caching story',
+                        (0, error_handlers_1.serializeError)(cacheError_2)
+                      );
+                      return [3 /*break*/, 5];
+                    case 5:
+                      // Increment the user's story count
+                      return [4 /*yield*/, this.incrementStoryCount()];
+                    case 6:
+                      // Increment the user's story count
+                      _a.sent();
+                      return [2 /*return*/, storyContent];
+                    case 7:
+                      error_5 = _a.sent();
+                      logger_1.logger.error(
+                        'Error generating story with Gemini API',
+                        (0, error_handlers_1.serializeError)(error_5)
+                      );
+                      throw error_5;
+                    case 8:
+                      return [2 /*return*/];
+                  }
+                });
+              });
+            };
+            fallbackFunction = function () {
+              logger_1.logger.warn('Using fallback story generation due to API failure', {
+                circuitState: error_handlers_1.geminiCircuitBreaker.status.stats,
+                metrics: error_handlers_1.geminiCircuitBreaker.stats,
+              });
+              return (0, fallback_generator_1.generateFallbackStory)(input);
+            };
+            _b.label = 5;
+          case 5:
+            _b.trys.push([5, 7, , 8]);
+            return [4 /*yield*/, error_handlers_1.geminiCircuitBreaker.fire(apiCallFunction)];
+          case 6:
+            // Use the circuit breaker to make the API call
+            return [2 /*return*/, _b.sent()];
+          case 7:
+            error_4 = _b.sent();
+            // This catch block handles any errors that might occur in the circuit breaker itself
+            logger_1.logger.error(
+              'Circuit breaker caught error',
+              (0, error_handlers_1.serializeError)(error_4)
+            );
+            return [2 /*return*/, fallbackFunction()];
+          case 8:
+            return [2 /*return*/];
+        }
+      });
+    });
+  };
+  /**
+   * Generate personalized story using Gemini API endpoint
+   *
+   * This method generates a story using the Gemini API, with caching and fallback mechanisms.
+   * It includes comprehensive error handling, circuit breaking, and detailed logging.
+   *
+   * @param input Story generation input parameters
+   * @returns Generated story content
+   */
+  UserPersonalizationEngine.prototype.generatePersonalizedStory = function (input, userPrefs) {
+    console.log('generatePersonalizedStory called');
+    console.log('KV_REST_API_URL:', process.env.KV_REST_API_URL);
+    console.log('KV_REST_API_TOKEN:', process.env.KV_REST_API_TOKEN);
+    return __awaiter(this, void 0, void 0, function () {
+      var storyId,
+        pronouns,
+        _a,
+        pronoun,
+        possessivePronoun,
+        cacheKey,
+        cachedStory,
+        titleMatch,
+        title,
+        content,
+        apiCallFunction,
+        fallbackFunction,
+        error_6,
+        error_7,
+        fallbackContent;
+      var _this = this;
+      return __generator(this, function (_b) {
+        switch (_b.label) {
+          case 0:
+            logger_1.logger.info('Starting personalized story generation', {
+              input: input,
+              userPrefs: userPrefs
+                ? __assign(__assign({}, userPrefs), {
+                    userId: userPrefs.userId ? 'REDACTED' : null,
+                  })
+                : undefined,
+            });
+            storyId = this.generateUniqueId();
+            pronouns =
+              input.gender === 'female' || input.gender === 'girl'
+                ? 'she/her'
+                : input.gender === 'boy' || input.gender === 'male'
+                  ? 'he/him'
+                  : 'they/them';
+            (_a = pronouns.split('/')), (pronoun = _a[0]), (possessivePronoun = _a[1]);
+            cacheKey = this.generateCacheKey(input);
+            _b.label = 1;
+          case 1:
+            _b.trys.push([1, 7, , 8]);
+            return [4 /*yield*/, kv_1.kv.get(cacheKey)];
+          case 2:
+            cachedStory = _b.sent();
+            if (cachedStory) {
+              logger_1.logger.info('Using cached story', {
+                cacheKey: cacheKey,
+                userId: this.userId,
+                contentLength: cachedStory.length,
+              });
+              titleMatch = cachedStory.match(/^#\s*(.+?)(?:\n|$)/m);
+              title = titleMatch ? titleMatch[1].trim() : 'Untitled Story';
+              content = cachedStory.replace(/^#\s*(.+?)(?:\n|$)/m, '').trim();
+              return [
+                2 /*return*/,
+                {
+                  id: storyId,
+                  title: title,
+                  content: content,
+                  theme: input.theme,
+                  createdAt: new Date().toISOString(),
+                  input: input,
+                  metadata: {
+                    pronouns: pronoun,
+                    possessivePronouns: possessivePronoun,
+                    generatedAt: new Date().toISOString(),
+                    wordCount: content.split(/\s+/).length,
+                    readingTime: Math.ceil(content.split(/\s+/).length / 200), // Approx. 200 words per minute
+                  },
+                  userId: this.userId,
+                  pronouns: pronoun,
+                  possessivePronouns: possessivePronoun,
+                  generatedAt: new Date().toISOString(),
+                },
+              ];
+            }
+            // No cached story found, generate a new one
+            logger_1.logger.info('No cached story found, generating new story', {
+              cacheKey: cacheKey,
+              userId: this.userId,
+            });
+            apiCallFunction = function () {
+              return __awaiter(_this, void 0, void 0, function () {
+                var themeDescription,
+                  themeElements,
+                  prefs,
+                  _a,
+                  prompt_1,
+                  response,
+                  errorData,
+                  data,
+                  storyContent,
+                  titleMatch,
+                  title,
+                  content,
+                  cacheTTL,
+                  error_8;
+                var _b, _c, _d, _e;
+                return __generator(this, function (_f) {
+                  switch (_f.label) {
+                    case 0:
+                      _f.trys.push([0, 9, , 10]);
+                      themeDescription = exports.THEME_DESCRIPTIONS[input.theme] || input.theme;
+                      themeElements = exports.THEME_ELEMENTS[input.theme];
+                      _a = userPrefs;
+                      if (_a) return [3 /*break*/, 2];
+                      return [4 /*yield*/, this.getUserPreferences()];
+                    case 1:
+                      _a = _f.sent();
+                      _f.label = 2;
+                    case 2:
+                      prefs = _a;
+                      prompt_1 = '\n            Create a bedtime story for a child named '
+                        .concat(input.childName, ' who uses ')
+                        .concat(pronouns, ' pronouns.\n\n            The story should be about ')
+                        .concat(themeDescription, '.\n\n            ')
+                        .concat(
+                          ((_b = input.interests) === null || _b === void 0 ? void 0 : _b.length)
+                            ? 'Include these interests: '.concat(input.interests.join(', '), '.')
+                            : '',
+                          '\n            '
+                        )
+                        .concat(
+                          (
+                            (_c = prefs.learningInterests) === null || _c === void 0
+                              ? void 0
+                              : _c.length
+                          )
+                            ? 'The child is also interested in learning about: '.concat(
+                                prefs.learningInterests.join(', '),
+                                '.'
+                              )
+                            : '',
+                          '\n\n            '
+                        )
+                        .concat(
+                          themeElements
+                            ? '\n            You can use these settings: '
+                                .concat(
+                                  themeElements.settings.join(', '),
+                                  '.\n            You can include these character types: '
+                                )
+                                .concat(
+                                  themeElements.characters.join(', '),
+                                  '.\n            You can incorporate these challenges: '
+                                )
+                                .concat(themeElements.challenges.join(', '), '.\n            ')
+                            : '',
+                          '\n            \n            '
+                        )
+                        .concat(
+                          (
+                            (_d = input.favoriteCharacters) === null || _d === void 0
+                              ? void 0
+                              : _d.length
+                          )
+                            ? 'Try to include references to these favorite characters: '.concat(
+                                input.favoriteCharacters.join(', '),
+                                '.'
+                              )
+                            : '',
+                          '\n            '
+                        )
+                        .concat(
+                          (
+                            (_e = input.mostLikedCharacterTypes) === null || _e === void 0
+                              ? void 0
+                              : _e.length
+                          )
+                            ? 'The child enjoys characters that are: '.concat(
+                                input.mostLikedCharacterTypes.join(', '),
+                                '.'
+                              )
+                            : '',
+                          '\n            \n            Make the story age-appropriate for a '
+                        )
+                        .concat(
+                          prefs.ageGroup || '6-8',
+                          ' year old child.\n            The story should be engaging, with a positive message.\n\n            Format the story with a title at the beginning using a single # markdown heading.\n            Keep the story under 500 words.\n          '
+                        );
+                      return [
+                        4 /*yield*/,
+                        fetch('/api/gemini', {
+                          method: 'POST',
+                          headers: {
+                            'Content-Type': 'application/json',
+                          },
+                          body: JSON.stringify({
+                            type: 'story',
+                            childName: input.childName,
+                            gender: input.gender,
+                            theme: input.theme,
+                            interests: input.interests,
+                            prompt: prompt_1,
+                          }),
+                        }),
+                      ];
+                    case 3:
+                      response = _f.sent();
+                      if (!!response.ok) return [3 /*break*/, 5];
+                      return [4 /*yield*/, response.json()];
+                    case 4:
+                      errorData = _f.sent();
+                      throw new Error(
+                        'Gemini API error: '.concat(errorData.error || response.statusText)
+                      );
+                    case 5:
+                      return [4 /*yield*/, response.json()];
+                    case 6:
+                      data = _f.sent();
+                      storyContent = data.content;
+                      titleMatch = storyContent.match(/^#\s*(.+?)(?:\n|$)/m);
+                      title = titleMatch ? titleMatch[1].trim() : 'Untitled Story';
+                      content = storyContent.replace(/^#\s*(.+?)(?:\n|$)/m, '').trim();
+                      cacheTTL = 60 * 60 * 24;
+                      return [4 /*yield*/, kv_1.kv.set(cacheKey, storyContent, { ex: cacheTTL })];
+                    case 7:
+                      _f.sent();
+                      logger_1.logger.info('Successfully generated and cached story', {
+                        userId: this.userId,
+                        title: title,
+                        contentLength: content.length,
+                        cacheTTL: cacheTTL,
+                      });
+                      // Increment the user's story count
+                      return [4 /*yield*/, this.incrementStoryCount()];
+                    case 8:
+                      // Increment the user's story count
+                      _f.sent();
+                      // Create and return the story object
+                      return [
+                        2 /*return*/,
+                        {
+                          id: storyId,
+                          title: title,
+                          content: content,
+                          theme: input.theme,
+                          createdAt: new Date().toISOString(),
+                          input: input,
+                          metadata: {
+                            pronouns: pronoun,
+                            possessivePronouns: possessivePronoun,
+                            generatedAt: new Date().toISOString(),
+                            wordCount: content.split(/\s+/).length,
+                            readingTime: Math.ceil(content.split(/\s+/).length / 200), // Approx. 200 words per minute
+                          },
+                          userId: this.userId,
+                          pronouns: pronoun,
+                          possessivePronouns: possessivePronoun,
+                          generatedAt: new Date().toISOString(),
+                        },
+                      ];
+                    case 9:
+                      error_8 = _f.sent();
+                      logger_1.logger.error(
+                        'Error generating story with Gemini API',
+                        (0, error_handlers_1.serializeError)(error_8)
+                      );
+                      throw error_8;
+                    case 10:
+                      return [2 /*return*/];
+                  }
+                });
+              });
+            };
+            fallbackFunction = function () {
+              logger_1.logger.warn('Using fallback story generation due to API failure', {
+                circuitState: error_handlers_1.geminiCircuitBreaker.status.stats,
+                metrics: error_handlers_1.geminiCircuitBreaker.stats,
+              });
+              var fallbackContent = (0, fallback_generator_1.generateFallbackStory)(input);
+              // Parse the fallback story
+              var titleMatch = fallbackContent.match(/^#\s*(.+?)(?:\n|$)/m);
+              var title = titleMatch
+                ? titleMatch[1].trim()
+                : ''.concat(
+                    input.theme.charAt(0).toUpperCase() + input.theme.slice(1),
+                    ' Adventure'
+                  );
+              var content = titleMatch
+                ? fallbackContent.replace(/^#\s*(.+?)(?:\n|$)/m, '').trim()
+                : fallbackContent;
+              return {
+                id: storyId,
+                title: title,
+                content: content,
+                theme: input.theme,
+                createdAt: new Date().toISOString(),
+                input: input,
+                metadata: {
+                  pronouns: pronoun,
+                  possessivePronouns: possessivePronoun,
+                  generatedAt: new Date().toISOString(),
+                  wordCount: content.split(/\s+/).length,
+                  readingTime: Math.ceil(content.split(/\s+/).length / 200),
+                  fallback: true,
+                },
+                userId: _this.userId,
+                pronouns: pronoun,
+                possessivePronouns: possessivePronoun,
+                generatedAt: new Date().toISOString(),
+              };
+            };
+            _b.label = 3;
+          case 3:
+            _b.trys.push([3, 5, , 6]);
+            return [4 /*yield*/, error_handlers_1.geminiCircuitBreaker.fire(apiCallFunction)];
+          case 4:
+            // Use the Opossum circuit breaker to make the API call
+            return [2 /*return*/, _b.sent()];
+          case 5:
+            error_6 = _b.sent();
+            // This catch block handles any errors that might occur in the circuit breaker itself
+            logger_1.logger.error(
+              'Circuit breaker caught error',
+              (0, error_handlers_1.serializeError)(error_6)
+            );
+            return [2 /*return*/, fallbackFunction()];
+          case 6:
+            return [3 /*break*/, 8];
+          case 7:
+            error_7 = _b.sent();
+            // This catch block handles any errors in the overall story generation process
+            logger_1.logger.error(
+              'Error in generatePersonalizedStory',
+              (0, error_handlers_1.serializeError)(error_7)
+            );
+            fallbackContent = (0, fallback_generator_1.generateFallbackStory)(input);
+            return [
+              2 /*return*/,
+              {
+                id: storyId,
+                title: ''.concat(
+                  input.theme.charAt(0).toUpperCase() + input.theme.slice(1),
+                  ' Adventure'
+                ),
+                content: fallbackContent,
+                theme: input.theme,
+                createdAt: new Date().toISOString(),
+                input: input,
+                metadata: {
+                  pronouns: pronoun,
+                  possessivePronouns: possessivePronoun,
+                  generatedAt: new Date().toISOString(),
+                  wordCount: fallbackContent.split(/\s+/).length,
+                  readingTime: Math.ceil(fallbackContent.split(/\s+/).length / 200),
+                  fallback: true,
+                  error: error_7.message,
+                },
+                userId: this.userId,
+                pronouns: pronoun,
+                possessivePronouns: possessivePronoun,
+                generatedAt: new Date().toISOString(),
+              },
+            ];
+          case 8:
+            return [2 /*return*/];
+        }
+      });
+    });
+  };
+  /**
+   * Call the Gemini API endpoint to generate a story
+   *
+   * This method makes a request to the Gemini API endpoint with the story input parameters.
+   * It includes error handling and detailed logging.
+   *
+   * @param input Story generation input parameters
+   * @returns Generated story content
+   */
+  UserPersonalizationEngine.prototype.callGeminiEndpoint = function (input) {
+    return __awaiter(this, void 0, void 0, function () {
+      var prefs,
+        pronouns,
+        themeDescription,
+        themeElements,
+        prompt_2,
+        response,
+        errorData,
+        data,
+        error_9;
+      var _a, _b, _c, _d, _e;
+      return __generator(this, function (_f) {
+        switch (_f.label) {
+          case 0:
+            _f.trys.push([0, 6, , 7]);
+            logger_1.logger.info('Calling Gemini API endpoint for story generation', {
+              childName: input.childName,
+              theme: input.theme,
+              gender: input.gender,
+              interestsCount:
+                ((_a = input.interests) === null || _a === void 0 ? void 0 : _a.length) || 0,
+            });
+            return [4 /*yield*/, this.getUserPreferences()];
+          case 1:
+            prefs = _f.sent();
+            pronouns =
+              input.gender === 'female' || input.gender === 'girl'
+                ? 'she/her'
+                : input.gender === 'boy' || input.gender === 'male'
+                  ? 'he/him'
+                  : 'they/them';
+            themeDescription = exports.THEME_DESCRIPTIONS[input.theme] || input.theme;
+            themeElements = exports.THEME_ELEMENTS[input.theme];
+            prompt_2 = '\n        Create a bedtime story for a child named '
+              .concat(input.childName, ' who uses ')
+              .concat(pronouns, ' pronouns.\n\n        The story should be about ')
+              .concat(themeDescription, '.\n\n        ')
+              .concat(
+                ((_b = input.interests) === null || _b === void 0 ? void 0 : _b.length)
+                  ? 'Include these interests: '.concat(input.interests.join(', '), '.')
+                  : '',
+                '\n        '
+              )
+              .concat(
+                ((_c = prefs.learningInterests) === null || _c === void 0 ? void 0 : _c.length)
+                  ? 'The child is also interested in learning about: '.concat(
+                      prefs.learningInterests.join(', '),
+                      '.'
+                    )
+                  : '',
+                '\n\n        '
+              )
+              .concat(
+                themeElements
+                  ? '\n        You can use these settings: '
+                      .concat(
+                        themeElements.settings.join(', '),
+                        '.\n        You can include these character types: '
+                      )
+                      .concat(
+                        themeElements.characters.join(', '),
+                        '.\n        You can incorporate these challenges: '
+                      )
+                      .concat(themeElements.challenges.join(', '), '.\n        ')
+                  : '',
+                '\n        \n        '
+              )
+              .concat(
+                ((_d = input.favoriteCharacters) === null || _d === void 0 ? void 0 : _d.length)
+                  ? 'Try to include references to these favorite characters: '.concat(
+                      input.favoriteCharacters.join(', '),
+                      '.'
+                    )
+                  : '',
+                '\n        '
+              )
+              .concat(
+                (
+                  (_e = input.mostLikedCharacterTypes) === null || _e === void 0
+                    ? void 0
+                    : _e.length
+                )
+                  ? 'The child enjoys characters that are: '.concat(
+                      input.mostLikedCharacterTypes.join(', '),
+                      '.'
+                    )
+                  : '',
+                '\n        \n        Make the story age-appropriate for a '
+              )
+              .concat(
+                prefs.ageGroup || '6-8',
+                ' year old child.\n        The story should be engaging, with a positive message.\n\n        Format the story with a title at the beginning using a single # markdown heading.\n        Keep the story under 500 words.\n      '
+              );
+            return [
+              4 /*yield*/,
+              fetch('/api/gemini', {
+                method: 'POST',
+                headers: {
+                  'Content-Type': 'application/json',
+                },
+                body: JSON.stringify({
+                  type: 'story',
+                  childName: input.childName,
+                  gender: input.gender,
+                  theme: input.theme,
+                  interests: input.interests,
+                  prompt: prompt_2,
+                }),
+              }),
+            ];
+          case 2:
+            response = _f.sent();
+            if (!!response.ok) return [3 /*break*/, 4];
+            return [4 /*yield*/, response.json()];
+          case 3:
+            errorData = _f.sent();
+            throw new Error('Gemini API error: '.concat(errorData.error || response.statusText));
+          case 4:
+            return [4 /*yield*/, response.json()];
+          case 5:
+            data = _f.sent();
+            logger_1.logger.info('Successfully received story from Gemini API', {
+              contentLength: data.content.length,
+              model: data.model,
+            });
+            return [2 /*return*/, data.content];
+          case 6:
+            error_9 = _f.sent();
+            logger_1.logger.error(
+              'Error calling Gemini API endpoint',
+              (0, error_handlers_1.serializeError)(error_9)
+            );
+            throw error_9;
+          case 7:
+            return [2 /*return*/];
+        }
+      });
+    });
+  };
+  /**
+   * Store generated story in user history
+   *
+   * This method saves a generated story to the user's history in the database.
+   * It includes error handling and detailed logging.
+   *
+   * @param story Story object to save
+   * @returns Whether the operation was successful
+   */
+  UserPersonalizationEngine.prototype.saveStoryToHistory = function (story) {
+    return __awaiter(this, void 0, void 0, function () {
+      var historyEntry, userData, currentHistory, updatedHistory, error_10;
+      return __generator(this, function (_a) {
+        switch (_a.label) {
+          case 0:
+            if (!this.userId || this.userId === 'default-user') return [2 /*return*/, false];
+            _a.label = 1;
+          case 1:
+            _a.trys.push([1, 4, , 5]);
+            historyEntry = {
+              id: story.id,
+              title: story.title,
+              theme: story.theme,
+              childName: story.input.childName,
+              createdAt: story.createdAt,
+              wordCount: story.metadata.wordCount || 0,
+              fallback: story.metadata.fallback || false,
+            };
+            return [4 /*yield*/, kv_1.kv.hgetall('user:'.concat(this.userId))];
+          case 2:
+            userData = _a.sent();
+            if (!userData) {
+              logger_1.logger.warn('No user data found when saving story to history', {
+                userId: this.userId,
+              });
+              return [2 /*return*/, false];
+            }
+            currentHistory = JSON.parse(userData.storyHistory || '[]');
+            updatedHistory = __spreadArray([historyEntry], currentHistory, true).slice(0, 20);
+            // Update history in database
+            return [
+              4 /*yield*/,
+              kv_1.kv.hset('user:'.concat(this.userId), {
+                storyHistory: JSON.stringify(updatedHistory),
+                lastStoryGeneratedAt: new Date().toISOString(),
+              }),
+            ];
+          case 3:
+            // Update history in database
+            _a.sent();
+            logger_1.logger.info('Successfully saved story to history', {
+              userId: this.userId,
+              storyId: story.id,
+              historyLength: updatedHistory.length,
+            });
+            return [2 /*return*/, true];
+          case 4:
+            error_10 = _a.sent();
+            logger_1.logger.error(
+              'Error saving story to history',
+              (0, error_handlers_1.serializeError)(error_10)
+            );
+            return [2 /*return*/, false];
+          case 5:
+            return [2 /*return*/];
+        }
+      });
+    });
+  };
+  // Get user's story history
+  UserPersonalizationEngine.prototype.getStoryHistory = function () {
+    return __awaiter(this, void 0, void 0, function () {
+      var kvKey, stories, kvError_3, storageKey, storiesJson, error_11;
+      return __generator(this, function (_a) {
+        switch (_a.label) {
+          case 0:
+            if (!this.userId || this.userId === 'default-user') return [2 /*return*/, []];
+            _a.label = 1;
+          case 1:
+            _a.trys.push([1, 6, , 7]);
+            if (!this.isServerSide) return [3 /*break*/, 5];
+            _a.label = 2;
+          case 2:
+            _a.trys.push([2, 4, , 5]);
+            kvKey = 'user:stories:'.concat(this.userId);
+            return [4 /*yield*/, kv_1.kv.get(kvKey)];
+          case 3:
+            stories = _a.sent();
+            return [2 /*return*/, stories || []];
+          case 4:
+            kvError_3 = _a.sent();
+            logger_1.logger.error('Error fetching story history from KV:', { error: kvError_3 });
+            return [3 /*break*/, 5];
+          case 5:
+            // Client-side storage fallback
+            if (typeof window !== 'undefined') {
+              storageKey = 'stories:'.concat(this.userId);
+              storiesJson = localStorage.getItem(storageKey);
+              return [2 /*return*/, storiesJson ? JSON.parse(storiesJson) : []];
+            }
+            return [2 /*return*/, []];
+          case 6:
+            error_11 = _a.sent();
+            logger_1.logger.error('Error fetching story history:', { error: error_11 });
+            return [2 /*return*/, []];
+          case 7:
+            return [2 /*return*/];
+        }
+      });
+    });
+  };
+  // Helper method to generate a random character
+  UserPersonalizationEngine.prototype.generateRandomCharacter = function (type) {
+    if (type === void 0) {
+      type = 'animal';
+    }
+    var personality =
+      exports.CHARACTER_TRAITS.personality[
+        Math.floor(Math.random() * exports.CHARACTER_TRAITS.personality.length)
+      ];
+    var archetype =
+      exports.CHARACTER_ARCHETYPES[Math.floor(Math.random() * exports.CHARACTER_ARCHETYPES.length)];
+    return {
+      name: '', // Empty name to be filled by the user
+      type: type,
+      traits: [personality],
+      role: archetype,
+      description: 'A '.concat(personality, ' ').concat(type, ' who is a ').concat(archetype),
+    };
+  };
+  // Helper method to suggest character traits based on theme
+  UserPersonalizationEngine.prototype.suggestCharacterTraits = function (theme) {
+    var themeBasedTraits = {
+      adventure: ['brave', 'curious', 'adventurous', 'determined'],
+      fantasy: ['imaginative', 'curious', 'creative', 'brave'],
+      science: ['curious', 'clever', 'analytical', 'inventive'],
+      nature: ['gentle', 'observant', 'caring', 'patient'],
+      friendship: ['kind', 'loyal', 'helpful', 'understanding'],
+      educational: ['curious', 'attentive', 'thoughtful', 'clever'],
+      courage: ['brave', 'determined', 'resilient', 'confident'],
+      kindness: ['kind', 'generous', 'empathetic', 'thoughtful'],
+      curiosity: ['curious', 'inquisitive', 'observant', 'thoughtful'],
+      creativity: ['creative', 'imaginative', 'artistic', 'innovative'],
+    };
+    // Return 2 random traits from the theme-based list
+    var traits = themeBasedTraits[theme] || themeBasedTraits.adventure;
+    var selectedTraits = [];
+    // Select 2 unique traits
+    while (selectedTraits.length < 2 && traits.length > 0) {
+      var randomIndex = Math.floor(Math.random() * traits.length);
+      selectedTraits.push(traits[randomIndex]);
+      traits.splice(randomIndex, 1); // Remove the selected trait to avoid duplicates
+    }
+    return selectedTraits;
+  };
+  return UserPersonalizationEngine;
+})();
+exports.UserPersonalizationEngine = UserPersonalizationEngine;
+// Singleton instance of the personalization engine
+exports.userPersonalizationEngine = new UserPersonalizationEngine('default-user');
+__exportStar(require('../types/story'), exports);
diff --git a/src/services/personalizationEngine.ts b/src/services/personalizationEngine.ts
index 0f461142..f2632770 100644
--- a/src/services/personalizationEngine.ts
+++ b/src/services/personalizationEngine.ts
@@ -1,18 +1,18 @@
-import { Story, StoryInput, StoryTheme } from '@/types/story';
-import { logger } from '@/utils/logger';
+import { logger } from '../utils/logger';
 import { v4 as uuidv4 } from 'uuid';
 import { kv } from '@vercel/kv';
-import { serializeError, openAICircuitBreaker } from '@/utils/error-handlers';
-import { generateFallbackStory } from '@/utils/fallback-stories';
-import { StoryGeneratorFactory, StoryGeneratorType } from '@/lib/generators/StoryGeneratorFactory';
-import { ClientStoryGenerator } from '@/lib/generators/ClientStoryGenerator';
+import { StoryInput, UserPreferences, StoryTheme } from '../types/story';
+import { generateFallbackStory } from '../utils/fallback-generator';
+import { geminiCircuitBreaker, serializeError } from '../utils/error-handlers';
+import CircuitBreaker = require('opossum'); // Updated import statement
 
 // Define interface for user preferences
-export interface UserPreferences {
+export interface UserPreferencesLocal {
   id?: string;
   userId: string | null;
   preferredThemes: string[];
   generatedStoryCount: number;
+  generatedStories?: number;
   lastStoryGeneratedAt?: Date;
   learningInterests: string[];
   ageGroup: '3-5' | '6-8' | '9-12';
@@ -23,11 +23,18 @@ export interface UserPreferences {
     push: boolean;
     frequency: 'daily' | 'weekly' | 'monthly';
   };
+  storyPreferences?: {
+    maxLength: number;
+    educationalFocus: boolean;
+    moralEmphasis: boolean;
+    readingLevel: string;
+  };
+  mostLikedCharacterTypes?: string[];
   createdAt?: Date;
   updatedAt?: Date;
 }
 
-const DEFAULT_PREFERENCES: UserPreferences = {
+const DEFAULT_PREFERENCES: UserPreferencesLocal = {
   userId: null,
   preferredThemes: ['adventure', 'educational'],
   generatedStoryCount: 0,
@@ -56,7 +63,6 @@ export const THEME_DESCRIPTIONS: Record<StoryTheme, string> = {
   kindness: 'compassion, helping others, and making a positive difference',
   curiosity: 'asking questions, seeking answers, and exploring the unknown',
   creativity: 'imagination, artistic expression, and innovative thinking',
-  mystery: 'solving puzzles, uncovering clues, and discovering secrets',
 };
 
 // Define theme-specific story elements
@@ -123,11 +129,6 @@ export const THEME_ELEMENTS: Record<
       'imagining solutions',
     ],
   },
-  mystery: {
-    settings: ['old mansion', 'secret library', 'hidden cave', 'mysterious garden'],
-    characters: ['young detective', 'wise librarian', 'mysterious stranger', 'helpful friend'],
-    challenges: ['solving a riddle', 'finding hidden clues', 'unraveling a mystery'],
-  },
 };
 
 // Define character traits for more detailed character customization
@@ -206,13 +207,35 @@ export interface EnhancedStoryInput extends StoryInput {
   supportingCharacters?: StoryCharacter[];
 }
 
+export interface Story {
+  id: string;
+  title: string;
+  content: string;
+  theme: string;
+  createdAt: string;
+  input: StoryInput;
+  metadata: {
+    pronouns: string;
+    possessivePronouns: string;
+    generatedAt: string;
+    wordCount?: number;
+    readingTime?: number;
+    fallback?: boolean;
+    error?: string;
+  };
+  userId?: string;
+  pronouns: string;
+  possessivePronouns: string;
+  generatedAt: string;
+}
+
 export class UserPersonalizationEngine {
   protected userId: string | undefined = undefined;
   private isServerSide: boolean = typeof window === 'undefined';
 
-  private isValidPreferences(preferences: unknown): preferences is UserPreferences {
+  private isValidPreferences(preferences: unknown): preferences is UserPreferencesLocal {
     if (!preferences || typeof preferences !== 'object') return false;
-    const p = preferences as UserPreferences;
+    const p = preferences as UserPreferencesLocal;
     return (
       Array.isArray(p.preferredThemes) &&
       typeof p.generatedStoryCount === 'number' &&
@@ -235,7 +258,7 @@ export class UserPersonalizationEngine {
     return this.userId;
   }
 
-  async getUserPreferences(): Promise<UserPreferences> {
+  async getUserPreferences(): Promise<UserPreferencesLocal> {
     if (!this.userId) return DEFAULT_PREFERENCES;
 
     try {
@@ -245,7 +268,7 @@ export class UserPersonalizationEngine {
           const kvKey = `user:preferences:${this.userId}`;
           const storedPreferences = await kv.get(kvKey);
 
-          if (storedPreferences) {
+          if (storedPreferences && typeof storedPreferences === 'object') {
             logger.info('Retrieved user preferences from KV store', { userId: this.userId });
             return {
               ...DEFAULT_PREFERENCES,
@@ -282,7 +305,7 @@ export class UserPersonalizationEngine {
     }
   }
 
-  async updateUserPreferences(newPreferences: Partial<UserPreferences>): Promise<boolean> {
+  async updateUserPreferences(newPreferences: Partial<UserPreferencesLocal>): Promise<boolean> {
     if (!this.userId) return false;
 
     try {
@@ -319,214 +342,585 @@ export class UserPersonalizationEngine {
     }
   }
 
-  async incrementGeneratedStories() {
-    const currentPreferences = await this.getUserPreferences();
-    if (currentPreferences) {
-      const updatedPreferences = {
-        ...currentPreferences,
-        generatedStoryCount: currentPreferences.generatedStoryCount + 1,
-      };
-      await this.updateUserPreferences(updatedPreferences);
-    }
-  }
+  async incrementStoryCount(): Promise<boolean> {
+    if (!this.userId || this.userId === 'default-user') return false;
 
-  // Replace callOpenAIEndpoint with new generator-based method
-  private async generateStoryWithAI(
-    input: StoryInput,
-    userPrefs: UserPreferences | null
-  ): Promise<Story> {
     try {
-      const generator = new ClientStoryGenerator(this.userId);
+      // Get current user data
+      const userData = await kv.hgetall(`user:${this.userId}`);
+
+      if (!userData) {
+        logger.warn('No user data found when incrementing story count', {
+          userId: this.userId,
+        });
+        return false;
+      }
 
-      // Enhance input with user preferences while maintaining StoryInput type
-      const enhancedInput: StoryInput = {
-        ...input,
-        readingLevel: this.convertAgeGroupToReadingLevel(userPrefs?.ageGroup || '6-8'),
-        interests: userPrefs?.learningInterests || input.interests || [],
-      };
+      // Calculate new story count
+      const currentStoryCount = parseInt((userData.storiesGenerated as string) || '0', 10);
+      const newStoryCount = currentStoryCount + 1;
+
+      // Update story count in database
+      await kv.hset(`user:${this.userId}`, {
+        storiesGenerated: newStoryCount,
+        lastStoryGeneratedAt: new Date().toISOString(),
+      });
+
+      logger.info('Successfully incremented story count', {
+        userId: this.userId,
+        previousCount: currentStoryCount,
+        newCount: newStoryCount,
+      });
 
-      return await generator.generateStory(enhancedInput);
+      return true;
     } catch (error) {
-      logger.error('Error in story generation:', { error: serializeError(error) });
-      throw error;
+      logger.error('Error incrementing story count', serializeError(error));
+      return false;
     }
   }
 
-  // Helper method to convert age group to reading level
-  private convertAgeGroupToReadingLevel(
-    ageGroup: '3-5' | '6-8' | '9-12'
-  ): 'beginner' | 'intermediate' | 'advanced' {
-    switch (ageGroup) {
-      case '3-5':
-        return 'beginner';
-      case '9-12':
-        return 'advanced';
-      case '6-8':
-      default:
-        return 'intermediate';
-    }
+  /**
+   * Generate a unique ID for a story
+   *
+   * This method generates a unique identifier for each story using UUID v4.
+   * It's marked as deprecated since uuidv4() should be used directly instead.
+   *
+   * @returns Unique ID string
+   * @deprecated Use uuidv4() directly instead
+   */
+  private generateUniqueId(): string {
+    return uuidv4();
   }
 
-  // Update generatePersonalizedStory to use the new generator method
-  async generatePersonalizedStory(input: StoryInput, userPrefs?: UserPreferences): Promise<Story> {
-    logger.info('Starting personalized story generation', {
-      input,
-      hasPreferences: !!userPrefs,
+  /**
+   * Generate a cache key for a story
+   *
+   * This method creates a deterministic cache key based on the story input parameters.
+   * The key format is: story:{childName}:{sortedInterests}:{theme}:{gender}
+   *
+   * @param input Story generation input parameters
+   * @returns Cache key string
+   */
+  private generateCacheKey(input: StoryInput): string {
+    const { childName, interests = [], theme, gender } = input;
+
+    // Sort interests for consistent cache keys regardless of order
+    const sortedInterests = [...interests].sort().join(',');
+
+    // Create a deterministic cache key
+    return `story:${childName}:${sortedInterests}:${theme}:${gender}`;
+  }
+
+  /**
+   * Generate a story using the Gemini API
+   *
+   * This method generates a story using the Gemini API, with caching and fallback mechanisms.
+   * It includes comprehensive error handling, circuit breaking, and detailed logging.
+   *
+   * @param input Story generation input parameters
+   * @returns Generated story content
+   */
+  async generateStory(input: StoryInput): Promise<string> {
+    logger.info('Starting story generation', {
+      childName: input.childName,
+      theme: input.theme,
+      gender: input.gender,
+      interestsCount: input.interests?.length || 0,
     });
 
+    // Create cache key
+    const cacheKey = this.generateCacheKey(input);
+
+    // Check cache
     try {
-      const story = await this.generateStoryWithAI(input, userPrefs || null);
+      const cachedStory = await kv.get<string>(cacheKey);
+
+      if (cachedStory) {
+        logger.info('Using cached story', {
+          cacheKey,
+          userId: this.userId,
+          contentLength: cachedStory.length,
+        });
+        return cachedStory;
+      }
 
-      await this.incrementGeneratedStories();
-      await this.saveStoryToHistory(story);
+      logger.info('No cached story found, generating new story', {
+        cacheKey,
+        userId: this.userId,
+      });
+    } catch (cacheError) {
+      logger.warn('Error checking story cache', serializeError(cacheError));
+      // Continue with story generation even if cache check fails
+    }
 
-      logger.info('Personalized story generation successful', {
-        storyId: story.id,
-        childName: input.childName,
+    // Define the API call function to be passed to the circuit breaker
+    const apiCallFunction = async () => {
+      try {
+        // Call the Gemini API endpoint
+        const storyContent = await this.callGeminiEndpoint(input);
+
+        // Cache the generated story
+        try {
+          const cacheTTL = 60 * 60 * 24; // 24 hours
+          await kv.set(cacheKey, storyContent, { ex: cacheTTL });
+
+          logger.info('Successfully cached story', {
+            cacheKey,
+            userId: this.userId,
+            contentLength: storyContent.length,
+            cacheTTL,
+          });
+        } catch (cacheError) {
+          logger.warn('Error caching story', serializeError(cacheError));
+          // Continue even if caching fails
+        }
+
+        // Increment the user's story count
+        await this.incrementStoryCount();
+
+        return storyContent;
+      } catch (error) {
+        logger.error('Error generating story with Gemini API', serializeError(error));
+        throw error;
+      }
+    };
+
+    // Define the fallback function to be used when the API call fails
+    const fallbackFunction = () => {
+      logger.warn('Using fallback story generation due to API failure', {
+        circuitState: geminiCircuitBreaker.status.stats,
+        metrics: geminiCircuitBreaker.stats,
       });
 
-      return story;
+      return generateFallbackStory(input);
+    };
+
+    try {
+      // Use the circuit breaker to make the API call
+      return await geminiCircuitBreaker.fire(apiCallFunction);
     } catch (error) {
-      logger.error('Error in personalized story generation:', {
-        error: serializeError(error),
-        input: {
-          childName: input.childName,
+      // This catch block handles any errors that might occur in the circuit breaker itself
+      logger.error('Circuit breaker caught error', serializeError(error));
+      return fallbackFunction();
+    }
+  }
+
+  /**
+   * Generate personalized story using Gemini API endpoint
+   *
+   * This method generates a story using the Gemini API, with caching and fallback mechanisms.
+   * It includes comprehensive error handling, circuit breaking, and detailed logging.
+   *
+   * @param input Story generation input parameters
+   * @returns Generated story content
+   */
+  async generatePersonalizedStory(
+    input: StoryInput,
+    userPrefs?: UserPreferencesLocal
+  ): Promise<Story> {
+    logger.info('Starting personalized story generation', {
+      input,
+      userPrefs: userPrefs
+        ? { ...userPrefs, userId: userPrefs.userId ? 'REDACTED' : null }
+        : undefined,
+    });
+
+    // Create a unique ID for this story
+    const storyId = this.generateUniqueId();
+
+    // Determine pronouns based on gender
+    const pronouns =
+      input.gender === 'female' || input.gender === 'girl'
+        ? 'she/her'
+        : input.gender === 'boy' || input.gender === 'male'
+          ? 'he/him'
+          : 'they/them';
+    const [pronoun, possessivePronoun] = pronouns.split('/');
+
+    // Create a cache key based on the input parameters
+    const cacheKey = this.generateCacheKey(input);
+
+    try {
+      // Check if we have a cached story for these parameters
+      const cachedStory = await kv.get<string>(cacheKey);
+
+      if (cachedStory) {
+        logger.info('Using cached story', {
+          cacheKey,
+          userId: this.userId,
+          contentLength: cachedStory.length,
+        });
+
+        // Parse the cached story to extract title and content
+        const titleMatch = cachedStory.match(/^#\s*(.+?)(?:\n|$)/m);
+        const title = titleMatch ? titleMatch[1].trim() : 'Untitled Story';
+        const content = cachedStory.replace(/^#\s*(.+?)(?:\n|$)/m, '').trim();
+
+        return {
+          id: storyId,
+          title,
+          content,
           theme: input.theme,
-          gender: input.gender,
-          readingLevel: input.readingLevel,
-        },
+          createdAt: new Date().toISOString(),
+          input,
+          metadata: {
+            pronouns: pronoun,
+            possessivePronouns: possessivePronoun,
+            generatedAt: new Date().toISOString(),
+            wordCount: content.split(/\s+/).length,
+            readingTime: Math.ceil(content.split(/\s+/).length / 200), // Approx. 200 words per minute
+          },
+          userId: this.userId,
+          pronouns: pronoun,
+          possessivePronouns: possessivePronoun,
+          generatedAt: new Date().toISOString(),
+        };
+      }
+
+      // No cached story found, generate a new one
+      logger.info('No cached story found, generating new story', {
+        cacheKey,
+        userId: this.userId,
       });
 
-      // Use fallback story in case of error
-      const fallbackStory = this.createFallbackStory(input);
-      const pronouns = this.getPronouns(input.gender);
+      // Define the API call function to be passed to the circuit breaker
+      const apiCallFunction = async () => {
+        try {
+          // Prepare the API request
+          const themeDescription = THEME_DESCRIPTIONS[input.theme as StoryTheme] || input.theme;
+          const themeElements = THEME_ELEMENTS[input.theme as StoryTheme];
+
+          // Get user preferences for enhanced personalization
+          const prefs = userPrefs || (await this.getUserPreferences());
+
+          // Construct a detailed prompt for the story
+          const prompt = `
+            Create a bedtime story for a child named ${input.childName} who uses ${pronouns} pronouns.
+
+            The story should be about ${themeDescription}.
+
+            ${input.interests?.length ? `Include these interests: ${input.interests.join(', ')}.` : ''}
+            ${prefs.learningInterests?.length ? `The child is also interested in learning about: ${prefs.learningInterests.join(', ')}.` : ''}
+
+            ${
+              themeElements
+                ? `
+            You can use these settings: ${themeElements.settings.join(', ')}.
+            You can include these character types: ${themeElements.characters.join(', ')}.
+            You can incorporate these challenges: ${themeElements.challenges.join(', ')}.
+            `
+                : ''
+            }
+            
+            ${input.favoriteCharacters?.length ? `Try to include references to these favorite characters: ${input.favoriteCharacters.join(', ')}.` : ''}
+            ${input.mostLikedCharacterTypes?.length ? `The child enjoys characters that are: ${input.mostLikedCharacterTypes.join(', ')}.` : ''}
+            
+            Make the story age-appropriate for a ${prefs.ageGroup || '6-8'} year old child.
+            The story should be engaging, with a positive message.
+
+            Format the story with a title at the beginning using a single # markdown heading.
+            Keep the story under 500 words.
+          `;
+
+          // Make the API request to Gemini
+          const response = await fetch('/api/gemini', {
+            method: 'POST',
+            headers: {
+              'Content-Type': 'application/json',
+            },
+            body: JSON.stringify({
+              type: 'story',
+              childName: input.childName,
+              gender: input.gender,
+              theme: input.theme,
+              interests: input.interests,
+              prompt: prompt,
+            }),
+          });
+
+          if (!response.ok) {
+            const errorData = await response.json();
+            throw new Error(`Gemini API error: ${errorData.error || response.statusText}`);
+          }
+
+          const data = await response.json();
+          const storyContent = data.content;
+
+          // Parse the story to extract title and content
+          const titleMatch = storyContent.match(/^#\s*(.+?)(?:\n|$)/m);
+          const title = titleMatch ? titleMatch[1].trim() : 'Untitled Story';
+          const content = storyContent.replace(/^#\s*(.+?)(?:\n|$)/m, '').trim();
+
+          // Cache the generated story
+          const cacheTTL = 60 * 60 * 24; // 24 hours
+          await kv.set(cacheKey, storyContent, { ex: cacheTTL });
+
+          logger.info('Successfully generated and cached story', {
+            userId: this.userId,
+            title,
+            contentLength: content.length,
+            cacheTTL,
+          });
+
+          // Increment the user's story count
+          await this.incrementStoryCount();
+
+          // Create and return the story object
+          return {
+            id: storyId,
+            title,
+            content,
+            theme: input.theme,
+            createdAt: new Date().toISOString(),
+            input,
+            metadata: {
+              pronouns: pronoun,
+              possessivePronouns: possessivePronoun,
+              generatedAt: new Date().toISOString(),
+              wordCount: content.split(/\s+/).length,
+              readingTime: Math.ceil(content.split(/\s+/).length / 200), // Approx. 200 words per minute
+            },
+            userId: this.userId,
+            pronouns: pronoun,
+            possessivePronouns: possessivePronoun,
+            generatedAt: new Date().toISOString(),
+          };
+        } catch (error) {
+          logger.error('Error generating story with Gemini API', serializeError(error));
+          throw error;
+        }
+      };
+
+      // Define the fallback function to be used when the API call fails
+      const fallbackFunction = () => {
+        logger.warn('Using fallback story generation due to API failure', {
+          circuitState: geminiCircuitBreaker.status.stats,
+          metrics: geminiCircuitBreaker.stats,
+        });
+
+        const fallbackContent = generateFallbackStory(input);
+
+        // Parse the fallback story
+        const titleMatch = fallbackContent.match(/^#\s*(.+?)(?:\n|$)/m);
+        const title = titleMatch
+          ? titleMatch[1].trim()
+          : `${input.theme.charAt(0).toUpperCase() + input.theme.slice(1)} Adventure`;
+        const content = titleMatch
+          ? fallbackContent.replace(/^#\s*(.+?)(?:\n|$)/m, '').trim()
+          : fallbackContent;
+
+        return {
+          id: storyId,
+          title,
+          content,
+          theme: input.theme,
+          createdAt: new Date().toISOString(),
+          input,
+          metadata: {
+            pronouns: pronoun,
+            possessivePronouns: possessivePronoun,
+            generatedAt: new Date().toISOString(),
+            wordCount: content.split(/\s+/).length,
+            readingTime: Math.ceil(content.split(/\s+/).length / 200),
+            fallback: true,
+          },
+          userId: this.userId,
+          pronouns: pronoun,
+          possessivePronouns: possessivePronoun,
+          generatedAt: new Date().toISOString(),
+        };
+      };
+
+      try {
+        // Use the Opossum circuit breaker to make the API call
+        return await geminiCircuitBreaker.fire(apiCallFunction);
+      } catch (error) {
+        // This catch block handles any errors that might occur in the circuit breaker itself
+        logger.error('Circuit breaker caught error', serializeError(error));
+        return fallbackFunction();
+      }
+    } catch (error) {
+      // This catch block handles any errors in the overall story generation process
+      logger.error('Error in generatePersonalizedStory', serializeError(error));
+
+      const fallbackContent = generateFallbackStory(input);
 
       return {
-        id: this.generateUniqueId(),
-        title: `A Story for ${input.childName}`,
-        content: fallbackStory,
+        id: storyId,
+        title: `${input.theme.charAt(0).toUpperCase() + input.theme.slice(1)} Adventure`,
+        content: fallbackContent,
         theme: input.theme,
         createdAt: new Date().toISOString(),
         input,
         metadata: {
-          pronouns: pronouns.subject,
-          possessivePronouns: pronouns.possessive,
+          pronouns: pronoun,
+          possessivePronouns: possessivePronoun,
           generatedAt: new Date().toISOString(),
-          wordCount: fallbackStory.split(/\s+/).length,
-          readingTime: Math.ceil(fallbackStory.split(/\s+/).length / 200), // Assuming 200 words per minute
+          wordCount: fallbackContent.split(/\s+/).length,
+          readingTime: Math.ceil(fallbackContent.split(/\s+/).length / 200),
+          fallback: true,
+          error: (error as Error).message,
         },
         userId: this.userId,
-        pronouns: pronouns.subject,
-        possessivePronouns: pronouns.possessive,
+        pronouns: pronoun,
+        possessivePronouns: possessivePronoun,
         generatedAt: new Date().toISOString(),
       };
     }
   }
 
-  // Add helper method for pronouns
-  private getPronouns(gender: string): { subject: string; possessive: string } {
-    switch (gender) {
-      case 'boy':
-        return { subject: 'he', possessive: 'his' };
-      case 'girl':
-        return { subject: 'she', possessive: 'her' };
-      default:
-        return { subject: 'they', possessive: 'their' };
-    }
-  }
-
   /**
-   * Generate a fallback story when the OpenAI API call fails
+   * Call the Gemini API endpoint to generate a story
+   *
+   * This method makes a request to the Gemini API endpoint with the story input parameters.
+   * It includes error handling and detailed logging.
+   *
+   * @param input Story generation input parameters
+   * @returns Generated story content
    */
-  private createFallbackStory(input: StoryInput): string {
-    // Use the dedicated fallback story generator instead of the circular dependency
-    const mainCharacterTraits = (input as any).mainCharacter?.traits?.join(', ');
-    const supportingCharacterName = (input as EnhancedStoryInput).supportingCharacters?.[0]?.name;
-    const supportingCharacterType = (input as EnhancedStoryInput).supportingCharacters?.[0]?.type;
-
-    // Create an enhanced input with character information
-    const enhancedInput = {
-      ...input,
-      mainCharacterTraits,
-      supportingCharacterName,
-      supportingCharacterType,
-    };
+  private async callGeminiEndpoint(input: StoryInput): Promise<string> {
+    try {
+      logger.info('Calling Gemini API endpoint for story generation', {
+        childName: input.childName,
+        theme: input.theme,
+        gender: input.gender,
+        interestsCount: input.interests?.length || 0,
+      });
 
-    // Generate a more personalized fallback story using the imported function
-    return generateFallbackStory(enhancedInput);
-  }
+      // Get user preferences for enhanced personalization
+      const prefs = await this.getUserPreferences();
+
+      // Determine pronouns based on gender
+      const pronouns =
+        input.gender === 'female' || input.gender === 'girl'
+          ? 'she/her'
+          : input.gender === 'boy' || input.gender === 'male'
+            ? 'he/him'
+            : 'they/them';
+
+      // Prepare the API request
+      const themeDescription = THEME_DESCRIPTIONS[input.theme as StoryTheme] || input.theme;
+      const themeElements = THEME_ELEMENTS[input.theme as StoryTheme];
+
+      // Construct a detailed prompt for the story
+      const prompt = `
+        Create a bedtime story for a child named ${input.childName} who uses ${pronouns} pronouns.
+
+        The story should be about ${themeDescription}.
+
+        ${input.interests?.length ? `Include these interests: ${input.interests.join(', ')}.` : ''}
+        ${prefs.learningInterests?.length ? `The child is also interested in learning about: ${prefs.learningInterests.join(', ')}.` : ''}
+
+        ${
+          themeElements
+            ? `
+        You can use these settings: ${themeElements.settings.join(', ')}.
+        You can include these character types: ${themeElements.characters.join(', ')}.
+        You can incorporate these challenges: ${themeElements.challenges.join(', ')}.
+        `
+            : ''
+        }
+        
+        ${input.favoriteCharacters?.length ? `Try to include references to these favorite characters: ${input.favoriteCharacters.join(', ')}.` : ''}
+        ${input.mostLikedCharacterTypes?.length ? `The child enjoys characters that are: ${input.mostLikedCharacterTypes.join(', ')}.` : ''}
+        
+        Make the story age-appropriate for a ${prefs.ageGroup || '6-8'} year old child.
+        The story should be engaging, with a positive message.
+
+        Format the story with a title at the beginning using a single # markdown heading.
+        Keep the story under 500 words.
+      `;
+
+      // Make the API request to Gemini
+      const response = await fetch('/api/gemini', {
+        method: 'POST',
+        headers: {
+          'Content-Type': 'application/json',
+        },
+        body: JSON.stringify({
+          type: 'story',
+          childName: input.childName,
+          gender: input.gender,
+          theme: input.theme,
+          interests: input.interests,
+          prompt: prompt,
+        }),
+      });
 
-  private generateStoryMiddle(
-    input: StoryInput,
-    pronouns: string,
-    possessivePronouns: string,
-    character: string = 'friend',
-    challenge: string = 'challenge'
-  ): string {
-    const { childName, interests, theme } = input;
-
-    return `As ${pronouns} explored with excitement, ${childName} met a ${character} who needed help with ${challenge}. 
-    Together, they used ${childName}'s knowledge of ${interests.join(' and ')} to solve the problem. 
-    It wasn't easy, but ${childName} was determined to help. ${pronouns === 'they' ? 'They' : pronouns === 'he' ? 'He' : 'She'} 
-    discovered that ${possessivePronouns} love for ${interests[0] || 'learning'} was exactly what was needed in this situation.`;
-  }
+      if (!response.ok) {
+        const errorData = await response.json();
+        throw new Error(`Gemini API error: ${errorData.error || response.statusText}`);
+      }
 
-  private generateStoryEnding(input: StoryInput, pronouns: string): string {
-    const { childName } = input;
-    return `At the end of this wonderful adventure, ${childName} realized that the greatest magic of all was believing in ${
-      pronouns === 'they' ? 'themselves' : pronouns === 'he' ? 'himself' : 'herself'
-    }. The end.`;
-  }
+      const data = await response.json();
 
-  // Generate a unique story ID
-  private generateUniqueId(): string {
-    return uuidv4();
+      logger.info('Successfully received story from Gemini API', {
+        contentLength: data.content.length,
+        model: data.model,
+      });
+
+      return data.content;
+    } catch (error) {
+      logger.error('Error calling Gemini API endpoint', serializeError(error));
+      throw error;
+    }
   }
 
-  // Store generated story in user history
+  /**
+   * Store generated story in user history
+   *
+   * This method saves a generated story to the user's history in the database.
+   * It includes error handling and detailed logging.
+   *
+   * @param story Story object to save
+   * @returns Whether the operation was successful
+   */
   async saveStoryToHistory(story: Story): Promise<boolean> {
     if (!this.userId || this.userId === 'default-user') return false;
 
     try {
-      // Store in KV if server-side
-      if (this.isServerSide) {
-        try {
-          const kvKey = `user:stories:${this.userId}`;
-
-          // Get existing stories
-          const existingStories = (await kv.get<Story[]>(kvKey)) || [];
+      // Create a history entry with minimal data to save space
+      const historyEntry = {
+        id: story.id,
+        title: story.title,
+        theme: story.theme,
+        childName: story.input.childName,
+        createdAt: story.createdAt,
+        wordCount: story.metadata.wordCount || 0,
+        fallback: story.metadata.fallback || false,
+      };
 
-          // Add new story to the beginning of the array (most recent first)
-          const updatedStories = [story, ...existingStories].slice(0, 50); // Keep only the 50 most recent stories
+      // Get current user data
+      const userData = await kv.hgetall(`user:${this.userId}`);
 
-          await kv.set(kvKey, updatedStories);
-          logger.info('Saved story to user history in KV store', {
-            userId: this.userId,
-            storyId: story.id,
-          });
-          return true;
-        } catch (kvError) {
-          logger.error('Error saving story to history in KV:', { error: kvError });
-          // Fall back to localStorage if KV fails
-        }
+      if (!userData) {
+        logger.warn('No user data found when saving story to history', {
+          userId: this.userId,
+        });
+        return false;
       }
 
-      // Client-side storage fallback
-      if (typeof window !== 'undefined') {
-        const storageKey = `stories:${this.userId}`;
-        const existingStoriesJson = localStorage.getItem(storageKey);
-        const existingStories = existingStoriesJson ? JSON.parse(existingStoriesJson) : [];
+      // Get current history or initialize empty array
+      const currentHistory = JSON.parse((userData.storyHistory as string) || '[]');
 
-        // Add new story to the beginning of the array (most recent first)
-        const updatedStories = [story, ...existingStories].slice(0, 50); // Keep only the 50 most recent stories
+      // Add new story to history (at the beginning)
+      const updatedHistory = [historyEntry, ...currentHistory].slice(0, 20); // Keep only last 20 stories
 
-        localStorage.setItem(storageKey, JSON.stringify(updatedStories));
-        return true;
-      }
+      // Update history in database
+      await kv.hset(`user:${this.userId}`, {
+        storyHistory: JSON.stringify(updatedHistory),
+        lastStoryGeneratedAt: new Date().toISOString(),
+      });
 
-      return false;
+      logger.info('Successfully saved story to history', {
+        userId: this.userId,
+        storyId: story.id,
+        historyLength: updatedHistory.length,
+      });
+
+      return true;
     } catch (error) {
-      logger.error('Error saving story to history:', { error });
+      logger.error('Error saving story to history', serializeError(error));
       return false;
     }
   }
@@ -579,7 +973,7 @@ export class UserPersonalizationEngine {
     };
   }
 
-  // Update suggestCharacterTraits to include mystery theme
+  // Helper method to suggest character traits based on theme
   public suggestCharacterTraits(theme: StoryTheme): string[] {
     const themeBasedTraits: Record<StoryTheme, string[]> = {
       adventure: ['brave', 'curious', 'adventurous', 'determined'],
@@ -592,7 +986,6 @@ export class UserPersonalizationEngine {
       kindness: ['kind', 'generous', 'empathetic', 'thoughtful'],
       curiosity: ['curious', 'inquisitive', 'observant', 'thoughtful'],
       creativity: ['creative', 'imaginative', 'artistic', 'innovative'],
-      mystery: ['observant', 'clever', 'analytical', 'persistent'],
     };
 
     // Return 2 random traits from the theme-based list
@@ -613,3 +1006,5 @@ export class UserPersonalizationEngine {
 // Singleton instance of the personalization engine
 export const userPersonalizationEngine = new UserPersonalizationEngine('default-user');
 export { DEFAULT_PREFERENCES };
+
+export * from '../types/story';
diff --git a/src/services/serverPersonalizationEngine.ts b/src/services/serverPersonalizationEngine.ts
new file mode 100644
index 00000000..68fca3c5
--- /dev/null
+++ b/src/services/serverPersonalizationEngine.ts
@@ -0,0 +1,97 @@
+import { clerkClient } from '@clerk/nextjs/server';
+import {
+  UserPersonalizationEngine as BaseUserPersonalizationEngine,
+  DEFAULT_PREFERENCES,
+} from './personalizationEngine';
+import { Story, StoryInput, UserPreferences } from '@/types/story';
+import { generateStory } from '@/lib/storyGenerator';
+import { logger } from '@/utils/logger';
+
+export class ServerUserPersonalizationEngine extends BaseUserPersonalizationEngine {
+  // Public method to initialize user ID
+  public init(userId: string | undefined) {
+    this.setUserId(userId);
+  }
+
+  // Server-side method to get user preferences
+  async getUserPreferences(): Promise<UserPreferences> {
+    const userId = this.getUserId();
+    if (!userId) {
+      return DEFAULT_PREFERENCES;
+    }
+
+    try {
+      const user = await clerkClient.users.getUser(userId);
+      const preferences = (user.publicMetadata?.preferences || {}) as Partial<UserPreferences>;
+
+      return {
+        ...DEFAULT_PREFERENCES,
+        ...preferences,
+        preferredThemes: preferences.preferredThemes || DEFAULT_PREFERENCES.preferredThemes,
+        generatedStoryCount: preferences.generatedStoryCount || 0,
+      };
+    } catch (error) {
+      logger.error('Failed to fetch user preferences:', { error });
+      return DEFAULT_PREFERENCES;
+    }
+  }
+
+  async updateUserPreferences(newPreferences: Partial<UserPreferences>): Promise<boolean> {
+    const userId = this.getUserId();
+    if (!userId) {
+      return false;
+    }
+
+    try {
+      await clerkClient.users.updateUser(userId, {
+        publicMetadata: {
+          preferences: {
+            ...newPreferences,
+            generatedStoryCount: newPreferences.generatedStoryCount || 0,
+          },
+        },
+      });
+      return true;
+    } catch (error) {
+      logger.error('Failed to update user preferences:', { error });
+      return false;
+    }
+  }
+
+  // Server-side method to increment generated stories
+  async incrementGeneratedStories() {
+    if (!this.getUserId()) {
+      return;
+    }
+
+    try {
+      const currentPreferences = await this.getUserPreferences();
+      const updatedPreferences = {
+        ...currentPreferences,
+        generatedStoryCount: (currentPreferences.generatedStoryCount || 0) + 1,
+      };
+
+      await this.updateUserPreferences(updatedPreferences);
+    } catch (error) {
+      logger.error('Failed to increment generated stories:', { error });
+    }
+  }
+
+  // Server-side method to generate a personalized story
+  async generatePersonalizedStory(input: StoryInput): Promise<Story> {
+    try {
+      const userId = this.getUserId();
+      const story = await generateStory(input, userId || undefined);
+      if (!story) throw new Error('Failed to generate story');
+
+      await this.incrementGeneratedStories();
+      return story;
+    } catch (error) {
+      logger.error('Failed to generate personalized story:', { error });
+      throw error;
+    }
+  }
+}
+
+// Singleton instance of the server-side personalization engine
+export const serverUserPersonalizationEngine = new ServerUserPersonalizationEngine(undefined);
diff --git a/src/types/story.js b/src/types/story.js
index db8b17d5..c8ad2e54 100644
--- a/src/types/story.js
+++ b/src/types/story.js
@@ -1,2 +1,2 @@
-'use strict';
-Object.defineProperty(exports, '__esModule', { value: true });
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
diff --git a/src/types/story.ts b/src/types/story.ts
index 87b73e73..b536334b 100644
--- a/src/types/story.ts
+++ b/src/types/story.ts
@@ -6,87 +6,82 @@ import {
   AGE_GROUPS,
 } from '../constants';
 
-export type StoryTheme =
-  | 'adventure'
-  | 'fantasy'
-  | 'mystery'
-  | 'science'
-  | 'nature'
-  | 'friendship'
-  | 'educational'
-  | 'courage'
-  | 'kindness'
-  | 'curiosity'
-  | 'creativity';
-
-export type StoryMood = 'happy' | 'calm' | 'exciting' | 'funny' | 'educational';
-export type StoryGender = 'boy' | 'girl' | 'neutral' | 'male' | 'female';
-export type ReadingLevel = 'beginner' | 'intermediate' | 'advanced';
+export type StoryTheme = (typeof STORY_THEMES)[number];
+export type StoryMood = (typeof STORY_MOODS)[number];
+export type StoryGender = (typeof GENDER_OPTIONS)[number];
+export type ReadingLevel = (typeof READING_LEVELS)[number];
 export type AgeGroup = (typeof AGE_GROUPS)[number];
 
 export type StoryMetadata = {
   pronouns: string;
   possessivePronouns: string;
   generatedAt: string;
-  wordCount: number;
-  readingTime: number;
-  fallback?: boolean;
-  error?: string;
-  model?: string;
-  provider?: 'openai' | 'gemini';
+  language?: string;
+  wordCount?: number;
+  readingLevel?: ReadingLevel;
 };
 
-export interface StoryRequest {
-  childName: string;
-  gender: StoryGender;
-  theme: StoryTheme;
-  interests: string[];
-  favoriteCharacters: string[];
-  traits: string[];
-  mood: StoryMood;
-  readingLevel: ReadingLevel;
-}
-
 export interface StoryInput {
   childName: string;
   gender: StoryGender;
   theme: StoryTheme;
   interests: string[];
-  favoriteCharacters: string[];
-  traits?: string[];
+  favoriteCharacters?: string[];
+  mostLikedCharacterTypes?: string[];
   mood?: StoryMood;
+  language?: string;
   readingLevel?: ReadingLevel;
-  mostLikedCharacterTypes?: string[];
+  themes?: StoryTheme[];
+  userId?: string;
 }
 
 export interface Story {
   id: string;
   title: string;
   content: string;
-  theme: StoryTheme;
+  theme: string;
   createdAt: string;
   input: StoryInput;
-  metadata: StoryMetadata;
+  metadata: {
+    pronouns: string;
+    possessivePronouns: string;
+    generatedAt: string;
+    wordCount?: number;
+    readingTime?: number;
+    fallback?: boolean;
+    error?: string;
+  };
   userId?: string;
   pronouns: string;
   possessivePronouns: string;
   generatedAt: string;
-  created_at?: string;
-  updated_at?: string;
-  user_id?: string;
 }
 
 export interface UserPreferences {
-  readingLevel: ReadingLevel;
-  favoriteThemes: StoryTheme[];
-  favoriteCharacters?: string[];
-  interests?: string[];
-  traits?: string[];
-}
-
-export interface UserPreferencesLocal extends UserPreferences {
-  userId?: string;
-  lastUpdated?: string;
+  id?: string;
+  userId: string | null;
+  preferredThemes: string[];
+  generatedStoryCount: number;
+  generatedStories?: number;
+  lastStoryGeneratedAt?: Date;
+  learningInterests: string[];
+  ageGroup: AgeGroup;
+  theme: 'light' | 'dark';
+  language: string;
+  notifications: {
+    email: boolean;
+    push: boolean;
+    frequency: 'daily' | 'weekly' | 'monthly';
+  };
+  storyPreferences?: {
+    maxLength: number;
+    educationalFocus: boolean;
+    moralEmphasis: boolean;
+    readingLevel: string;
+  };
+  mostLikedCharacterTypes?: string[];
+  createdAt?: Date;
+  updatedAt?: Date;
 }
 
 export interface StoryError {
@@ -94,35 +89,3 @@ export interface StoryError {
   code?: string;
   details?: Record<string, unknown>;
 }
-
-// Story Generation System Types
-export interface IStoryGenerator {
-  generateStory(input: StoryInput): Promise<Story>;
-  validateInput(input: StoryInput): boolean;
-  handleError(error: Error): Promise<Story>;
-  config: StoryGeneratorConfig;
-}
-
-export interface StoryGeneratorConfig {
-  maxRetries: number;
-  retryDelay: number;
-  timeout: number;
-  cacheEnabled: boolean;
-  cacheTTL: number;
-  rateLimits: {
-    requestsPerMinute: number;
-    tokensPerMinute: number;
-  };
-}
-
-export interface StoryGeneratorResult {
-  success: boolean;
-  story?: Story;
-  error?: Error;
-  metadata?: {
-    cached: boolean;
-    generationTime: number;
-    provider: string;
-    model: string;
-  };
-}
diff --git a/src/utils/cors.ts b/src/utils/cors.ts
deleted file mode 100644
index 3cfe143f..00000000
--- a/src/utils/cors.ts
+++ /dev/null
@@ -1,8 +0,0 @@
-import { NextResponse } from 'next/server';
-
-export function addCorsHeaders(response: NextResponse): NextResponse {
-  response.headers.set('Access-Control-Allow-Origin', '*');
-  response.headers.set('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
-  response.headers.set('Access-Control-Allow-Headers', 'Content-Type, Authorization');
-  return response;
-}
diff --git a/src/utils/error-handlers.js b/src/utils/error-handlers.js
index 97e60f29..77c2f804 100644
--- a/src/utils/error-handlers.js
+++ b/src/utils/error-handlers.js
@@ -1,138 +1,41 @@
-'use strict';
-var __awaiter =
-  (this && this.__awaiter) ||
-  function (thisArg, _arguments, P, generator) {
-    function adopt(value) {
-      return value instanceof P
-        ? value
-        : new P(function (resolve) {
-            resolve(value);
-          });
-    }
+"use strict";
+var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
+    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
     return new (P || (P = Promise))(function (resolve, reject) {
-      function fulfilled(value) {
-        try {
-          step(generator.next(value));
-        } catch (e) {
-          reject(e);
-        }
-      }
-      function rejected(value) {
-        try {
-          step(generator['throw'](value));
-        } catch (e) {
-          reject(e);
-        }
-      }
-      function step(result) {
-        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
-      }
-      step((generator = generator.apply(thisArg, _arguments || [])).next());
+        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
+        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
+        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
+        step((generator = generator.apply(thisArg, _arguments || [])).next());
     });
-  };
-var __generator =
-  (this && this.__generator) ||
-  function (thisArg, body) {
-    var _ = {
-        label: 0,
-        sent: function () {
-          if (t[0] & 1) throw t[1];
-          return t[1];
-        },
-        trys: [],
-        ops: [],
-      },
-      f,
-      y,
-      t,
-      g = Object.create((typeof Iterator === 'function' ? Iterator : Object).prototype);
-    return (
-      (g.next = verb(0)),
-      (g['throw'] = verb(1)),
-      (g['return'] = verb(2)),
-      typeof Symbol === 'function' &&
-        (g[Symbol.iterator] = function () {
-          return this;
-        }),
-      g
-    );
-    function verb(n) {
-      return function (v) {
-        return step([n, v]);
-      };
-    }
+};
+var __generator = (this && this.__generator) || function (thisArg, body) {
+    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
+    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
+    function verb(n) { return function (v) { return step([n, v]); }; }
     function step(op) {
-      if (f) throw new TypeError('Generator is already executing.');
-      while ((g && ((g = 0), op[0] && (_ = 0)), _))
-        try {
-          if (
-            ((f = 1),
-            y &&
-              (t =
-                op[0] & 2
-                  ? y['return']
-                  : op[0]
-                    ? y['throw'] || ((t = y['return']) && t.call(y), 0)
-                    : y.next) &&
-              !(t = t.call(y, op[1])).done)
-          )
-            return t;
-          if (((y = 0), t)) op = [op[0] & 2, t.value];
-          switch (op[0]) {
-            case 0:
-            case 1:
-              t = op;
-              break;
-            case 4:
-              _.label++;
-              return { value: op[1], done: false };
-            case 5:
-              _.label++;
-              y = op[1];
-              op = [0];
-              continue;
-            case 7:
-              op = _.ops.pop();
-              _.trys.pop();
-              continue;
-            default:
-              if (
-                !((t = _.trys), (t = t.length > 0 && t[t.length - 1])) &&
-                (op[0] === 6 || op[0] === 2)
-              ) {
-                _ = 0;
-                continue;
-              }
-              if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
-                _.label = op[1];
-                break;
-              }
-              if (op[0] === 6 && _.label < t[1]) {
-                _.label = t[1];
-                t = op;
-                break;
-              }
-              if (t && _.label < t[2]) {
-                _.label = t[2];
-                _.ops.push(op);
-                break;
-              }
-              if (t[2]) _.ops.pop();
-              _.trys.pop();
-              continue;
-          }
-          op = body.call(thisArg, _);
-        } catch (e) {
-          op = [6, e];
-          y = 0;
-        } finally {
-          f = t = 0;
-        }
-      if (op[0] & 5) throw op[1];
-      return { value: op[0] ? op[1] : void 0, done: true };
+        if (f) throw new TypeError("Generator is already executing.");
+        while (g && (g = 0, op[0] && (_ = 0)), _) try {
+            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
+            if (y = 0, t) op = [op[0] & 2, t.value];
+            switch (op[0]) {
+                case 0: case 1: t = op; break;
+                case 4: _.label++; return { value: op[1], done: false };
+                case 5: _.label++; y = op[1]; op = [0]; continue;
+                case 7: op = _.ops.pop(); _.trys.pop(); continue;
+                default:
+                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
+                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
+                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
+                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
+                    if (t[2]) _.ops.pop();
+                    _.trys.pop(); continue;
+            }
+            op = body.call(thisArg, _);
+        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
+        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
     }
-  };
-Object.defineProperty(exports, '__esModule', { value: true });
+};
+Object.defineProperty(exports, "__esModule", { value: true });
 exports.geminiCircuitBreaker = exports.openAICircuitBreaker = void 0;
 exports.serializeError = serializeError;
 exports.handleOpenAIError = handleOpenAIError;
@@ -140,8 +43,8 @@ exports.handleGeminiError = handleGeminiError;
 exports.validateApiKey = validateApiKey;
 exports.validateGeminiApiKey = validateGeminiApiKey;
 exports.generateFallbackStoryUtil = generateFallbackStoryUtil;
-var logger_1 = require('./logger');
-var CircuitBreaker = require('opossum');
+var logger_1 = require("./logger");
+var CircuitBreaker = require("opossum");
 /**
  * Configure the circuit breaker for OpenAI API calls
  *
@@ -154,56 +57,38 @@ var CircuitBreaker = require('opossum');
  */
 var openAICircuitBreakerTimeout = 45000; // 45 seconds
 var geminiCircuitBreakerTimeout = 45000; // 45 seconds
-exports.openAICircuitBreaker = new CircuitBreaker(
-  function (fn) {
-    return __awaiter(void 0, void 0, void 0, function () {
-      return __generator(this, function (_a) {
-        switch (_a.label) {
-          case 0:
-            return [4 /*yield*/, fn()];
-          case 1:
-            return [2 /*return*/, _a.sent()];
-        }
-      });
-    });
-  },
-  {
+exports.openAICircuitBreaker = new CircuitBreaker(function (fn) { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
+    switch (_a.label) {
+        case 0: return [4 /*yield*/, fn()];
+        case 1: return [2 /*return*/, _a.sent()];
+    }
+}); }); }, {
     resetTimeout: 120000, // 2 minutes before trying again
     timeout: openAICircuitBreakerTimeout, // 45 seconds before timing out a request
     errorThresholdPercentage: 50, // 50% of requests must fail to open circuit
     rollingCountTimeout: 60000, // 1 minute window for failure percentage calculation
     rollingCountBuckets: 10, // Split the rolling window into 10 buckets
     capacity: 10, // Maximum concurrent requests
-  }
-);
+});
 /**
  * Configure the circuit breaker for Gemini API calls
  *
  * This implementation uses the same Opossum library with similar settings
  * to the OpenAI circuit breaker for consistency.
  */
-exports.geminiCircuitBreaker = new CircuitBreaker(
-  function (fn) {
-    return __awaiter(void 0, void 0, void 0, function () {
-      return __generator(this, function (_a) {
-        switch (_a.label) {
-          case 0:
-            return [4 /*yield*/, fn()];
-          case 1:
-            return [2 /*return*/, _a.sent()];
-        }
-      });
-    });
-  },
-  {
+exports.geminiCircuitBreaker = new CircuitBreaker(function (fn) { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
+    switch (_a.label) {
+        case 0: return [4 /*yield*/, fn()];
+        case 1: return [2 /*return*/, _a.sent()];
+    }
+}); }); }, {
     resetTimeout: 120000, // 2 minutes before trying again
     timeout: geminiCircuitBreakerTimeout, // 45 seconds before timing out a request
     errorThresholdPercentage: 50, // 50% of requests must fail to open circuit
     rollingCountTimeout: 60000, // 1 minute window for failure percentage calculation
     rollingCountBuckets: 10, // Split the rolling window into 10 buckets
     capacity: 10, // Maximum concurrent requests
-  }
-);
+});
 // Track circuit breaker metrics for OpenAI
 var totalRequests = 0;
 var successfulRequests = 0;
@@ -216,325 +101,293 @@ var geminiFailedRequests = 0;
 var geminiFallbackExecutions = 0;
 // Log circuit breaker events with enhanced information for OpenAI
 exports.openAICircuitBreaker.on('open', function () {
-  logger_1.logger.warn('OpenAI circuit breaker opened - too many failures', {
-    metrics: exports.openAICircuitBreaker.stats,
-    successRate: successfulRequests > 0 ? (successfulRequests / totalRequests) * 100 : 0,
-  });
+    logger_1.logger.warn('OpenAI circuit breaker opened - too many failures', {
+        metrics: exports.openAICircuitBreaker.stats,
+        successRate: successfulRequests > 0 ? (successfulRequests / totalRequests) * 100 : 0,
+    });
 });
 exports.openAICircuitBreaker.on('close', function () {
-  logger_1.logger.info('OpenAI circuit breaker closed - service recovered', {
-    metrics: exports.openAICircuitBreaker.stats,
-  });
+    logger_1.logger.info('OpenAI circuit breaker closed - service recovered', {
+        metrics: exports.openAICircuitBreaker.stats,
+    });
 });
 exports.openAICircuitBreaker.on('halfOpen', function () {
-  logger_1.logger.info('OpenAI circuit breaker half-open - testing service', {
-    metrics: exports.openAICircuitBreaker.stats,
-  });
+    logger_1.logger.info('OpenAI circuit breaker half-open - testing service', {
+        metrics: exports.openAICircuitBreaker.stats,
+    });
 });
 exports.openAICircuitBreaker.on('fallback', function (result) {
-  fallbackExecutions++;
-  logger_1.logger.warn('OpenAI circuit breaker fallback executed', {
-    result: result,
-    fallbackCount: fallbackExecutions,
-  });
+    fallbackExecutions++;
+    logger_1.logger.warn('OpenAI circuit breaker fallback executed', {
+        result: result,
+        fallbackCount: fallbackExecutions,
+    });
 });
 exports.openAICircuitBreaker.on('success', function () {
-  totalRequests++;
-  successfulRequests++;
-  logger_1.logger.debug('OpenAI API call successful', {
-    totalRequests: totalRequests,
-    successRate: (successfulRequests / totalRequests) * 100,
-  });
+    totalRequests++;
+    successfulRequests++;
+    logger_1.logger.debug('OpenAI API call successful', {
+        totalRequests: totalRequests,
+        successRate: (successfulRequests / totalRequests) * 100,
+    });
 });
 exports.openAICircuitBreaker.on('failure', function (error) {
-  totalRequests++;
-  failedRequests++;
-  logger_1.logger.error('OpenAI API call failed', {
-    error: serializeError(error),
-    totalRequests: totalRequests,
-    failureRate: (failedRequests / totalRequests) * 100,
-  });
+    totalRequests++;
+    failedRequests++;
+    logger_1.logger.error('OpenAI API call failed', {
+        error: serializeError(error),
+        totalRequests: totalRequests,
+        failureRate: (failedRequests / totalRequests) * 100,
+    });
 });
 exports.openAICircuitBreaker.on('timeout', function () {
-  logger_1.logger.warn('OpenAI API call timed out', {
-    timeoutMs: openAICircuitBreakerTimeout,
-  });
+    logger_1.logger.warn('OpenAI API call timed out', {
+        timeoutMs: openAICircuitBreakerTimeout,
+    });
 });
 exports.openAICircuitBreaker.on('reject', function () {
-  logger_1.logger.warn('OpenAI API call rejected (circuit open)', {
-    circuitState: exports.openAICircuitBreaker.status.stats,
-    metrics: exports.openAICircuitBreaker.stats,
-  });
+    logger_1.logger.warn('OpenAI API call rejected (circuit open)', {
+        circuitState: exports.openAICircuitBreaker.status.stats,
+        metrics: exports.openAICircuitBreaker.stats,
+    });
 });
 // Log circuit breaker events with enhanced information for Gemini
 exports.geminiCircuitBreaker.on('open', function () {
-  logger_1.logger.warn('Gemini circuit breaker opened - too many failures', {
-    metrics: exports.geminiCircuitBreaker.stats,
-    successRate:
-      geminiSuccessfulRequests > 0 ? (geminiSuccessfulRequests / geminiTotalRequests) * 100 : 0,
-  });
+    logger_1.logger.warn('Gemini circuit breaker opened - too many failures', {
+        metrics: exports.geminiCircuitBreaker.stats,
+        successRate: geminiSuccessfulRequests > 0 ? (geminiSuccessfulRequests / geminiTotalRequests) * 100 : 0,
+    });
 });
 exports.geminiCircuitBreaker.on('close', function () {
-  logger_1.logger.info('Gemini circuit breaker closed - service recovered', {
-    metrics: exports.geminiCircuitBreaker.stats,
-  });
+    logger_1.logger.info('Gemini circuit breaker closed - service recovered', {
+        metrics: exports.geminiCircuitBreaker.stats,
+    });
 });
 exports.geminiCircuitBreaker.on('halfOpen', function () {
-  logger_1.logger.info('Gemini circuit breaker half-open - testing service', {
-    metrics: exports.geminiCircuitBreaker.stats,
-  });
+    logger_1.logger.info('Gemini circuit breaker half-open - testing service', {
+        metrics: exports.geminiCircuitBreaker.stats,
+    });
 });
 exports.geminiCircuitBreaker.on('fallback', function (result) {
-  geminiFallbackExecutions++;
-  logger_1.logger.warn('Gemini circuit breaker fallback executed', {
-    result: result,
-    fallbackCount: geminiFallbackExecutions,
-  });
+    geminiFallbackExecutions++;
+    logger_1.logger.warn('Gemini circuit breaker fallback executed', {
+        result: result,
+        fallbackCount: geminiFallbackExecutions,
+    });
 });
 exports.geminiCircuitBreaker.on('success', function () {
-  geminiTotalRequests++;
-  geminiSuccessfulRequests++;
-  logger_1.logger.debug('Gemini API call successful', {
-    totalRequests: geminiTotalRequests,
-    successRate: (geminiSuccessfulRequests / geminiTotalRequests) * 100,
-  });
+    geminiTotalRequests++;
+    geminiSuccessfulRequests++;
+    logger_1.logger.debug('Gemini API call successful', {
+        totalRequests: geminiTotalRequests,
+        successRate: (geminiSuccessfulRequests / geminiTotalRequests) * 100,
+    });
 });
 exports.geminiCircuitBreaker.on('failure', function (error) {
-  geminiTotalRequests++;
-  geminiFailedRequests++;
-  logger_1.logger.error('Gemini API call failed', {
-    error: serializeError(error),
-    totalRequests: geminiTotalRequests,
-    failureRate: (geminiFailedRequests / geminiTotalRequests) * 100,
-  });
+    geminiTotalRequests++;
+    geminiFailedRequests++;
+    logger_1.logger.error('Gemini API call failed', {
+        error: serializeError(error),
+        totalRequests: geminiTotalRequests,
+        failureRate: (geminiFailedRequests / geminiTotalRequests) * 100,
+    });
 });
 exports.geminiCircuitBreaker.on('timeout', function () {
-  logger_1.logger.warn('Gemini API call timed out', {
-    timeoutMs: geminiCircuitBreakerTimeout,
-  });
+    logger_1.logger.warn('Gemini API call timed out', {
+        timeoutMs: geminiCircuitBreakerTimeout,
+    });
 });
 exports.geminiCircuitBreaker.on('reject', function () {
-  logger_1.logger.warn('Gemini API call rejected (circuit open)', {
-    circuitState: exports.geminiCircuitBreaker.status.stats,
-    metrics: exports.geminiCircuitBreaker.stats,
-  });
+    logger_1.logger.warn('Gemini API call rejected (circuit open)', {
+        circuitState: exports.geminiCircuitBreaker.status.stats,
+        metrics: exports.geminiCircuitBreaker.stats,
+    });
 });
 /**
  * Serialize error objects for logging
  */
 function serializeError(error) {
-  if (!error) return { message: 'Unknown error (null or undefined)' };
-  // Handle Error objects
-  if (error instanceof Error) {
-    var serialized_1 = {
-      name: error.name,
-      message: error.message,
-      stack: error.stack,
-    };
-    // Include additional properties that might be on custom errors
-    Object.getOwnPropertyNames(error).forEach(function (prop) {
-      if (prop !== 'name' && prop !== 'message' && prop !== 'stack') {
-        serialized_1[prop] = error[prop];
-      }
-    });
-    return serialized_1;
-  }
-  // Handle non-Error objects
-  if (typeof error === 'object') {
-    try {
-      // Try to serialize the object
-      return JSON.parse(JSON.stringify(error));
-    } catch (e) {
-      // If circular references or other issues prevent serialization
-      return { message: 'Unserializable error object', type: typeof error };
+    if (!error)
+        return { message: 'Unknown error (null or undefined)' };
+    // Handle Error objects
+    if (error instanceof Error) {
+        var serialized_1 = {
+            name: error.name,
+            message: error.message,
+            stack: error.stack,
+        };
+        // Include additional properties that might be on custom errors
+        Object.getOwnPropertyNames(error).forEach(function (prop) {
+            if (prop !== 'name' && prop !== 'message' && prop !== 'stack') {
+                serialized_1[prop] = error[prop];
+            }
+        });
+        return serialized_1;
+    }
+    // Handle non-Error objects
+    if (typeof error === 'object') {
+        try {
+            // Try to serialize the object
+            return JSON.parse(JSON.stringify(error));
+        }
+        catch (e) {
+            // If circular references or other issues prevent serialization
+            return { message: 'Unserializable error object', type: typeof error };
+        }
     }
-  }
-  // Handle primitive error values
-  return { message: String(error), type: typeof error };
+    // Handle primitive error values
+    return { message: String(error), type: typeof error };
 }
 /**
  * Handle OpenAI API errors with detailed information
  */
 function handleOpenAIError(error) {
-  var _a, _b, _c, _d;
-  // Default error response
-  var errorResponse = {
-    error: 'OpenAI API Error',
-    message: 'An error occurred while generating the story',
-    status: 500,
-  };
-  // Check if it's an OpenAI API error
-  if (
-    (_a = error === null || error === void 0 ? void 0 : error.response) === null || _a === void 0
-      ? void 0
-      : _a.data
-  ) {
-    var openAIError = error.response.data.error;
-    if (openAIError) {
-      errorResponse = {
-        error: 'OpenAI Error: '.concat(openAIError.type),
-        message: openAIError.message,
-        status: error.response.status,
-      };
-      // Log specific error types for monitoring
-      logger_1.logger.error('OpenAI API specific error', {
-        type: openAIError.type,
-        message: openAIError.message,
-        param: openAIError.param,
-        code: openAIError.code,
-      });
-    }
-  }
-  // Handle network errors
-  else if (
-    (error === null || error === void 0 ? void 0 : error.code) === 'ECONNABORTED' ||
-    ((_b = error === null || error === void 0 ? void 0 : error.message) === null || _b === void 0
-      ? void 0
-      : _b.includes('timeout'))
-  ) {
-    errorResponse = {
-      error: 'OpenAI Timeout',
-      message: 'The request to OpenAI API timed out',
-      status: 504, // Gateway Timeout
-    };
-    logger_1.logger.error('OpenAI API timeout', { error: error.message });
-  }
-  // Handle server errors
-  else if (
-    ((_c = error === null || error === void 0 ? void 0 : error.message) === null || _c === void 0
-      ? void 0
-      : _c.includes('500')) ||
-    ((_d = error === null || error === void 0 ? void 0 : error.message) === null || _d === void 0
-      ? void 0
-      : _d.includes('server error'))
-  ) {
-    errorResponse = {
-      error: 'OpenAI Server Error',
-      message: 'OpenAI servers are experiencing issues',
-      status: 503, // Service Unavailable
+    var _a, _b, _c, _d;
+    // Default error response
+    var errorResponse = {
+        error: 'OpenAI API Error',
+        message: 'An error occurred while generating the story',
+        status: 500,
     };
-    logger_1.logger.error('OpenAI server error', { error: error.message });
-  }
-  // Handle other errors
-  else {
-    logger_1.logger.error('Unhandled OpenAI error', serializeError(error));
-  }
-  return errorResponse;
+    // Check if it's an OpenAI API error
+    if ((_a = error === null || error === void 0 ? void 0 : error.response) === null || _a === void 0 ? void 0 : _a.data) {
+        var openAIError = error.response.data.error;
+        if (openAIError) {
+            errorResponse = {
+                error: "OpenAI Error: ".concat(openAIError.type),
+                message: openAIError.message,
+                status: error.response.status,
+            };
+            // Log specific error types for monitoring
+            logger_1.logger.error('OpenAI API specific error', {
+                type: openAIError.type,
+                message: openAIError.message,
+                param: openAIError.param,
+                code: openAIError.code,
+            });
+        }
+    }
+    // Handle network errors
+    else if ((error === null || error === void 0 ? void 0 : error.code) === 'ECONNABORTED' || ((_b = error === null || error === void 0 ? void 0 : error.message) === null || _b === void 0 ? void 0 : _b.includes('timeout'))) {
+        errorResponse = {
+            error: 'OpenAI Timeout',
+            message: 'The request to OpenAI API timed out',
+            status: 504, // Gateway Timeout
+        };
+        logger_1.logger.error('OpenAI API timeout', { error: error.message });
+    }
+    // Handle server errors
+    else if (((_c = error === null || error === void 0 ? void 0 : error.message) === null || _c === void 0 ? void 0 : _c.includes('500')) || ((_d = error === null || error === void 0 ? void 0 : error.message) === null || _d === void 0 ? void 0 : _d.includes('server error'))) {
+        errorResponse = {
+            error: 'OpenAI Server Error',
+            message: 'OpenAI servers are experiencing issues',
+            status: 503, // Service Unavailable
+        };
+        logger_1.logger.error('OpenAI server error', { error: error.message });
+    }
+    // Handle other errors
+    else {
+        logger_1.logger.error('Unhandled OpenAI error', serializeError(error));
+    }
+    return errorResponse;
 }
 /**
  * Handle Gemini API errors with detailed information
  */
 function handleGeminiError(error) {
-  var _a, _b, _c, _d;
-  // Default error response
-  var errorResponse = {
-    error: 'Gemini API Error',
-    message: 'An error occurred while generating the story',
-    status: 500,
-  };
-  // Check if it's a Gemini API error with response data
-  if (
-    (_a = error === null || error === void 0 ? void 0 : error.response) === null || _a === void 0
-      ? void 0
-      : _a.data
-  ) {
-    var geminiError = error.response.data;
-    errorResponse = {
-      error: 'Gemini Error: '.concat(geminiError.error || 'Unknown'),
-      message: geminiError.message || 'An error occurred with the Gemini API',
-      status: error.response.status || 500,
-    };
-    // Log specific error types for monitoring
-    logger_1.logger.error('Gemini API specific error', {
-      error: geminiError.error,
-      message: geminiError.message,
-    });
-  }
-  // Handle network errors
-  else if (
-    (error === null || error === void 0 ? void 0 : error.code) === 'ECONNABORTED' ||
-    ((_b = error === null || error === void 0 ? void 0 : error.message) === null || _b === void 0
-      ? void 0
-      : _b.includes('timeout'))
-  ) {
-    errorResponse = {
-      error: 'Gemini Timeout',
-      message: 'The request to Gemini API timed out',
-      status: 504, // Gateway Timeout
+    var _a, _b, _c, _d;
+    // Default error response
+    var errorResponse = {
+        error: 'Gemini API Error',
+        message: 'An error occurred while generating the story',
+        status: 500,
     };
-    logger_1.logger.error('Gemini API timeout', { error: error.message });
-  }
-  // Handle server errors
-  else if (
-    ((_c = error === null || error === void 0 ? void 0 : error.message) === null || _c === void 0
-      ? void 0
-      : _c.includes('500')) ||
-    ((_d = error === null || error === void 0 ? void 0 : error.message) === null || _d === void 0
-      ? void 0
-      : _d.includes('server error'))
-  ) {
-    errorResponse = {
-      error: 'Gemini Server Error',
-      message: 'Gemini servers are experiencing issues',
-      status: 503, // Service Unavailable
-    };
-    logger_1.logger.error('Gemini server error', { error: error.message });
-  }
-  // Handle other errors
-  else {
-    logger_1.logger.error('Unhandled Gemini error', serializeError(error));
-  }
-  return errorResponse;
+    // Check if it's a Gemini API error with response data
+    if ((_a = error === null || error === void 0 ? void 0 : error.response) === null || _a === void 0 ? void 0 : _a.data) {
+        var geminiError = error.response.data;
+        errorResponse = {
+            error: "Gemini Error: ".concat(geminiError.error || 'Unknown'),
+            message: geminiError.message || 'An error occurred with the Gemini API',
+            status: error.response.status || 500,
+        };
+        // Log specific error types for monitoring
+        logger_1.logger.error('Gemini API specific error', {
+            error: geminiError.error,
+            message: geminiError.message,
+        });
+    }
+    // Handle network errors
+    else if ((error === null || error === void 0 ? void 0 : error.code) === 'ECONNABORTED' || ((_b = error === null || error === void 0 ? void 0 : error.message) === null || _b === void 0 ? void 0 : _b.includes('timeout'))) {
+        errorResponse = {
+            error: 'Gemini Timeout',
+            message: 'The request to Gemini API timed out',
+            status: 504, // Gateway Timeout
+        };
+        logger_1.logger.error('Gemini API timeout', { error: error.message });
+    }
+    // Handle server errors
+    else if (((_c = error === null || error === void 0 ? void 0 : error.message) === null || _c === void 0 ? void 0 : _c.includes('500')) || ((_d = error === null || error === void 0 ? void 0 : error.message) === null || _d === void 0 ? void 0 : _d.includes('server error'))) {
+        errorResponse = {
+            error: 'Gemini Server Error',
+            message: 'Gemini servers are experiencing issues',
+            status: 503, // Service Unavailable
+        };
+        logger_1.logger.error('Gemini server error', { error: error.message });
+    }
+    // Handle other errors
+    else {
+        logger_1.logger.error('Unhandled Gemini error', serializeError(error));
+    }
+    return errorResponse;
 }
 /**
  * Validate that the OpenAI API key is set and has a valid format
  */
 function validateApiKey(apiKey) {
-  if (!apiKey) {
-    logger_1.logger.error('OpenAI API key is not set');
-    return false;
-  }
-  // Check for valid key format (both standard sk- and project sk-proj- formats)
-  if (!apiKey.startsWith('sk-')) {
-    logger_1.logger.error('OpenAI API key has invalid format - must start with sk-');
-    return false;
-  }
-  // Additional validation for key length
-  if (apiKey.length < 20) {
-    logger_1.logger.error('OpenAI API key is too short');
-    return false;
-  }
-  // Log key format type for debugging
-  var keyType = apiKey.startsWith('sk-proj-') ? 'project' : 'standard';
-  var maskedKey =
-    keyType === 'project'
-      ? apiKey.substring(0, 8) + '...' + apiKey.substring(apiKey.length - 3)
-      : apiKey.substring(0, 5) + '...' + apiKey.substring(apiKey.length - 3);
-  logger_1.logger.debug('Using OpenAI '.concat(keyType, ' API key: ').concat(maskedKey));
-  logger_1.logger.debug('API key length: '.concat(apiKey.length));
-  return true;
+    if (!apiKey) {
+        logger_1.logger.error('OpenAI API key is not set');
+        return false;
+    }
+    // Check for valid key format (both standard sk- and project sk-proj- formats)
+    if (!apiKey.startsWith('sk-')) {
+        logger_1.logger.error('OpenAI API key has invalid format - must start with sk-');
+        return false;
+    }
+    // Additional validation for key length
+    if (apiKey.length < 20) {
+        logger_1.logger.error('OpenAI API key is too short');
+        return false;
+    }
+    // Log key format type for debugging
+    var keyType = apiKey.startsWith('sk-proj-') ? 'project' : 'standard';
+    var maskedKey = keyType === 'project'
+        ? apiKey.substring(0, 8) + '...' + apiKey.substring(apiKey.length - 3)
+        : apiKey.substring(0, 5) + '...' + apiKey.substring(apiKey.length - 3);
+    logger_1.logger.debug("Using OpenAI ".concat(keyType, " API key: ").concat(maskedKey));
+    logger_1.logger.debug("API key length: ".concat(apiKey.length));
+    return true;
 }
 /**
  * Validate that the Gemini API key is set and has a valid format
  */
 function validateGeminiApiKey(apiKey) {
-  if (!apiKey) {
-    logger_1.logger.error('Gemini API key is not set');
-    return false;
-  }
-  // Gemini API keys are typically longer than 20 characters
-  if (apiKey.length < 20) {
-    logger_1.logger.error('Gemini API key appears to be invalid (too short)');
-    return false;
-  }
-  return true;
+    if (!apiKey) {
+        logger_1.logger.error('Gemini API key is not set');
+        return false;
+    }
+    // Gemini API keys are typically longer than 20 characters
+    if (apiKey.length < 20) {
+        logger_1.logger.error('Gemini API key appears to be invalid (too short)');
+        return false;
+    }
+    return true;
 }
 /**
- * Utility function to import the generateFallbackStory function from fallback-stories
+ * Utility function to import the generateFallbackStory function from personalizationEngine
  * This avoids circular dependencies
  */
 function generateFallbackStoryUtil(input) {
-  // Import from the fallback-stories module instead of personalizationEngine
-  var generateFallbackStory = require('./fallback-stories').generateFallbackStory;
-  return generateFallbackStory(input);
+    // Import dynamically to avoid circular dependencies
+    var generateFallbackStory = require('../services/personalizationEngine').generateFallbackStory;
+    return generateFallbackStory(input);
 }
diff --git a/src/utils/error-handlers.ts b/src/utils/error-handlers.ts
index 20441911..7f0c0b07 100644
--- a/src/utils/error-handlers.ts
+++ b/src/utils/error-handlers.ts
@@ -1,217 +1,324 @@
 import { logger } from './logger';
+import CircuitBreaker = require('opossum');
+import { StoryInput } from '../services/personalizationEngine';
 
 /**
- * Circuit breaker implementation for API calls
+ * Configure the circuit breaker for OpenAI API calls
+ *
+ * This implementation uses the Opossum library to provide robust circuit breaking
+ * capabilities for API calls. It includes:
+ * - Configurable failure thresholds and timeouts
+ * - Event-based monitoring and logging
+ * - Graceful fallback mechanisms
+ * - Automatic recovery testing
  */
-export class CircuitBreaker {
-  private failures: number = 0;
-  private lastFailureTime: number = 0;
-  private state: 'CLOSED' | 'OPEN' | 'HALF_OPEN' = 'CLOSED';
-  private readonly failureThreshold: number;
-  private readonly resetTimeout: number;
-
-  constructor(failureThreshold: number = 3, resetTimeout: number = 30000) {
-    this.failureThreshold = failureThreshold;
-    this.resetTimeout = resetTimeout;
-  }
+const openAICircuitBreakerTimeout = 45000; // 45 seconds
+const geminiCircuitBreakerTimeout = 45000; // 45 seconds
 
-  public async execute<T>(fn: () => Promise<T>, fallbackFn: () => T): Promise<T> {
-    if (this.state === 'OPEN') {
-      // Check if it's time to try again
-      const now = Date.now();
-      if (now - this.lastFailureTime > this.resetTimeout) {
-        this.state = 'HALF_OPEN';
-        logger.info('Circuit breaker state changed to HALF_OPEN');
-      } else {
-        logger.warn('Circuit breaker is OPEN, using fallback', {
-          failures: this.failures,
-          lastFailure: new Date(this.lastFailureTime).toISOString(),
-          resetTime: new Date(this.lastFailureTime + this.resetTimeout).toISOString(),
-        });
-        return fallbackFn();
-      }
-    }
+export const openAICircuitBreaker = new CircuitBreaker(async (fn: Function) => await fn(), {
+  resetTimeout: 120000, // 2 minutes before trying again
+  timeout: openAICircuitBreakerTimeout, // 45 seconds before timing out a request
+  errorThresholdPercentage: 50, // 50% of requests must fail to open circuit
+  rollingCountTimeout: 60000, // 1 minute window for failure percentage calculation
+  rollingCountBuckets: 10, // Split the rolling window into 10 buckets
+  capacity: 10, // Maximum concurrent requests
+});
 
-    try {
-      const result = await fn();
-      if (this.state === 'HALF_OPEN') {
-        this.reset();
-        logger.info('Circuit breaker reset to CLOSED after successful call');
-      }
-      return result;
-    } catch (error) {
-      this.recordFailure();
-      logger.error('Circuit breaker recorded failure', {
-        failures: this.failures,
-        threshold: this.failureThreshold,
-        state: this.state,
-      });
-      return fallbackFn();
-    }
-  }
+/**
+ * Configure the circuit breaker for Gemini API calls
+ *
+ * This implementation uses the same Opossum library with similar settings
+ * to the OpenAI circuit breaker for consistency.
+ */
+export const geminiCircuitBreaker = new CircuitBreaker(async (fn: Function) => await fn(), {
+  resetTimeout: 120000, // 2 minutes before trying again
+  timeout: geminiCircuitBreakerTimeout, // 45 seconds before timing out a request
+  errorThresholdPercentage: 50, // 50% of requests must fail to open circuit
+  rollingCountTimeout: 60000, // 1 minute window for failure percentage calculation
+  rollingCountBuckets: 10, // Split the rolling window into 10 buckets
+  capacity: 10, // Maximum concurrent requests
+});
 
-  private recordFailure(): void {
-    this.failures++;
-    this.lastFailureTime = Date.now();
+// Track circuit breaker metrics for OpenAI
+let totalRequests = 0;
+let successfulRequests = 0;
+let failedRequests = 0;
+let fallbackExecutions = 0;
 
-    if (this.failures >= this.failureThreshold) {
-      this.state = 'OPEN';
-      logger.warn('Circuit breaker state changed to OPEN', {
-        failures: this.failures,
-        threshold: this.failureThreshold,
-      });
-    }
-  }
+// Track circuit breaker metrics for Gemini
+let geminiTotalRequests = 0;
+let geminiSuccessfulRequests = 0;
+let geminiFailedRequests = 0;
+let geminiFallbackExecutions = 0;
 
-  private reset(): void {
-    this.failures = 0;
-    this.state = 'CLOSED';
-  }
+// Log circuit breaker events with enhanced information for OpenAI
+openAICircuitBreaker.on('open', () => {
+  logger.warn('OpenAI circuit breaker opened - too many failures', {
+    metrics: openAICircuitBreaker.stats,
+    successRate: successfulRequests > 0 ? (successfulRequests / totalRequests) * 100 : 0,
+  });
+});
 
-  public getState(): string {
-    return this.state;
-  }
+openAICircuitBreaker.on('close', () => {
+  logger.info('OpenAI circuit breaker closed - service recovered', {
+    metrics: openAICircuitBreaker.stats,
+  });
+});
 
-  public getFailures(): number {
-    return this.failures;
-  }
-}
+openAICircuitBreaker.on('halfOpen', () => {
+  logger.info('OpenAI circuit breaker half-open - testing service', {
+    metrics: openAICircuitBreaker.stats,
+  });
+});
 
-// Create a singleton instance for the OpenAI API
-export const openAICircuitBreaker = new CircuitBreaker(3, 60000); // 3 failures, 1 minute timeout
+openAICircuitBreaker.on('fallback', (result) => {
+  fallbackExecutions++;
+  logger.warn('OpenAI circuit breaker fallback executed', {
+    result,
+    fallbackCount: fallbackExecutions,
+  });
+});
 
-/**
- * Type definition for OpenAI error responses
- */
-export type OpenAIErrorResponse = {
-  error: string;
-  message: string;
-  status?: number;
-  details?: unknown;
-};
+openAICircuitBreaker.on('success', () => {
+  totalRequests++;
+  successfulRequests++;
+  logger.debug('OpenAI API call successful', {
+    totalRequests,
+    successRate: (successfulRequests / totalRequests) * 100,
+  });
+});
+
+openAICircuitBreaker.on('failure', (error) => {
+  totalRequests++;
+  failedRequests++;
+  logger.error('OpenAI API call failed', {
+    error: serializeError(error),
+    totalRequests,
+    failureRate: (failedRequests / totalRequests) * 100,
+  });
+});
+
+openAICircuitBreaker.on('timeout', () => {
+  logger.warn('OpenAI API call timed out', {
+    timeoutMs: openAICircuitBreakerTimeout,
+  });
+});
+
+openAICircuitBreaker.on('reject', () => {
+  logger.warn('OpenAI API call rejected (circuit open)', {
+    circuitState: openAICircuitBreaker.status.stats,
+    metrics: openAICircuitBreaker.stats,
+  });
+});
+
+// Log circuit breaker events with enhanced information for Gemini
+geminiCircuitBreaker.on('open', () => {
+  logger.warn('Gemini circuit breaker opened - too many failures', {
+    metrics: geminiCircuitBreaker.stats,
+    successRate:
+      geminiSuccessfulRequests > 0 ? (geminiSuccessfulRequests / geminiTotalRequests) * 100 : 0,
+  });
+});
+
+geminiCircuitBreaker.on('close', () => {
+  logger.info('Gemini circuit breaker closed - service recovered', {
+    metrics: geminiCircuitBreaker.stats,
+  });
+});
+
+geminiCircuitBreaker.on('halfOpen', () => {
+  logger.info('Gemini circuit breaker half-open - testing service', {
+    metrics: geminiCircuitBreaker.stats,
+  });
+});
+
+geminiCircuitBreaker.on('fallback', (result) => {
+  geminiFallbackExecutions++;
+  logger.warn('Gemini circuit breaker fallback executed', {
+    result,
+    fallbackCount: geminiFallbackExecutions,
+  });
+});
+
+geminiCircuitBreaker.on('success', () => {
+  geminiTotalRequests++;
+  geminiSuccessfulRequests++;
+  logger.debug('Gemini API call successful', {
+    totalRequests: geminiTotalRequests,
+    successRate: (geminiSuccessfulRequests / geminiTotalRequests) * 100,
+  });
+});
+
+geminiCircuitBreaker.on('failure', (error) => {
+  geminiTotalRequests++;
+  geminiFailedRequests++;
+  logger.error('Gemini API call failed', {
+    error: serializeError(error),
+    totalRequests: geminiTotalRequests,
+    failureRate: (geminiFailedRequests / geminiTotalRequests) * 100,
+  });
+});
+
+geminiCircuitBreaker.on('timeout', () => {
+  logger.warn('Gemini API call timed out', {
+    timeoutMs: geminiCircuitBreakerTimeout,
+  });
+});
+
+geminiCircuitBreaker.on('reject', () => {
+  logger.warn('Gemini API call rejected (circuit open)', {
+    circuitState: geminiCircuitBreaker.status.stats,
+    metrics: geminiCircuitBreaker.stats,
+  });
+});
 
 /**
- * Safely serialize error objects for logging
+ * Serialize error objects for logging
  */
-export function serializeError(error: unknown): Record<string, unknown> {
+export function serializeError(error: any): any {
+  if (!error) return { message: 'Unknown error (null or undefined)' };
+
+  // Handle Error objects
   if (error instanceof Error) {
-    return {
+    const serialized: any = {
       name: error.name,
       message: error.message,
       stack: error.stack,
     };
+
+    // Include additional properties that might be on custom errors
+    Object.getOwnPropertyNames(error).forEach((prop) => {
+      if (prop !== 'name' && prop !== 'message' && prop !== 'stack') {
+        serialized[prop] = (error as any)[prop];
+      }
+    });
+
+    return serialized;
   }
 
-  if (typeof error === 'object' && error !== null) {
+  // Handle non-Error objects
+  if (typeof error === 'object') {
     try {
-      // Try to convert to a plain object
+      // Try to serialize the object
       return JSON.parse(JSON.stringify(error));
     } catch (e) {
-      return { error: 'Failed to serialize error object', originalError: String(error) };
+      // If circular references or other issues prevent serialization
+      return { message: 'Unserializable error object', type: typeof error };
     }
   }
 
-  return { error: String(error) };
+  // Handle primitive error values
+  return { message: String(error), type: typeof error };
 }
 
 /**
- * Generate a fallback story when OpenAI API fails
+ * Handle OpenAI API errors with detailed information
  */
-export function generateFallbackStoryUtil(params: any): string {
-  try {
-    const {
-      childName = 'child',
-      theme = 'adventure',
-      mainCharacterTraits = '',
-      supportingCharacterName = 'friend',
-    } = params;
-
-    logger.info('Generating fallback story', { childName, theme });
-
-    // Create a more dynamic story based on available parameters
-    let story = `
-      Once upon a time, there was a brave child named ${childName} who loved ${theme}s.
-      
-      One day, ${childName} discovered a magical book in the attic. When opened, the book 
-      transported ${childName} to a fantastic world filled with wonders and excitement.
-      
-      In this world, ${childName} met ${supportingCharacterName || 'friendly creatures'} who needed help. Using creativity 
-      ${mainCharacterTraits ? `and ${mainCharacterTraits}` : 'and courage'}, ${childName} solved their problems and became a hero.
-      
-      After an amazing journey, ${childName} returned home with wonderful memories and 
-      lessons about friendship, bravery, and the power of imagination.
-      
-      The end.
-    `.trim();
-
-    return story;
-  } catch (error) {
-    // Ultimate fallback in case even our fallback generation fails
-    logger.error('Error generating fallback story', serializeError(error));
-    return `Once upon a time, there was a child who had a wonderful adventure. The end.`;
+export function handleOpenAIError(error: any) {
+  // Default error response
+  let errorResponse = {
+    error: 'OpenAI API Error',
+    message: 'An error occurred while generating the story',
+    status: 500,
+  };
+
+  // Check if it's an OpenAI API error
+  if (error?.response?.data) {
+    const { error: openAIError } = error.response.data;
+
+    if (openAIError) {
+      errorResponse = {
+        error: `OpenAI Error: ${openAIError.type}`,
+        message: openAIError.message,
+        status: error.response.status,
+      };
+
+      // Log specific error types for monitoring
+      logger.error('OpenAI API specific error', {
+        type: openAIError.type,
+        message: openAIError.message,
+        param: openAIError.param,
+        code: openAIError.code,
+      });
+    }
+  }
+  // Handle network errors
+  else if (error?.code === 'ECONNABORTED' || error?.message?.includes('timeout')) {
+    errorResponse = {
+      error: 'OpenAI Timeout',
+      message: 'The request to OpenAI API timed out',
+      status: 504, // Gateway Timeout
+    };
+    logger.error('OpenAI API timeout', { error: error.message });
+  }
+  // Handle server errors
+  else if (error?.message?.includes('500') || error?.message?.includes('server error')) {
+    errorResponse = {
+      error: 'OpenAI Server Error',
+      message: 'OpenAI servers are experiencing issues',
+      status: 503, // Service Unavailable
+    };
+    logger.error('OpenAI server error', { error: error.message });
   }
+  // Handle other errors
+  else {
+    logger.error('Unhandled OpenAI error', serializeError(error));
+  }
+
+  return errorResponse;
 }
 
 /**
- * Handle OpenAI API errors with specific responses
+ * Handle Gemini API errors with detailed information
  */
-export function handleOpenAIError(error: unknown): OpenAIErrorResponse {
-  try {
-    const serializedError = serializeError(error);
-    logger.error('OpenAI API error', serializedError);
-
-    // Extract status code if available
-    const status =
-      (serializedError.status as number) ||
-      ((serializedError.error as any)?.status as number) ||
-      500;
-
-    // Extract error message if available
-    const errorMessage =
-      (serializedError.message as string) ||
-      ((serializedError.error as any)?.message as string) ||
-      'Unknown error';
-
-    // Handle specific error types
-    switch (status) {
-      case 401:
-        return {
-          error: 'OpenAI API authentication error',
-          message: 'Invalid API key or unauthorized access',
-          status: 500, // We return 500 to avoid exposing auth details
-          details: serializedError,
-        };
-      case 429:
-        return {
-          error: 'OpenAI API rate limit exceeded',
-          message: 'Too many requests, please try again later',
-          status: 429,
-          details: serializedError,
-        };
-      case 500:
-        return {
-          error: 'OpenAI API server error',
-          message: 'The AI service is currently unavailable',
-          status: 503, // Service Unavailable
-          details: serializedError,
-        };
-      default:
-        return {
-          error: 'OpenAI API error',
-          message: errorMessage || 'An unexpected error occurred',
-          status: 500,
-          details: serializedError,
-        };
-    }
-  } catch (error) {
-    // Return a generic error response if error handling fails
-    logger.error('Error handling OpenAI API error', serializeError(error));
-    return {
-      error: 'OpenAI API error',
-      message: 'An unknown error occurred',
-      status: 500,
+export function handleGeminiError(error: any) {
+  // Default error response
+  let errorResponse = {
+    error: 'Gemini API Error',
+    message: 'An error occurred while generating the story',
+    status: 500,
+  };
+
+  // Check if it's a Gemini API error with response data
+  if (error?.response?.data) {
+    const geminiError = error.response.data;
+
+    errorResponse = {
+      error: `Gemini Error: ${geminiError.error || 'Unknown'}`,
+      message: geminiError.message || 'An error occurred with the Gemini API',
+      status: error.response.status || 500,
     };
+
+    // Log specific error types for monitoring
+    logger.error('Gemini API specific error', {
+      error: geminiError.error,
+      message: geminiError.message,
+    });
   }
+  // Handle network errors
+  else if (error?.code === 'ECONNABORTED' || error?.message?.includes('timeout')) {
+    errorResponse = {
+      error: 'Gemini Timeout',
+      message: 'The request to Gemini API timed out',
+      status: 504, // Gateway Timeout
+    };
+    logger.error('Gemini API timeout', { error: error.message });
+  }
+  // Handle server errors
+  else if (error?.message?.includes('500') || error?.message?.includes('server error')) {
+    errorResponse = {
+      error: 'Gemini Server Error',
+      message: 'Gemini servers are experiencing issues',
+      status: 503, // Service Unavailable
+    };
+    logger.error('Gemini server error', { error: error.message });
+  }
+  // Handle other errors
+  else {
+    logger.error('Unhandled Gemini error', serializeError(error));
+  }
+
+  return errorResponse;
 }
 
 /**
@@ -225,7 +332,13 @@ export function validateApiKey(apiKey?: string): boolean {
 
   // Check for valid key format (both standard sk- and project sk-proj- formats)
   if (!apiKey.startsWith('sk-')) {
-    logger.error('OpenAI API key has invalid format');
+    logger.error('OpenAI API key has invalid format - must start with sk-');
+    return false;
+  }
+
+  // Additional validation for key length
+  if (apiKey.length < 20) {
+    logger.error('OpenAI API key is too short');
     return false;
   }
 
@@ -237,5 +350,55 @@ export function validateApiKey(apiKey?: string): boolean {
       : apiKey.substring(0, 5) + '...' + apiKey.substring(apiKey.length - 3);
 
   logger.debug(`Using OpenAI ${keyType} API key: ${maskedKey}`);
+  logger.debug(`API key length: ${apiKey.length}`);
+
+  return true;
+}
+
+/**
+ * Validate that the Gemini API key is set and has a valid format
+ */
+export function validateGeminiApiKey(apiKey?: string): boolean {
+  if (!apiKey) {
+    logger.error('Gemini API key is not set');
+    return false;
+  }
+
+  // Gemini API keys are typically longer than 20 characters
+  if (apiKey.length < 20) {
+    logger.error('Gemini API key appears to be invalid (too short)');
+    return false;
+  }
+
   return true;
 }
+
+/**
+ * Utility function to import the generateFallbackStory function from personalizationEngine
+ * This avoids circular dependencies
+ */
+export function generateFallbackStoryUtil(input: StoryInput): string {
+  // Import dynamically to avoid circular dependencies
+  const { generateFallbackStory } = require('../services/personalizationEngine');
+  return generateFallbackStory(input);
+}
+
+/**
+ * Type definition for OpenAI error responses
+ */
+export type OpenAIErrorResponse = {
+  error: string;
+  message: string;
+  status?: number;
+  details?: unknown;
+};
+
+/**
+ * Type definition for Gemini error responses
+ */
+export interface GeminiErrorResponse {
+  error: string;
+  message: string;
+  status?: number;
+  details?: unknown;
+}
diff --git a/src/utils/fallback-generator.js b/src/utils/fallback-generator.js
index dda4a51e..be17ff21 100644
--- a/src/utils/fallback-generator.js
+++ b/src/utils/fallback-generator.js
@@ -1,7 +1,7 @@
-'use strict';
-Object.defineProperty(exports, '__esModule', { value: true });
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
 exports.generateFallbackStory = generateFallbackStory;
-var logger_1 = require('./logger');
+var logger_1 = require("./logger");
 /**
  * Generate a fallback story when the OpenAI API call fails
  *
@@ -13,26 +13,26 @@ var logger_1 = require('./logger');
  * @returns Generated fallback story content
  */
 function generateFallbackStory(input) {
-  logger_1.logger.info('Generating fallback story', {
-    childName: input.childName,
-    theme: input.theme,
-  });
-  // Determine pronouns based on gender
-  var pronouns = input.gender === 'female' ? 'she/her' : 'he/him';
-  var pronoun = pronouns.split('/')[0];
-  var possessivePronoun = input.gender === 'female' ? 'her' : 'his';
-  // Get a random template based on the theme
-  var template = getTemplateForTheme(input.theme);
-  // Replace placeholders with personalized content
-  var story = template
-    .replace(/\{childName\}/g, input.childName)
-    .replace(/\{pronoun\}/g, pronoun)
-    .replace(/\{possessivePronoun\}/g, possessivePronoun)
-    .replace(/\{theme\}/g, input.theme);
-  logger_1.logger.debug('Fallback story generated', {
-    storyLength: story.length,
-  });
-  return story;
+    logger_1.logger.info('Generating fallback story', {
+        childName: input.childName,
+        theme: input.theme,
+    });
+    // Determine pronouns based on gender
+    var pronouns = input.gender === 'female' ? 'she/her' : 'he/him';
+    var pronoun = pronouns.split('/')[0];
+    var possessivePronoun = input.gender === 'female' ? 'her' : 'his';
+    // Get a random template based on the theme
+    var template = getTemplateForTheme(input.theme);
+    // Replace placeholders with personalized content
+    var story = template
+        .replace(/\{childName\}/g, input.childName)
+        .replace(/\{pronoun\}/g, pronoun)
+        .replace(/\{possessivePronoun\}/g, possessivePronoun)
+        .replace(/\{theme\}/g, input.theme);
+    logger_1.logger.debug('Fallback story generated', {
+        storyLength: story.length,
+    });
+    return story;
 }
 /**
  * Get a story template based on the theme
@@ -41,31 +41,31 @@ function generateFallbackStory(input) {
  * @returns Story template with placeholders
  */
 function getTemplateForTheme(theme) {
-  var templates = {
-    adventure: [
-      'Once upon a time, there was a brave explorer named {childName}. {pronoun} lived in a small village near a mysterious forest. One day, {childName} decided to venture into the forest to discover its secrets. As {pronoun} walked deeper into the woods, {pronoun} found a magical map that showed the way to a hidden treasure. With determination in {possessivePronoun} heart, {childName} followed the map through mountains, rivers, and caves. Along the way, {pronoun} made friends with forest animals who helped {possessivePronoun} overcome obstacles. Finally, {childName} found the treasure - a beautiful crystal that glowed with all the colors of the rainbow. But the real treasure was the adventure itself and the friends {pronoun} made along the way. When {childName} returned home, everyone celebrated {possessivePronoun} bravery and listened to {possessivePronoun} amazing adventure stories.',
-      '{childName} was always curious about what lay beyond the mountains near {possessivePronoun} home. One sunny morning, {pronoun} packed a small backpack with snacks, a water bottle, and {possessivePronoun} favorite compass. "I\'m going on an adventure!" {pronoun} announced to {possessivePronoun} parents. With their blessing, {childName} set off toward the mountains. The path was winding and sometimes steep, but {childName}\'s determination kept {possessivePronoun} going. Along the way, {pronoun} met a friendly fox who decided to join {possessivePronoun} journey. Together, they discovered a hidden valley with a crystal-clear lake and flowers of every color imaginable. {childName} and the fox spent the day exploring the valley, swimming in the lake, and making flower crowns. As the sun began to set, {childName} knew it was time to return home. {pronoun} promised the fox {pronoun} would return soon for another adventure. That night, as {childName} drifted off to sleep, {pronoun} dreamed of all the adventures yet to come.',
-    ],
-    fantasy: [
-      "In a magical kingdom far away, there lived a young {theme} enthusiast named {childName}. {pronoun} had always dreamed of having magical powers. One night, as {childName} was gazing at the stars from {possessivePronoun} window, a shooting star streaked across the sky. {childName} closed {possessivePronoun} eyes and made a wish. The next morning, {pronoun} discovered {pronoun} could make small objects float! {childName} was overjoyed and spent the day practicing {possessivePronoun} new magical ability. {pronoun} used {possessivePronoun} power to help others - retrieving toys from high shelves for younger children and helping an elderly neighbor pick apples from tall trees. The wise wizard of the kingdom heard about {childName}'s good deeds and invited {possessivePronoun} to the royal academy of magic. There, {childName} learned that true magic comes not from special powers, but from using your gifts to bring joy to others.",
-      'Once upon a time in the enchanted forest of Whisperwood, there lived a kind-hearted child named {childName}. What made {childName} special was {possessivePronoun} ability to understand the language of animals. Every morning, {pronoun} would wake up to the cheerful conversations of birds outside {possessivePronoun} window. One day, {childName} heard the animals talking about a problem - the ancient magic tree at the heart of the forest was losing its glow. Without its light, the forest would lose its magic. {childName} decided to help. Guided by a wise old owl, {pronoun} journeyed to the magic tree. The tree told {childName} that it needed the sound of laughter and joy to regain its strength. So {childName} organized a grand festival where animals and forest spirits gathered to share stories, sing songs, and play games. The forest echoed with happiness, and slowly, the magic tree began to glow again, brighter than ever before. From that day on, {childName} was known as the Guardian of Whisperwood, and {pronoun} continued to bring joy to the enchanted forest.',
-    ],
-    science: [
-      '{childName} had always been fascinated by the stars and planets. In {possessivePronoun} room, {pronoun} had posters of galaxies and a telescope by the window. One evening, while looking through {possessivePronoun} telescope, {childName} spotted something unusual - a star that seemed to be changing colors! {pronoun} carefully recorded {possessivePronoun} observations in a notebook. The next day, {childName} visited the local observatory to share {possessivePronoun} discovery with Dr. Martinez, an astronomer. Dr. Martinez was impressed by {childName}\'s detailed notes and together they continued to observe the color-changing star. After weeks of research, they discovered it was actually a new type of pulsar that had never been documented before! The discovery was published in a science journal, and the pulsar was named "{childName}\'s Star." This experience inspired {childName} to study astronomy in school, knowing that with curiosity and careful observation, anyone can contribute to scientific discovery.',
-      "In {childName}'s bedroom, there was a special corner filled with rocks, magnets, test tubes, and a microscope - {possessivePronoun} very own science lab. One rainy Saturday, {childName} decided to experiment with growing crystals. {pronoun} carefully mixed the solution according to the instructions in {possessivePronoun} science book and placed it in a quiet spot. Each day, {childName} observed the jar, taking notes and drawings of the changes. Slowly, beautiful crystal formations began to appear, sparkling like tiny jewels. {childName}'s parents were amazed by {possessivePronoun} patience and scientific approach. When {pronoun} brought the crystals to school for Science Day, everyone was impressed. {childName}'s teacher suggested {pronoun} create a guide to help other children grow their own crystals. {childName} worked hard on the guide, including all {possessivePronoun} observations and tips. The school published it in their newsletter, and soon many children in town were growing crystals, all thanks to {childName}'s scientific curiosity and willingness to share knowledge.",
-    ],
-    animals: [
-      "{childName} had a special talent for understanding animals. One day while walking in the park, {pronoun} heard a soft whimpering coming from a bush. {childName} carefully looked inside and found a small, frightened puppy with a hurt paw. \"It's okay, little one,\" {childName} said gently. \"I'll help you.\" {pronoun} carefully picked up the puppy and took it home. {childName}'s parents helped clean and bandage the puppy's paw, and they put up notices around the neighborhood to find its owner. Days passed, but no one claimed the puppy. The puppy, whom {childName} had named Buddy, was getting stronger every day and followed {childName} everywhere. {childName}'s parents saw how much the two had bonded and agreed that Buddy could stay as part of their family. {childName} promised to take excellent care of Buddy forever. From that day on, {childName} and Buddy were inseparable friends, and {childName}'s kindness toward animals inspired others in the neighborhood to help animals in need.",
-      "Every morning, {childName} would sit by the window with a bird feeder {pronoun} had made with {possessivePronoun} parents. {pronoun} kept a notebook where {pronoun} drew pictures of all the different birds that visited. One day, {childName} noticed a small bird with a bright blue wing that couldn't fly properly. Carefully, {childName} went outside and found that the bird had a small thorn stuck in its wing. With gentle hands and a brave heart, {childName} carefully removed the thorn. {pronoun} made a small, comfortable nest in a shoebox and placed it in a safe spot in the garden. Each day, {childName} left food and water for the blue-winged bird and watched as it grew stronger. After a week, the bird was able to fly again. Before it flew away, it sang a beautiful song that seemed just for {childName}. From that day on, the blue-winged bird would return to {childName}'s garden every spring, bringing joy and reminding everyone of how a small act of kindness can make a big difference.",
-    ],
-    sports: [
-      "{childName} loved playing soccer more than anything else. Every day after school, {pronoun} would practice in the backyard, dribbling between cones and shooting at a small goal. {childName}'s dream was to join the school soccer team, but {pronoun} was nervous about the tryouts. When the day finally came, {childName} took a deep breath and remembered all {possessivePronoun} practice. {pronoun} dribbled skillfully, passed accurately, and even scored a goal! The coach was impressed with {childName}'s skills and teamwork. Not only did {childName} make the team, but {pronoun} was also chosen to be the team captain! {childName} learned that with dedication, practice, and courage, you can achieve your goals. Throughout the season, {pronoun} helped teammates improve their skills too, showing that a true champion lifts others up. {childName}'s team didn't win every game, but they always played with heart, and that made {childName} prouder than any trophy ever could.",
-      "{childName} had always been fascinated by swimming. Whenever {pronoun} saw water - whether it was a pool, lake, or even a puddle - {possessivePronoun} eyes would light up with excitement. {childName}'s parents enrolled {possessivePronoun} in swimming lessons at the local community center. At first, {childName} was a bit afraid of putting {possessivePronoun} face underwater, but with encouragement from {possessivePronoun} instructor, {pronoun} gradually overcame this fear. Week after week, {childName} practiced kicking, arm strokes, and breathing techniques. {pronoun} was determined to improve. By the end of the summer, {childName} had become so skilled that {pronoun} was invited to join the junior swim team! On the day of {possessivePronoun} first race, {childName} was nervous but excited. When the whistle blew, {pronoun} dived into the water and swam with all {possessivePronoun} might. {childName} didn't come in first place, but {pronoun} completed the race with {possessivePronoun} best time ever! As {pronoun} climbed out of the pool, {possessivePronoun} coach and teammates cheered loudly. {childName} learned that the joy of sports comes not just from winning, but from challenging yourself and improving a little bit each day.",
-    ],
-  };
-  // Default to adventure if theme not found
-  var themeTemplates = templates[theme.toLowerCase()] || templates.adventure;
-  // Get a random template from the available ones for this theme
-  var randomIndex = Math.floor(Math.random() * themeTemplates.length);
-  return themeTemplates[randomIndex];
+    var templates = {
+        adventure: [
+            'Once upon a time, there was a brave explorer named {childName}. {pronoun} lived in a small village near a mysterious forest. One day, {childName} decided to venture into the forest to discover its secrets. As {pronoun} walked deeper into the woods, {pronoun} found a magical map that showed the way to a hidden treasure. With determination in {possessivePronoun} heart, {childName} followed the map through mountains, rivers, and caves. Along the way, {pronoun} made friends with forest animals who helped {possessivePronoun} overcome obstacles. Finally, {childName} found the treasure - a beautiful crystal that glowed with all the colors of the rainbow. But the real treasure was the adventure itself and the friends {pronoun} made along the way. When {childName} returned home, everyone celebrated {possessivePronoun} bravery and listened to {possessivePronoun} amazing adventure stories.',
+            '{childName} was always curious about what lay beyond the mountains near {possessivePronoun} home. One sunny morning, {pronoun} packed a small backpack with snacks, a water bottle, and {possessivePronoun} favorite compass. "I\'m going on an adventure!" {pronoun} announced to {possessivePronoun} parents. With their blessing, {childName} set off toward the mountains. The path was winding and sometimes steep, but {childName}\'s determination kept {possessivePronoun} going. Along the way, {pronoun} met a friendly fox who decided to join {possessivePronoun} journey. Together, they discovered a hidden valley with a crystal-clear lake and flowers of every color imaginable. {childName} and the fox spent the day exploring the valley, swimming in the lake, and making flower crowns. As the sun began to set, {childName} knew it was time to return home. {pronoun} promised the fox {pronoun} would return soon for another adventure. That night, as {childName} drifted off to sleep, {pronoun} dreamed of all the adventures yet to come.',
+        ],
+        fantasy: [
+            "In a magical kingdom far away, there lived a young {theme} enthusiast named {childName}. {pronoun} had always dreamed of having magical powers. One night, as {childName} was gazing at the stars from {possessivePronoun} window, a shooting star streaked across the sky. {childName} closed {possessivePronoun} eyes and made a wish. The next morning, {pronoun} discovered {pronoun} could make small objects float! {childName} was overjoyed and spent the day practicing {possessivePronoun} new magical ability. {pronoun} used {possessivePronoun} power to help others - retrieving toys from high shelves for younger children and helping an elderly neighbor pick apples from tall trees. The wise wizard of the kingdom heard about {childName}'s good deeds and invited {possessivePronoun} to the royal academy of magic. There, {childName} learned that true magic comes not from special powers, but from using your gifts to bring joy to others.",
+            'Once upon a time in the enchanted forest of Whisperwood, there lived a kind-hearted child named {childName}. What made {childName} special was {possessivePronoun} ability to understand the language of animals. Every morning, {pronoun} would wake up to the cheerful conversations of birds outside {possessivePronoun} window. One day, {childName} heard the animals talking about a problem - the ancient magic tree at the heart of the forest was losing its glow. Without its light, the forest would lose its magic. {childName} decided to help. Guided by a wise old owl, {pronoun} journeyed to the magic tree. The tree told {childName} that it needed the sound of laughter and joy to regain its strength. So {childName} organized a grand festival where animals and forest spirits gathered to share stories, sing songs, and play games. The forest echoed with happiness, and slowly, the magic tree began to glow again, brighter than ever before. From that day on, {childName} was known as the Guardian of Whisperwood, and {pronoun} continued to bring joy to the enchanted forest.',
+        ],
+        science: [
+            '{childName} had always been fascinated by the stars and planets. In {possessivePronoun} room, {pronoun} had posters of galaxies and a telescope by the window. One evening, while looking through {possessivePronoun} telescope, {childName} spotted something unusual - a star that seemed to be changing colors! {pronoun} carefully recorded {possessivePronoun} observations in a notebook. The next day, {childName} visited the local observatory to share {possessivePronoun} discovery with Dr. Martinez, an astronomer. Dr. Martinez was impressed by {childName}\'s detailed notes and together they continued to observe the color-changing star. After weeks of research, they discovered it was actually a new type of pulsar that had never been documented before! The discovery was published in a science journal, and the pulsar was named "{childName}\'s Star." This experience inspired {childName} to study astronomy in school, knowing that with curiosity and careful observation, anyone can contribute to scientific discovery.',
+            "In {childName}'s bedroom, there was a special corner filled with rocks, magnets, test tubes, and a microscope - {possessivePronoun} very own science lab. One rainy Saturday, {childName} decided to experiment with growing crystals. {pronoun} carefully mixed the solution according to the instructions in {possessivePronoun} science book and placed it in a quiet spot. Each day, {childName} observed the jar, taking notes and drawings of the changes. Slowly, beautiful crystal formations began to appear, sparkling like tiny jewels. {childName}'s parents were amazed by {possessivePronoun} patience and scientific approach. When {pronoun} brought the crystals to school for Science Day, everyone was impressed. {childName}'s teacher suggested {pronoun} create a guide to help other children grow their own crystals. {childName} worked hard on the guide, including all {possessivePronoun} observations and tips. The school published it in their newsletter, and soon many children in town were growing crystals, all thanks to {childName}'s scientific curiosity and willingness to share knowledge.",
+        ],
+        animals: [
+            "{childName} had a special talent for understanding animals. One day while walking in the park, {pronoun} heard a soft whimpering coming from a bush. {childName} carefully looked inside and found a small, frightened puppy with a hurt paw. \"It's okay, little one,\" {childName} said gently. \"I'll help you.\" {pronoun} carefully picked up the puppy and took it home. {childName}'s parents helped clean and bandage the puppy's paw, and they put up notices around the neighborhood to find its owner. Days passed, but no one claimed the puppy. The puppy, whom {childName} had named Buddy, was getting stronger every day and followed {childName} everywhere. {childName}'s parents saw how much the two had bonded and agreed that Buddy could stay as part of their family. {childName} promised to take excellent care of Buddy forever. From that day on, {childName} and Buddy were inseparable friends, and {childName}'s kindness toward animals inspired others in the neighborhood to help animals in need.",
+            "Every morning, {childName} would sit by the window with a bird feeder {pronoun} had made with {possessivePronoun} parents. {pronoun} kept a notebook where {pronoun} drew pictures of all the different birds that visited. One day, {childName} noticed a small bird with a bright blue wing that couldn't fly properly. Carefully, {childName} went outside and found that the bird had a small thorn stuck in its wing. With gentle hands and a brave heart, {childName} carefully removed the thorn. {pronoun} made a small, comfortable nest in a shoebox and placed it in a safe spot in the garden. Each day, {childName} left food and water for the blue-winged bird and watched as it grew stronger. After a week, the bird was able to fly again. Before it flew away, it sang a beautiful song that seemed just for {childName}. From that day on, the blue-winged bird would return to {childName}'s garden every spring, bringing joy and reminding everyone of how a small act of kindness can make a big difference.",
+        ],
+        sports: [
+            "{childName} loved playing soccer more than anything else. Every day after school, {pronoun} would practice in the backyard, dribbling between cones and shooting at a small goal. {childName}'s dream was to join the school soccer team, but {pronoun} was nervous about the tryouts. When the day finally came, {childName} took a deep breath and remembered all {possessivePronoun} practice. {pronoun} dribbled skillfully, passed accurately, and even scored a goal! The coach was impressed with {childName}'s skills and teamwork. Not only did {childName} make the team, but {pronoun} was also chosen to be the team captain! {childName} learned that with dedication, practice, and courage, you can achieve your goals. Throughout the season, {pronoun} helped teammates improve their skills too, showing that a true champion lifts others up. {childName}'s team didn't win every game, but they always played with heart, and that made {childName} prouder than any trophy ever could.",
+            "{childName} had always been fascinated by swimming. Whenever {pronoun} saw water - whether it was a pool, lake, or even a puddle - {possessivePronoun} eyes would light up with excitement. {childName}'s parents enrolled {possessivePronoun} in swimming lessons at the local community center. At first, {childName} was a bit afraid of putting {possessivePronoun} face underwater, but with encouragement from {possessivePronoun} instructor, {pronoun} gradually overcame this fear. Week after week, {childName} practiced kicking, arm strokes, and breathing techniques. {pronoun} was determined to improve. By the end of the summer, {childName} had become so skilled that {pronoun} was invited to join the junior swim team! On the day of {possessivePronoun} first race, {childName} was nervous but excited. When the whistle blew, {pronoun} dived into the water and swam with all {possessivePronoun} might. {childName} didn't come in first place, but {pronoun} completed the race with {possessivePronoun} best time ever! As {pronoun} climbed out of the pool, {possessivePronoun} coach and teammates cheered loudly. {childName} learned that the joy of sports comes not just from winning, but from challenging yourself and improving a little bit each day.",
+        ],
+    };
+    // Default to adventure if theme not found
+    var themeTemplates = templates[theme.toLowerCase()] || templates.adventure;
+    // Get a random template from the available ones for this theme
+    var randomIndex = Math.floor(Math.random() * themeTemplates.length);
+    return themeTemplates[randomIndex];
 }
diff --git a/src/utils/fallback-stories.ts b/src/utils/fallback-stories.ts
deleted file mode 100644
index f59b56e4..00000000
--- a/src/utils/fallback-stories.ts
+++ /dev/null
@@ -1,98 +0,0 @@
-import { StoryInput } from '@/types/story';
-
-/**
- * Generate a simple fallback story when the API story generation fails
- * This avoids circular dependencies between files
- */
-export function generateFallbackStory(input: any): string {
-  const { childName, theme, gender, mainCharacterTraits = '', interests = [] } = input;
-
-  // Determine pronouns based on gender
-  const pronouns = gender === 'boy' ? 'he' : gender === 'girl' ? 'she' : 'they';
-  const possessive = gender === 'boy' ? 'his' : gender === 'girl' ? 'her' : 'their';
-  const reflexive = gender === 'boy' ? 'himself' : gender === 'girl' ? 'herself' : 'themselves';
-
-  // Create settings and characters based on theme
-  const settings: Record<string, string> = {
-    adventure: 'magical forest',
-    fantasy: 'enchanted kingdom',
-    science: 'space station',
-    nature: 'peaceful meadow',
-    friendship: 'friendly neighborhood',
-    educational: 'curious classroom',
-    courage: 'challenging mountain',
-    kindness: 'village in need',
-    curiosity: 'mysterious cave',
-    creativity: 'artist workshop',
-  };
-
-  const companions: Record<string, string> = {
-    adventure: 'brave explorer',
-    fantasy: 'friendly dragon',
-    science: 'robot helper',
-    nature: 'talking fox',
-    friendship: 'new friend',
-    educational: 'wise owl',
-    courage: 'loyal companion',
-    kindness: 'grateful squirrel',
-    curiosity: 'curious rabbit',
-    creativity: 'colorful bird',
-  };
-
-  const setting = settings[theme] || 'magical land';
-  const companion = companions[theme] || 'friendly animal';
-  const trait = mainCharacterTraits || 'brave and kind';
-  const interest = interests && interests.length > 0 ? interests[0] : 'exploring';
-
-  // Generate the fallback story with the available information
-  return `
-# ${childName}'s ${theme.charAt(0).toUpperCase() + theme.slice(1)} Adventure
-
-Once upon a time, there was a ${trait} child named ${childName}. ${childName} loved ${interest} more than anything else.
-
-One beautiful morning, ${childName} discovered a path leading to a ${setting} that ${pronouns} had never seen before. "I wonder what adventures await me there," ${childName} thought with excitement.
-
-As ${pronouns} explored the ${setting}, ${childName} met a ${companion} named Sparkle. "Hello, ${childName}!" said Sparkle. "I've been waiting for someone like you to help me with a special mission."
-
-Sparkle explained that they needed to find the Crystal of Wisdom, which was hidden somewhere in the ${setting}. This crystal had the power to bring happiness to everyone in the land.
-
-"Will you help me find it?" Sparkle asked.
-
-${childName} smiled and nodded. "Of course I'll help!" ${pronouns} replied.
-
-Together, ${childName} and Sparkle followed a map that led them through tall grasses, across a bubbling stream, and past ancient trees that seemed to whisper secrets.
-
-Along the way, they faced challenges that required ${childName} to use ${possessive} knowledge of ${interest}. When they reached a puzzle door, ${childName}'s clever mind quickly solved it.
-
-"You're amazing!" Sparkle exclaimed. "I couldn't have done this without you."
-
-Finally, they reached a small cave where the Crystal of Wisdom glowed with a gentle blue light. ${childName} carefully picked it up, feeling its warmth in ${possessive} hands.
-
-As soon as ${pronouns} touched it, the crystal shone brighter, filling the ${setting} with beautiful colors.
-
-"The crystal responds to your kind heart," Sparkle explained. "It knows that you will use its power wisely."
-
-${childName} and Sparkle brought the crystal back to the center of the ${setting}, where its light spread happiness to everyone around. The inhabitants celebrated and thanked ${childName} for ${possessive} bravery and kindness.
-
-That night, as ${childName} returned home, ${pronouns} realized that the greatest adventure is helping others and being true to ${reflexive}. ${childName} couldn't wait to tell everyone about ${possessive} amazing journey and the friends ${pronouns} had made along the way.
-
-And whenever ${childName} looked up at the stars, ${pronouns} remembered the magical ${setting} and knew that new adventures would always be waiting.
-
-The End
-  `;
-}
-
-/**
- * Generate a simple error message when everything fails
- */
-export function generateErrorMessage(childName: string): string {
-  return `
-# A Special Message for ${childName}
-
-Oh no! Our story fairies seem to be taking a little nap right now, and couldn't finish your special story.
-
-But don't worry, ${childName}! You can try again in just a moment, and our story fairies will be ready with a magical adventure just for you!
-
-In the meantime, remember that YOU are the hero of your own story, and we can't wait to tell you all about your amazing adventures soon!
-  `;
-}
diff --git a/src/utils/logger.js b/src/utils/logger.js
index ab81ad19..bd3265ea 100644
--- a/src/utils/logger.js
+++ b/src/utils/logger.js
@@ -1,263 +1,248 @@
-'use strict';
-var __assign =
-  (this && this.__assign) ||
-  function () {
-    __assign =
-      Object.assign ||
-      function (t) {
+"use strict";
+var __assign = (this && this.__assign) || function () {
+    __assign = Object.assign || function(t) {
         for (var s, i = 1, n = arguments.length; i < n; i++) {
-          s = arguments[i];
-          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
+            s = arguments[i];
+            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
+                t[p] = s[p];
         }
         return t;
-      };
+    };
     return __assign.apply(this, arguments);
-  };
-Object.defineProperty(exports, '__esModule', { value: true });
+};
+Object.defineProperty(exports, "__esModule", { value: true });
 exports.logger = exports.LogLevel = void 0;
 exports.configureLogger = configureLogger;
 // Try to import from the mock environment first, then fall back to the real environment
 var env;
 try {
-  // This will be used when running the test script
-  env = require('../scripts/mock-env').env;
-} catch (error) {
-  // This will be used in the normal application
-  env = require('@/lib/env').env;
+    // This will be used when running the test script
+    env = require('../scripts/mock-env').env;
+}
+catch (error) {
+    // This will be used in the normal application
+    env = require('@/lib/env').env;
 }
 /**
  * Log levels with numeric severity
  */
 var LogLevel;
 (function (LogLevel) {
-  LogLevel[(LogLevel['ERROR'] = 0)] = 'ERROR';
-  LogLevel[(LogLevel['WARN'] = 1)] = 'WARN';
-  LogLevel[(LogLevel['INFO'] = 2)] = 'INFO';
-  LogLevel[(LogLevel['DEBUG'] = 3)] = 'DEBUG';
+    LogLevel[LogLevel["ERROR"] = 0] = "ERROR";
+    LogLevel[LogLevel["WARN"] = 1] = "WARN";
+    LogLevel[LogLevel["INFO"] = 2] = "INFO";
+    LogLevel[LogLevel["DEBUG"] = 3] = "DEBUG";
 })(LogLevel || (exports.LogLevel = LogLevel = {}));
 /**
  * Default logger configuration based on environment
  */
 var DEFAULT_CONFIG = {
-  level: env.NODE_ENV === 'production' ? LogLevel.WARN : LogLevel.DEBUG,
-  enableConsole: true,
-  enableRemoteLogging: env.NODE_ENV === 'production',
+    level: env.NODE_ENV === 'production' ? LogLevel.WARN : LogLevel.DEBUG,
+    enableConsole: true,
+    enableRemoteLogging: env.NODE_ENV === 'production',
 };
 /**
  * Logger class implementing singleton pattern
  */
 var Logger = /** @class */ (function () {
-  function Logger(config) {
-    this.config = __assign(__assign({}, DEFAULT_CONFIG), config);
-  }
-  /**
-   * Get singleton instance
-   */
-  Logger.getInstance = function (config) {
-    if (!Logger.instance) {
-      Logger.instance = new Logger(config);
-    }
-    return Logger.instance;
-  };
-  /**
-   * Core logging method
-   */
-  Logger.prototype.log = function (level, message, context) {
-    var _a;
-    // Only log if the current log level allows
-    if (level > ((_a = this.config.level) !== null && _a !== void 0 ? _a : LogLevel.INFO)) return;
-    // Convert unknown context to Record<string, any> or undefined
-    var safeContext = context ? this.convertToRecord(context) : undefined;
-    var logEntry = {
-      level: level,
-      message: message,
-      context: safeContext,
-      timestamp: Date.now(),
-    };
-    // Console logging
-    if (this.config.enableConsole) {
-      this.consoleLog(logEntry);
+    function Logger(config) {
+        this.config = __assign(__assign({}, DEFAULT_CONFIG), config);
     }
-  };
-  /**
-   * Convert unknown value to a safe record
-   */
-  Logger.prototype.convertToRecord = function (value) {
-    if (value === null) return { value: null };
-    if (value === undefined) return { value: undefined };
-    // Special handling for Error objects
-    if (value instanceof Error) {
-      return {
-        message: value.message,
-        name: value.name,
-        stack: value.stack,
-      };
-    }
-    // Handle empty objects
-    if (typeof value === 'object' && value !== null) {
-      var obj = value;
-      // Check if object is empty or has empty error property
-      if (Object.keys(obj).length === 0) {
-        return { value: 'Empty object' };
-      }
-      // Special handling for objects with error property
-      if (obj.error !== undefined) {
-        if (
-          obj.error === null ||
-          (typeof obj.error === 'object' && Object.keys(obj.error).length === 0)
-        ) {
-          return {
-            error: 'Empty error object',
-            originalObject: JSON.stringify(obj),
-          };
+    /**
+     * Get singleton instance
+     */
+    Logger.getInstance = function (config) {
+        if (!Logger.instance) {
+            Logger.instance = new Logger(config);
         }
-      }
-      return Object.entries(obj).reduce(function (acc, _a) {
-        var key = _a[0],
-          val = _a[1];
-        acc[key] = val;
-        return acc;
-      }, {});
-    }
-    return { value: value };
-  };
-  /**
-   * Format timestamp to ISO string
-   */
-  Logger.prototype.formatTimestamp = function (timestamp) {
-    return new Date(timestamp).toISOString();
-  };
-  /**
-   * Get level name and color for console output
-   */
-  Logger.prototype.getLevelInfo = function (level) {
-    switch (level) {
-      case LogLevel.ERROR:
-        return { name: 'ERROR', color: '\x1b[31m' }; // Red
-      case LogLevel.WARN:
-        return { name: 'WARN', color: '\x1b[33m' }; // Yellow
-      case LogLevel.INFO:
-        return { name: 'INFO', color: '\x1b[36m' }; // Cyan
-      case LogLevel.DEBUG:
-        return { name: 'DEBUG', color: '\x1b[90m' }; // Gray
-      default:
-        return { name: 'UNKNOWN', color: '\x1b[0m' };
-    }
-  };
-  /**
-   * Safely stringify context with depth limit and circular reference handling
-   */
-  Logger.prototype.safeStringify = function (value, depth) {
-    var _this = this;
-    if (depth === void 0) {
-      depth = 0;
-    }
-    // Prevent excessive recursion
-    if (depth > 3) return '[Depth Limit Exceeded]';
-    // Handle null and undefined
-    if (value === null) return 'null';
-    if (value === undefined) return 'undefined';
-    // Handle primitive types
-    if (['string', 'number', 'boolean'].includes(typeof value)) {
-      return String(value);
-    }
-    // Handle Date objects
-    if (value instanceof Date) {
-      return value.toISOString();
-    }
-    // Handle arrays
-    if (Array.isArray(value)) {
-      return '['.concat(
-        value
-          .map(function (item) {
-            return _this.safeStringify(item, depth + 1);
-          })
-          .join(', '),
-        ']'
-      );
-    }
-    // Handle objects
-    if (typeof value === 'object') {
-      try {
-        // Prevent circular references
-        var seen_1 = new WeakSet();
-        var stringifyObject = function (obj) {
-          if (seen_1.has(obj)) return '[Circular]';
-          seen_1.add(obj);
-          var entries = Object.entries(obj).map(function (_a) {
-            var key = _a[0],
-              val = _a[1];
-            return ''.concat(key, ': ').concat(_this.safeStringify(val, depth + 1));
-          });
-          return '{ '.concat(entries.join(', '), ' }');
+        return Logger.instance;
+    };
+    /**
+     * Core logging method
+     */
+    Logger.prototype.log = function (level, message, context) {
+        var _a;
+        // Only log if the current log level allows
+        if (level > ((_a = this.config.level) !== null && _a !== void 0 ? _a : LogLevel.INFO))
+            return;
+        // Convert unknown context to Record<string, any> or undefined
+        var safeContext = context ? this.convertToRecord(context) : undefined;
+        var logEntry = {
+            level: level,
+            message: message,
+            context: safeContext,
+            timestamp: Date.now(),
         };
-        return stringifyObject(value);
-      } catch (_a) {
-        return '[Unable to stringify]';
-      }
-    }
-    // Fallback for functions or other unhandled types
-    return String(value);
-  };
-  /**
-   * Console logging with color and formatting
-   */
-  Logger.prototype.consoleLog = function (entry) {
-    var level = entry.level,
-      message = entry.message,
-      context = entry.context,
-      timestamp = entry.timestamp;
-    var formattedTimestamp = this.formatTimestamp(timestamp);
-    var _a = this.getLevelInfo(level),
-      levelName = _a.name,
-      levelColor = _a.color;
-    var contextString = context ? this.safeStringify(context) : '';
-    // Get the appropriate console method
-    var consoleMethod =
-      level === LogLevel.ERROR
-        ? console.error
-        : level === LogLevel.WARN
-          ? console.warn
-          : level === LogLevel.INFO
-            ? console.info
-            : console.debug;
-    // Format the log message
-    var logPrefix = ''
-      .concat(levelColor, '[')
-      .concat(levelName, ']\u001B[0m ')
-      .concat(formattedTimestamp, ' -');
-    if (contextString) {
-      consoleMethod(''.concat(logPrefix, ' ').concat(message), contextString);
-    } else {
-      consoleMethod(''.concat(logPrefix, ' ').concat(message));
-    }
-  };
-  /**
-   * Remote logging implementation (placeholder)
-   */
-  /**
-   * Public logging methods
-   */
-  Logger.prototype.error = function (message, context) {
-    this.log(LogLevel.ERROR, message, context);
-  };
-  Logger.prototype.warn = function (message, context) {
-    this.log(LogLevel.WARN, message, context);
-  };
-  Logger.prototype.info = function (message, context) {
-    this.log(LogLevel.INFO, message, context);
-  };
-  Logger.prototype.debug = function (message, context) {
-    this.log(LogLevel.DEBUG, message, context);
-  };
-  /**
-   * Set log level dynamically
-   */
-  Logger.prototype.setLogLevel = function (level) {
-    this.config.level = level;
-  };
-  return Logger;
-})();
+        // Console logging
+        if (this.config.enableConsole) {
+            this.consoleLog(logEntry);
+        }
+    };
+    /**
+     * Convert unknown value to a safe record
+     */
+    Logger.prototype.convertToRecord = function (value) {
+        if (value === null)
+            return { value: null };
+        if (value === undefined)
+            return { value: undefined };
+        // Special handling for Error objects
+        if (value instanceof Error) {
+            return {
+                message: value.message,
+                name: value.name,
+                stack: value.stack,
+            };
+        }
+        // Handle empty objects
+        if (typeof value === 'object' && value !== null) {
+            var obj = value;
+            // Check if object is empty or has empty error property
+            if (Object.keys(obj).length === 0) {
+                return { value: 'Empty object' };
+            }
+            // Special handling for objects with error property
+            if (obj.error !== undefined) {
+                if (obj.error === null ||
+                    (typeof obj.error === 'object' && Object.keys(obj.error).length === 0)) {
+                    return {
+                        error: 'Empty error object',
+                        originalObject: JSON.stringify(obj),
+                    };
+                }
+            }
+            return Object.entries(obj).reduce(function (acc, _a) {
+                var key = _a[0], val = _a[1];
+                acc[key] = val;
+                return acc;
+            }, {});
+        }
+        return { value: value };
+    };
+    /**
+     * Format timestamp to ISO string
+     */
+    Logger.prototype.formatTimestamp = function (timestamp) {
+        return new Date(timestamp).toISOString();
+    };
+    /**
+     * Get level name and color for console output
+     */
+    Logger.prototype.getLevelInfo = function (level) {
+        switch (level) {
+            case LogLevel.ERROR:
+                return { name: 'ERROR', color: '\x1b[31m' }; // Red
+            case LogLevel.WARN:
+                return { name: 'WARN', color: '\x1b[33m' }; // Yellow
+            case LogLevel.INFO:
+                return { name: 'INFO', color: '\x1b[36m' }; // Cyan
+            case LogLevel.DEBUG:
+                return { name: 'DEBUG', color: '\x1b[90m' }; // Gray
+            default:
+                return { name: 'UNKNOWN', color: '\x1b[0m' };
+        }
+    };
+    /**
+     * Safely stringify context with depth limit and circular reference handling
+     */
+    Logger.prototype.safeStringify = function (value, depth) {
+        var _this = this;
+        if (depth === void 0) { depth = 0; }
+        // Prevent excessive recursion
+        if (depth > 3)
+            return '[Depth Limit Exceeded]';
+        // Handle null and undefined
+        if (value === null)
+            return 'null';
+        if (value === undefined)
+            return 'undefined';
+        // Handle primitive types
+        if (['string', 'number', 'boolean'].includes(typeof value)) {
+            return String(value);
+        }
+        // Handle Date objects
+        if (value instanceof Date) {
+            return value.toISOString();
+        }
+        // Handle arrays
+        if (Array.isArray(value)) {
+            return "[".concat(value.map(function (item) { return _this.safeStringify(item, depth + 1); }).join(', '), "]");
+        }
+        // Handle objects
+        if (typeof value === 'object') {
+            try {
+                // Prevent circular references
+                var seen_1 = new WeakSet();
+                var stringifyObject = function (obj) {
+                    if (seen_1.has(obj))
+                        return '[Circular]';
+                    seen_1.add(obj);
+                    var entries = Object.entries(obj).map(function (_a) {
+                        var key = _a[0], val = _a[1];
+                        return "".concat(key, ": ").concat(_this.safeStringify(val, depth + 1));
+                    });
+                    return "{ ".concat(entries.join(', '), " }");
+                };
+                return stringifyObject(value);
+            }
+            catch (_a) {
+                return '[Unable to stringify]';
+            }
+        }
+        // Fallback for functions or other unhandled types
+        return String(value);
+    };
+    /**
+     * Console logging with color and formatting
+     */
+    Logger.prototype.consoleLog = function (entry) {
+        var level = entry.level, message = entry.message, context = entry.context, timestamp = entry.timestamp;
+        var formattedTimestamp = this.formatTimestamp(timestamp);
+        var _a = this.getLevelInfo(level), levelName = _a.name, levelColor = _a.color;
+        var contextString = context ? this.safeStringify(context) : '';
+        // Get the appropriate console method
+        var consoleMethod = level === LogLevel.ERROR
+            ? console.error
+            : level === LogLevel.WARN
+                ? console.warn
+                : level === LogLevel.INFO
+                    ? console.info
+                    : console.debug;
+        // Format the log message
+        var logPrefix = "".concat(levelColor, "[").concat(levelName, "]\u001B[0m ").concat(formattedTimestamp, " -");
+        if (contextString) {
+            consoleMethod("".concat(logPrefix, " ").concat(message), contextString);
+        }
+        else {
+            consoleMethod("".concat(logPrefix, " ").concat(message));
+        }
+    };
+    /**
+     * Remote logging implementation (placeholder)
+     */
+    /**
+     * Public logging methods
+     */
+    Logger.prototype.error = function (message, context) {
+        this.log(LogLevel.ERROR, message, context);
+    };
+    Logger.prototype.warn = function (message, context) {
+        this.log(LogLevel.WARN, message, context);
+    };
+    Logger.prototype.info = function (message, context) {
+        this.log(LogLevel.INFO, message, context);
+    };
+    Logger.prototype.debug = function (message, context) {
+        this.log(LogLevel.DEBUG, message, context);
+    };
+    /**
+     * Set log level dynamically
+     */
+    Logger.prototype.setLogLevel = function (level) {
+        this.config.level = level;
+    };
+    return Logger;
+}());
 /**
  * Export singleton instance
  */
@@ -266,5 +251,5 @@ exports.logger = Logger.getInstance();
  * Configure logger with custom settings
  */
 function configureLogger(config) {
-  return Logger.getInstance(config);
+    return Logger.getInstance(config);
 }
diff --git a/src/utils/logger.ts b/src/utils/logger.ts
index d8709251..8570c856 100644
--- a/src/utils/logger.ts
+++ b/src/utils/logger.ts
@@ -1,16 +1,12 @@
-import { env } from '../config/env';
-import pino from 'pino';
-
-// Create a logger instance
-export const logger = pino({
-  level: env.LOG_LEVEL || 'info',
-  transport: {
-    target: 'pino-pretty',
-    options: {
-      colorize: true,
-    },
-  },
-});
+// Try to import from the mock environment first, then fall back to the real environment
+let env;
+try {
+  // This will be used when running the test script
+  env = require('../scripts/mock-env').env;
+} catch (error) {
+  // This will be used in the normal application
+  env = require('@/lib/env').env;
+}
 
 /**
  * Log levels with numeric severity
@@ -283,6 +279,11 @@ class Logger {
   }
 }
 
+/**
+ * Export singleton instance
+ */
+export const logger = Logger.getInstance();
+
 /**
  * Configure logger with custom settings
  */
diff --git a/src/utils/text.ts b/src/utils/text.ts
deleted file mode 100644
index 553e0ecc..00000000
--- a/src/utils/text.ts
+++ /dev/null
@@ -1,8 +0,0 @@
-/**
- * Calculate the estimated reading time in minutes based on word count
- * Assumes average reading speed of 200 words per minute for children
- */
-export function calculateReadingTime(wordCount: number): number {
-  const WORDS_PER_MINUTE = 200;
-  return Math.ceil(wordCount / WORDS_PER_MINUTE);
-}
diff --git a/storyGenerationTest.js b/storyGenerationTest.js
new file mode 100644
index 00000000..6d36c845
--- /dev/null
+++ b/storyGenerationTest.js
@@ -0,0 +1,20 @@
+require('dotenv').config({ path: '.env.local' });
+const { userPersonalizationEngine } = require('./dist/services/personalizationEngine');
+
+async function testStoryGeneration() {
+  const input = {
+    childName: 'Alice',
+    gender: 'girl',
+    theme: 'adventure',
+    interests: ['magic', 'animals'],
+  };
+
+  try {
+    const story = await userPersonalizationEngine.generatePersonalizedStory(input);
+    console.log('Generated Story:', story);
+  } catch (error) {
+    console.error('Story generation failed:', error);
+  }
+}
+
+testStoryGeneration();
diff --git a/supabase/migrations/add_metadata_to_stories.sql b/supabase/migrations/add_metadata_to_stories.sql
deleted file mode 100644
index a66817dd..00000000
--- a/supabase/migrations/add_metadata_to_stories.sql
+++ /dev/null
@@ -1,37 +0,0 @@
--- Add metadata column to stories table
-ALTER TABLE public.stories ADD COLUMN IF NOT EXISTS metadata JSONB DEFAULT '{}'::jsonb;
-
--- Update RLS policies to include metadata
-DROP POLICY IF EXISTS "Users can view their own stories" ON public.stories;
-DROP POLICY IF EXISTS "Users can insert their own stories" ON public.stories;
-DROP POLICY IF EXISTS "Users can update their own stories" ON public.stories;
-DROP POLICY IF EXISTS "Users can delete their own stories" ON public.stories;
-
--- Recreate policies with metadata access
-CREATE POLICY "Users can view their own stories" ON public.stories
-  FOR SELECT USING (
-    user_id IN (
-      SELECT id FROM public.users WHERE auth_id = auth.uid()::text
-    )
-  );
-
-CREATE POLICY "Users can insert their own stories" ON public.stories
-  FOR INSERT WITH CHECK (
-    user_id IN (
-      SELECT id FROM public.users WHERE auth_id = auth.uid()::text
-    )
-  );
-
-CREATE POLICY "Users can update their own stories" ON public.stories
-  FOR UPDATE USING (
-    user_id IN (
-      SELECT id FROM public.users WHERE auth_id = auth.uid()::text
-    )
-  );
-
-CREATE POLICY "Users can delete their own stories" ON public.stories
-  FOR DELETE USING (
-    user_id IN (
-      SELECT id FROM public.users WHERE auth_id = auth.uid()::text
-    )
-  ); 
\ No newline at end of file
diff --git a/tatus b/tatus
new file mode 100644
index 00000000..6f3590c5
--- /dev/null
+++ b/tatus
@@ -0,0 +1,76 @@
+  feat/error-logging[m
+  feat/homepage[m
+  feat/story-generation-mvp[m
+  feat/story-recommendations[m
+  feature/clerk-authentication[m
+  feature/firebase-auth-integration[m
+* [32mmain[m
+  story-generation-mvp[m
+
+                   SSUUMMMMAARRYY OOFF LLEESSSS CCOOMMMMAANNDDSS
+
+      Commands marked with * may be preceded by a number, _N.
+      Notes in parentheses indicate the behavior if _N is given.
+      A key preceded by a caret indicates the Ctrl key; thus ^K is ctrl-K.
+
+  h  H                 Display this help.
+  q  :q  Q  :Q  ZZ     Exit.
+ ---------------------------------------------------------------------------
+
+                           MMOOVVIINNGG
+
+  e  ^E  j  ^N  CR  *  Forward  one line   (or _N lines).
+  y  ^Y  k  ^K  ^P  *  Backward one line   (or _N lines).
+  f  ^F  ^V  SPACE  *  Forward  one window (or _N lines).
+  b  ^B  ESC-v      *  Backward one window (or _N lines).
+  z                 *  Forward  one window (and set window to _N).
+  w                 *  Backward one window (and set window to _N).
+  ESC-SPACE         *  Forward  one window, but don't stop at end-of-file.
+  d  ^D             *  Forward  one half-window (and set half-window to _N).
+  u  ^U             *  Backward one half-window (and set half-window to _N).
+  ESC-)  RightArrow *  Right one half screen width (or _N positions).
+  ESC-(  LeftArrow  *  Left  one half screen width (or _N positions).
+  ESC-}  ^RightArrow   Right to last column displayed.
+  ESC-{  ^LeftArrow    Left  to first column.
+  F                    Forward forever; like "tail -f".
+  ESC-F                Like F but stop when search pattern is found.
+  r  ^R  ^L            Repaint screen.
+  R                    Repaint screen, discarding buffered input.
+        ---------------------------------------------------
+        Default "window" is the screen height.
+        Default "half-window" is half of the screen height.
+ ---------------------------------------------------------------------------
+
+                          SSEEAARRCCHHIINNGG
+
+  /_p_a_t_t_e_r_n          *  Search forward for (_N-th) matching line.
+  ?_p_a_t_t_e_r_n          *  Search backward for (_N-th) matching line.
+  n                 *  Repeat previous search (for _N-th occurrence).
+  N                 *  Repeat previous search in reverse direction.
+  ESC-n             *  Repeat previous search, spanning files.
+  ESC-N             *  Repeat previous search, reverse dir. & spanning files.
+  ^O^N  ^On         *  Search forward for (_N-th) OSC8 hyperlink.
+  ^O^P  ^Op         *  Search backward for (_N-th) OSC8 hyperlink.
+  ^O^L  ^Ol            Jump to the currently selected OSC8 hyperlink.
+  ESC-u                Undo (toggle) search highlighting.
+  ESC-U                Clear search highlighting.
+  &_p_a_t_t_e_r_n          *  Display only matching lines.
+        ---------------------------------------------------
+        A search pattern may begin with one or more of:
+        ^N or !  Search for NON-matching lines.
+        ^E or *  Search multiple files (pass thru END OF FILE).
+        ^F or @  Start search at FIRST file (for /) or last file (for ?).
+        ^K       Highlight matches, but don't move (KEEP position).
+        ^R       Don't use REGULAR EXPRESSIONS.
+        ^S _n     Search for match in _n-th parenthesized subpattern.
+        ^W       WRAP search if no match found.
+        ^L       Enter next character literally into pattern.
+ ---------------------------------------------------------------------------
+
+                           JJUUMMPPIINNGG
+
+  g  <  ESC-<       *  Go to first line in file (or line _N).
+  G  >  ESC->       *  Go to last line in file (or line _N).
+  p  %              *  Go to beginning of file (or _N percent into file).
+  t                 *  Go to the (_N-th) next tag.
+  T                 *  Go to the (_N-th) previous tag.
diff --git a/test-env-vars.js b/test-env-vars.js
new file mode 100644
index 00000000..9f951e65
--- /dev/null
+++ b/test-env-vars.js
@@ -0,0 +1,37 @@
+// Script to test environment variables loading
+require('dotenv').config();
+
+console.log('Environment Variables Test');
+console.log('-----------------------');
+console.log('NODE_ENV:', process.env.NODE_ENV || 'not set');
+console.log('OPENAI_API_KEY exists:', !!process.env.OPENAI_API_KEY);
+
+if (process.env.OPENAI_API_KEY) {
+  console.log('OPENAI_API_KEY starts with:', process.env.OPENAI_API_KEY.substring(0, 10) + '...');
+  console.log('OPENAI_API_KEY format valid:', process.env.OPENAI_API_KEY.startsWith('sk-'));
+} else {
+  console.log('OPENAI_API_KEY is not defined in environment');
+}
+
+// Check which .env file is being loaded
+console.log('\nChecking .env files:');
+const fs = require('fs');
+const envFiles = ['.env', '.env.local', '.env.development', '.env.production'];
+
+envFiles.forEach((file) => {
+  try {
+    if (fs.existsSync(file)) {
+      const content = fs.readFileSync(file, 'utf8');
+      const openaiKeyLine = content.split('\n').find((line) => line.startsWith('OPENAI_API_KEY='));
+      console.log(
+        `${file} exists:`,
+        !!openaiKeyLine,
+        openaiKeyLine ? `(Key: ${openaiKeyLine.substring(0, 25)}...)` : ''
+      );
+    } else {
+      console.log(`${file} does not exist`);
+    }
+  } catch (err) {
+    console.log(`Error checking ${file}:`, err.message);
+  }
+});
diff --git a/test-package.json b/test-package.json
new file mode 100644
index 00000000..38668d3e
--- /dev/null
+++ b/test-package.json
@@ -0,0 +1,6 @@
+{
+  "name": "middleware-test",
+  "version": "1.0.0",
+  "type": "module",
+  "private": true
+}
diff --git a/test-story-generation.js b/test-story-generation.js
new file mode 100644
index 00000000..9a75ae76
--- /dev/null
+++ b/test-story-generation.js
@@ -0,0 +1,224 @@
+const axios = require('axios');
+const dotenv = require('dotenv');
+const fs = require('fs');
+const path = require('path');
+
+// Load environment variables
+dotenv.config();
+
+// Robust diagnostic logging function
+function logDiagnostics(message, data = null) {
+  const timestamp = new Date().toISOString();
+  const logPath = path.resolve(__dirname, 'test-diagnostics-full.log');
+
+  try {
+    // Ensure log directory exists
+    const logDir = path.dirname(logPath);
+    if (!fs.existsSync(logDir)) {
+      fs.mkdirSync(logDir, { recursive: true });
+    }
+
+    // Prepare log entry
+    let logEntry = `[${timestamp}] ${message}\n`;
+
+    // Safely stringify data with controlled depth and length
+    const safeStringify = (obj, maxLength = 1000) => {
+      const seen = new WeakSet();
+
+      const replacer = (key, value) => {
+        // Redact sensitive information
+        if (
+          typeof key === 'string' &&
+          (key.includes('token') ||
+            key.includes('key') ||
+            key.includes('secret') ||
+            key.includes('password'))
+        ) {
+          return '[REDACTED]';
+        }
+
+        // Prevent circular references
+        if (typeof value === 'object' && value !== null) {
+          if (seen.has(value)) {
+            return '[Circular]';
+          }
+          seen.add(value);
+        }
+
+        // Truncate long strings
+        if (typeof value === 'string' && value.length > maxLength) {
+          return value.substring(0, maxLength) + '... [TRUNCATED]';
+        }
+
+        return value;
+      };
+
+      try {
+        return JSON.stringify(obj, replacer, 2);
+      } catch (error) {
+        return `Unable to stringify data: ${error.message}`;
+      }
+    };
+
+    // Append log entry and data
+    fs.appendFileSync(logPath, logEntry);
+    if (data) {
+      const safeData = safeStringify(data);
+      fs.appendFileSync(logPath, safeData + '\n\n');
+    }
+  } catch (error) {
+    console.error('Comprehensive logging failed:', error);
+  }
+
+  // Always log to console for immediate visibility
+  console.log(message);
+  if (data) console.log(JSON.stringify(data, null, 2));
+}
+
+// Diagnostic environment variable reader
+function readEnvironmentVariables() {
+  const envVars = {};
+  const sensitiveKeys = ['TOKEN', 'KEY', 'SECRET', 'PASSWORD', 'CREDENTIAL'];
+  const MAX_ENV_VALUE_LENGTH = 100; // Truncate long environment values
+
+  Object.keys(process.env).forEach((key) => {
+    // Only log non-sensitive environment variables
+    if (!sensitiveKeys.some((sensitiveKey) => key.toUpperCase().includes(sensitiveKey))) {
+      // Truncate long values
+      let value = process.env[key];
+      if (typeof value === 'string' && value.length > MAX_ENV_VALUE_LENGTH) {
+        value = value.substring(0, MAX_ENV_VALUE_LENGTH) + '... [TRUNCATED]';
+      }
+      envVars[key] = value;
+    }
+  });
+
+  return envVars;
+}
+
+async function testStoryGeneration() {
+  // Clear previous log to prevent accumulation
+  const logPath = path.resolve(__dirname, 'test-diagnostics-full.log');
+  if (fs.existsSync(logPath)) {
+    fs.unlinkSync(logPath);
+  }
+
+  // Log comprehensive environment information with controlled output
+  const environmentVars = readEnvironmentVariables();
+  logDiagnostics('Environment Variables', {
+    variableCount: Object.keys(environmentVars).length,
+    sampleVariables: Object.entries(environmentVars)
+      .slice(0, 10) // Only log first 10 variables
+      .reduce((acc, [key, value]) => {
+        acc[key] = value;
+        return acc;
+      }, {}),
+  });
+
+  try {
+    logDiagnostics('Starting Story Generation Test');
+    logDiagnostics('Target Endpoint', 'http://localhost:3001/api/story/generate');
+
+    // Comprehensive diagnostic headers with multiple authentication strategies
+    const diagnosticHeaders = {
+      'Content-Type': 'application/json',
+
+      // Multiple authentication override headers
+      'x-test-user-id': process.env.NEXT_PUBLIC_DEV_USER_ID || 'test-user-123',
+      'x-clerk-auth-user-id': process.env.NEXT_PUBLIC_DEV_USER_ID || 'test-user-123',
+      'x-dev-auth-override': 'true',
+
+      // Debugging and tracing headers
+      'x-debug-mode': 'true',
+      'x-environment': process.env.NODE_ENV || 'development',
+      'x-request-trace-id': `test-${Date.now()}`,
+
+      // Optional additional context headers
+      'x-client-timestamp': new Date().toISOString(),
+      'x-client-version': '1.0.0',
+    };
+
+    logDiagnostics('Diagnostic Headers', diagnosticHeaders);
+
+    // Comprehensive test cases
+    const testCases = [
+      {
+        name: 'Standard Story Generation',
+        input: {
+          childName: 'Emma',
+          interests: ['dinosaurs', 'space'],
+          theme: 'adventure',
+          gender: 'female',
+        },
+      },
+      {
+        name: 'Minimal Input',
+        input: {
+          childName: 'Alex',
+          interests: ['cars'],
+          theme: 'exploration',
+          gender: 'male',
+        },
+      },
+    ];
+
+    for (const testCase of testCases) {
+      logDiagnostics(`Running Test Case: ${testCase.name}`);
+
+      try {
+        const response = await axios.post(
+          'http://localhost:3001/api/story/generate',
+          testCase.input,
+          {
+            headers: diagnosticHeaders,
+            timeout: 15000, // Extended timeout for comprehensive debugging
+          }
+        );
+
+        logDiagnostics(`Test Case ${testCase.name} - Response Status`, response.status);
+        logDiagnostics(`Test Case ${testCase.name} - Response Headers`, response.headers);
+        logDiagnostics(`Test Case ${testCase.name} - Response Data`, response.data);
+      } catch (testCaseError) {
+        logDiagnostics(`Test Case ${testCase.name} - Error Details`, {
+          errorType: testCaseError.constructor.name,
+          errorMessage: testCaseError.message,
+          responseStatus: testCaseError.response?.status,
+          responseHeaders: testCaseError.response?.headers,
+          responseData: testCaseError.response?.data,
+          requestDetails: {
+            method: testCaseError.request?.method,
+            path: testCaseError.request?.path,
+            host: testCaseError.request?.host,
+          },
+          requestConfig: {
+            url: testCaseError.config?.url,
+            method: testCaseError.config?.method,
+            headers: testCaseError.config?.headers,
+          },
+          stackTrace: testCaseError.stack,
+        });
+      }
+    }
+  } catch (error) {
+    logDiagnostics('Full Error Details', {
+      errorType: error.constructor.name,
+      errorMessage: error.message,
+      responseStatus: error.response?.status,
+      responseHeaders: error.response?.headers,
+      responseData: error.response?.data,
+      requestDetails: {
+        method: error.request?.method,
+        path: error.request?.path,
+        host: error.request?.host,
+      },
+      requestConfig: {
+        url: error.config?.url,
+        method: error.config?.method,
+        headers: error.config?.headers,
+      },
+      stackTrace: error.stack,
+    });
+  }
+}
+
+testStoryGeneration();
diff --git a/test-supabase-connection.js b/test-supabase-connection.js
new file mode 100644
index 00000000..fe3195b7
--- /dev/null
+++ b/test-supabase-connection.js
@@ -0,0 +1,58 @@
+// Test script to verify Supabase connection
+require('dotenv').config({ path: '.env.local' });
+const { createClient } = require('@supabase/supabase-js');
+
+// Create a Supabase client with the URL and anon key
+const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
+const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;
+
+async function testConnection() {
+  console.log('Testing Supabase connection...');
+
+  if (!supabaseUrl || !supabaseAnonKey) {
+    console.error('Error: Supabase URL or Anon Key is missing in environment variables');
+    return;
+  }
+
+  console.log(`Supabase URL: ${supabaseUrl}`);
+  console.log(
+    `Anon Key: ${supabaseAnonKey.substring(0, 5)}...${supabaseAnonKey.substring(supabaseAnonKey.length - 5)}`
+  );
+
+  try {
+    // Create client
+    const supabase = createClient(supabaseUrl, supabaseAnonKey);
+
+    // Test basic connection
+    const { data, error } = await supabase.from('users').select('*').limit(5);
+
+    if (error) {
+      console.error('Error querying users:', error);
+    } else {
+      console.log('Successfully connected to Supabase!');
+      console.log(`Retrieved ${data.length} users`);
+    }
+
+    // Test RLS on stories table
+    console.log('\nTesting Row Level Security (RLS) on stories table...');
+    const { data: storiesData, error: storiesError } = await supabase
+      .from('stories')
+      .select('*')
+      .limit(5);
+
+    if (storiesError) {
+      console.log('RLS working correctly: Access denied to stories table without authentication.');
+      console.log('Error:', storiesError.message);
+    } else {
+      console.warn(
+        '⚠️ RLS may not be properly configured: Retrieved stories without authentication!'
+      );
+      console.log(`Retrieved ${storiesData.length} stories without authentication.`);
+    }
+  } catch (error) {
+    console.error('Error connecting to Supabase:', error);
+  }
+}
+
+// Run the test
+testConnection();
diff --git a/testStoryGeneration.ts b/testStoryGeneration.ts
new file mode 100644
index 00000000..0bfbe953
--- /dev/null
+++ b/testStoryGeneration.ts
@@ -0,0 +1,20 @@
+import { userPersonalizationEngine } from './src/services/personalizationEngine';
+import { StoryInput } from '@/types/story';
+
+async function testStoryGeneration() {
+  const input: StoryInput = {
+    childName: 'Alice',
+    gender: 'girl',
+    theme: 'adventure',
+    interests: ['magic', 'animals'],
+  };
+
+  try {
+    const story = await userPersonalizationEngine.generatePersonalizedStory(input);
+    console.log('Generated Story:', story);
+  } catch (error) {
+    console.error('Story generation failed:', error);
+  }
+}
+
+testStoryGeneration();
diff --git a/tsconfig.json b/tsconfig.json
index e59724b2..3b59c2b2 100644
--- a/tsconfig.json
+++ b/tsconfig.json
@@ -1,7 +1,7 @@
 {
   "compilerOptions": {
-    "target": "es5",
-    "lib": ["dom", "dom.iterable", "esnext"],
+    "target": "ES2017",
+    "lib": ["dom", "dom.iterable", "esnext", "es2015", "es2016", "es2017"],
     "allowJs": true,
     "skipLibCheck": true,
     "strict": true,
@@ -20,8 +20,10 @@
     ],
     "paths": {
       "@/*": ["./src/*"]
-    }
+    },
+    "types": ["node", "next", "jest"],
+    "typeRoots": ["node_modules/@types", "src/types"]
   },
-  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
-  "exclude": ["node_modules"]
+  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts", "src/types/**/*.d.ts"],
+  "exclude": ["node_modules", "browser-tools-mcp/**", "perplexity-mcp/**", ".next", "out"]
 }
diff --git a/tsconfig.node.json b/tsconfig.node.json
deleted file mode 100644
index 5d47a659..00000000
--- a/tsconfig.node.json
+++ /dev/null
@@ -1,10 +0,0 @@
-{
-  "extends": "./tsconfig.json",
-  "ts-node": {
-    "require": ["tsconfig-paths/register"],
-    "transpileOnly": true,
-    "compilerOptions": {
-      "module": "commonjs"
-    }
-  }
-}
diff --git a/vercel.json.backup-2025-03-03T20-30-08.149Z b/vercel.json.backup-2025-03-03T20-30-08.149Z
new file mode 100644
index 00000000..f00e66ac
--- /dev/null
+++ b/vercel.json.backup-2025-03-03T20-30-08.149Z
@@ -0,0 +1,95 @@
+{
+  "version": 2,
+  "buildCommand": "npm run build",
+  "installCommand": "npm ci --legacy-peer-deps",
+  "devCommand": "npm run dev",
+  "framework": "nextjs",
+  "env": {
+    "NODE_OPTIONS": "--max_old_space_size=4096",
+    "GENERATE_SOURCEMAP": "false",
+    "NEXT_TELEMETRY_DISABLED": "1"
+  },
+  "regions": ["iad1"],
+  "headers": [
+    {
+      "source": "/(.*)",
+      "headers": [
+        {
+          "key": "Cache-Control",
+          "value": "public, max-age=31536000, immutable"
+        },
+        {
+          "key": "X-DNS-Prefetch-Control",
+          "value": "on"
+        },
+        {
+          "key": "Strict-Transport-Security",
+          "value": "max-age=63072000; includeSubDomains; preload"
+        }
+      ]
+    },
+    {
+      "source": "/_next/static/(.*)",
+      "headers": [
+        {
+          "key": "Cache-Control",
+          "value": "public, max-age=31536000, immutable"
+        }
+      ]
+    },
+    {
+      "source": "/api/(.*)",
+      "headers": [
+        {
+          "key": "Access-Control-Allow-Origin",
+          "value": "*"
+        },
+        {
+          "key": "Access-Control-Allow-Methods",
+          "value": "GET, POST, OPTIONS"
+        },
+        {
+          "key": "Access-Control-Allow-Headers",
+          "value": "Content-Type, Authorization, x-clerk-auth-token"
+        },
+        {
+          "key": "Access-Control-Max-Age",
+          "value": "86400"
+        }
+      ]
+    },
+    {
+      "source": "/_next/data/(.*)",
+      "headers": [
+        {
+          "key": "Cache-Control",
+          "value": "public, max-age=3600, stale-while-revalidate=86400"
+        }
+      ]
+    },
+    {
+      "source": "/monitoring/(.*)",
+      "headers": [
+        {
+          "key": "Cache-Control",
+          "value": "public, max-age=3600"
+        }
+      ]
+    }
+  ],
+  "crons": [],
+  "functions": {
+    "src/app/api/story/generate/route.ts": {
+      "maxDuration": 30
+    }
+  },
+  "outputDirectory": ".next",
+  "build": {
+    "env": {
+      "NEXT_PUBLIC_SENTRY_DSN": "SENTRY_DSN_PLACEHOLDER",
+      "SENTRY_AUTH_TOKEN": "SENTRY_AUTH_TOKEN_PLACEHOLDER",
+      "SENTRY_ORG": "davini",
+      "SENTRY_PROJECT": "javascript-nextjs"
+    }
+  }
+}
diff --git a/vitest.config.cjs b/vitest.config.cjs
new file mode 100644
index 00000000..b24bbab4
--- /dev/null
+++ b/vitest.config.cjs
@@ -0,0 +1,22 @@
+const { defineConfig } = require('vitest/config');
+const react = require('@vitejs/plugin-react');
+const path = require('path');
+
+module.exports = defineConfig({
+  plugins: [react()],
+  resolve: {
+    alias: {
+      '@': path.resolve(__dirname, './src'),
+    },
+  },
+  test: {
+    globals: true,
+    environment: 'jsdom',
+    setupFiles: ['./vitest.setup.ts'],
+    include: ['src/**/*.test.{ts,tsx}'],
+    coverage: {
+      provider: 'v8',
+      reporter: ['text', 'json', 'html'],
+    },
+  },
+});
diff --git a/vitest.config.ts b/vitest.config.ts
index 2d6a2482..35a26e42 100644
--- a/vitest.config.ts
+++ b/vitest.config.ts
@@ -1,18 +1,22 @@
 import { defineConfig } from 'vitest/config';
+import react from '@vitejs/plugin-react';
 import path from 'path';
 
 export default defineConfig({
+  plugins: [react()],
   test: {
-    globals: true,
     environment: 'jsdom',
-    setupFiles: ['./src/__tests__/setup.ts'],
+    globals: true,
+    setupFiles: ['./vitest.setup.ts'],
+    include: ['**/*.test.{ts,tsx}'],
+    coverage: {
+      reporter: ['text', 'json', 'html'],
+      exclude: ['node_modules/', '.next/', 'public/'],
+    },
   },
   resolve: {
     alias: {
       '@': path.resolve(__dirname, './src'),
     },
   },
-  esbuild: {
-    target: 'node16',
-  },
 });
